{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"prefect-databricks Welcome! Prefect integrations interacting with Databricks The tasks within this collection were created by a code generator using the service's OpenAPI spec. The service's REST API documentation can be found here . Getting Started Python setup Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation . Installation Install prefect-databricks with pip : pip install prefect-databricks Then, register to view the block on Prefect Cloud: prefect block register -m prefect_databricks.credentials Note, to use the load method on Blocks, you must already have a block document saved through code or saved through the UI . Lists jobs on the Databricks instance from prefect import flow from prefect_databricks import DatabricksCredentials from prefect_databricks.jobs import jobs_list @flow def example_execute_endpoint_flow (): databricks_credentials = DatabricksCredentials . load ( \"my-block\" ) jobs = jobs_list ( databricks_credentials , limit = 5 ) return jobs example_execute_endpoint_flow () Launch a new cluster and run a Databricks notebook Notebook named example.ipynb on Databricks which accepts a name parameter: name = dbutils . widgets . get ( \"name\" ) message = f \"Don't worry { name } , I got your request! Welcome to prefect-databricks!\" print ( message ) Prefect flow that launches a new cluster to run example.ipynb : from prefect import flow from prefect_databricks import DatabricksCredentials from prefect_databricks.jobs import jobs_runs_submit from prefect_databricks.models.jobs import ( AutoScale , AwsAttributes , JobTaskSettings , NotebookTask , NewCluster , ) @flow def jobs_runs_submit_flow ( notebook_path , ** base_parameters ): databricks_credentials = DatabricksCredentials . load ( \"my-block\" ) # specify new cluster settings aws_attributes = AwsAttributes ( availability = \"SPOT\" , zone_id = \"us-west-2a\" , ebs_volume_type = \"GENERAL_PURPOSE_SSD\" , ebs_volume_count = 3 , ebs_volume_size = 100 , ) auto_scale = AutoScale ( min_workers = 1 , max_workers = 2 ) new_cluster = NewCluster ( aws_attributes = aws_attributes , autoscale = auto_scale , node_type_id = \"m4.large\" , spark_version = \"10.4.x-scala2.12\" , spark_conf = { \"spark.speculation\" : True }, ) # specify notebook to use and parameters to pass notebook_task = NotebookTask ( notebook_path = notebook_path , base_parameters = base_parameters , ) # compile job task settings job_task_settings = JobTaskSettings ( new_cluster = new_cluster , notebook_task = notebook_task , task_key = \"prefect-task\" ) run = jobs_runs_submit ( databricks_credentials = databricks_credentials , run_name = \"prefect-job\" , tasks = [ job_task_settings ] ) return run jobs_runs_submit_flow ( \"/Users/username@gmail.com/example.ipynb\" , name = \"Marvin\" ) Note, instead of using the built-in models, you may also input valid JSON. For example, AutoScale(min_workers=1, max_workers=2) is equivalent to {\"min_workers\": 1, \"max_workers\": 2} . Resources If you encounter any bugs while using prefect-databricks , feel free to open an issue in the prefect-databricks repository. If you have any questions or issues while using prefect-databricks , you can find help in either the Prefect Discourse forum or the Prefect Slack community . Development If you'd like to install a version of prefect-databricks for development, clone the repository and perform an editable install with pip : git clone https://github.com/PrefectHQ/prefect-databricks.git cd prefect-databricks/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Home"},{"location":"#prefect-databricks","text":"","title":"prefect-databricks"},{"location":"#welcome","text":"Prefect integrations interacting with Databricks The tasks within this collection were created by a code generator using the service's OpenAPI spec. The service's REST API documentation can be found here .","title":"Welcome!"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#python-setup","text":"Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation .","title":"Python setup"},{"location":"#installation","text":"Install prefect-databricks with pip : pip install prefect-databricks Then, register to view the block on Prefect Cloud: prefect block register -m prefect_databricks.credentials Note, to use the load method on Blocks, you must already have a block document saved through code or saved through the UI .","title":"Installation"},{"location":"#lists-jobs-on-the-databricks-instance","text":"from prefect import flow from prefect_databricks import DatabricksCredentials from prefect_databricks.jobs import jobs_list @flow def example_execute_endpoint_flow (): databricks_credentials = DatabricksCredentials . load ( \"my-block\" ) jobs = jobs_list ( databricks_credentials , limit = 5 ) return jobs example_execute_endpoint_flow ()","title":"Lists jobs on the Databricks instance"},{"location":"#launch-a-new-cluster-and-run-a-databricks-notebook","text":"Notebook named example.ipynb on Databricks which accepts a name parameter: name = dbutils . widgets . get ( \"name\" ) message = f \"Don't worry { name } , I got your request! Welcome to prefect-databricks!\" print ( message ) Prefect flow that launches a new cluster to run example.ipynb : from prefect import flow from prefect_databricks import DatabricksCredentials from prefect_databricks.jobs import jobs_runs_submit from prefect_databricks.models.jobs import ( AutoScale , AwsAttributes , JobTaskSettings , NotebookTask , NewCluster , ) @flow def jobs_runs_submit_flow ( notebook_path , ** base_parameters ): databricks_credentials = DatabricksCredentials . load ( \"my-block\" ) # specify new cluster settings aws_attributes = AwsAttributes ( availability = \"SPOT\" , zone_id = \"us-west-2a\" , ebs_volume_type = \"GENERAL_PURPOSE_SSD\" , ebs_volume_count = 3 , ebs_volume_size = 100 , ) auto_scale = AutoScale ( min_workers = 1 , max_workers = 2 ) new_cluster = NewCluster ( aws_attributes = aws_attributes , autoscale = auto_scale , node_type_id = \"m4.large\" , spark_version = \"10.4.x-scala2.12\" , spark_conf = { \"spark.speculation\" : True }, ) # specify notebook to use and parameters to pass notebook_task = NotebookTask ( notebook_path = notebook_path , base_parameters = base_parameters , ) # compile job task settings job_task_settings = JobTaskSettings ( new_cluster = new_cluster , notebook_task = notebook_task , task_key = \"prefect-task\" ) run = jobs_runs_submit ( databricks_credentials = databricks_credentials , run_name = \"prefect-job\" , tasks = [ job_task_settings ] ) return run jobs_runs_submit_flow ( \"/Users/username@gmail.com/example.ipynb\" , name = \"Marvin\" ) Note, instead of using the built-in models, you may also input valid JSON. For example, AutoScale(min_workers=1, max_workers=2) is equivalent to {\"min_workers\": 1, \"max_workers\": 2} .","title":"Launch a new cluster and run a Databricks notebook"},{"location":"#resources","text":"If you encounter any bugs while using prefect-databricks , feel free to open an issue in the prefect-databricks repository. If you have any questions or issues while using prefect-databricks , you can find help in either the Prefect Discourse forum or the Prefect Slack community .","title":"Resources"},{"location":"#development","text":"If you'd like to install a version of prefect-databricks for development, clone the repository and perform an editable install with pip : git clone https://github.com/PrefectHQ/prefect-databricks.git cd prefect-databricks/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Development"},{"location":"credentials/","text":"prefect_databricks.credentials Credential classes used to perform authenticated interactions with Databricks DatabricksCredentials Block used to manage Databricks authentication. Attributes: Name Type Description databricks_instance str Databricks instance used in formatting the endpoint URL. token SecretStr The token to authenticate with Databricks. Examples: Load stored Databricks credentials: from prefect_databricks import DatabricksCredentials databricks_credentials_block = DatabricksCredentials . load ( \"BLOCK_NAME\" ) Source code in prefect_databricks/credentials.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 class DatabricksCredentials ( Block ): \"\"\" Block used to manage Databricks authentication. Attributes: databricks_instance: Databricks instance used in formatting the endpoint URL. token: The token to authenticate with Databricks. Examples: Load stored Databricks credentials: ```python from prefect_databricks import DatabricksCredentials databricks_credentials_block = DatabricksCredentials.load(\"BLOCK_NAME\") ``` \"\"\" _block_type_name = \"Databricks Credentials\" _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/5GTHI1PH2dTiantfps6Fnc/1c750fab7f4c14ea1b93a62b9fea6a94/databricks_logo_icon_170295.png?h=250\" # noqa databricks_instance : str token : SecretStr client_kwargs : Optional [ Dict [ str , Any ]] = None def get_client ( self ) -> AsyncClient : \"\"\" Gets an Databricks REST AsyncClient. Returns: An Databricks REST AsyncClient. Example: Gets a Databricks REST AsyncClient. ```python from prefect import flow from prefect_databricks import DatabricksCredentials @flow def example_get_client_flow(): token = \"consumer_key\" databricks_credentials = DatabricksCredentials(token=token) client = databricks_credentials.get_client() return client example_get_client_flow() ``` \"\"\" base_url = f \"https:// { self . databricks_instance } /api/\" client_kwargs = self . client_kwargs or {} client_kwargs [ \"headers\" ] = { \"Authorization\" : f \"Bearer { self . token . get_secret_value () } \" } client = AsyncClient ( base_url = base_url , ** client_kwargs ) return client get_client Gets an Databricks REST AsyncClient. Returns: Type Description AsyncClient An Databricks REST AsyncClient. Example Gets a Databricks REST AsyncClient. from prefect import flow from prefect_databricks import DatabricksCredentials @flow def example_get_client_flow (): token = \"consumer_key\" databricks_credentials = DatabricksCredentials ( token = token ) client = databricks_credentials . get_client () return client example_get_client_flow () Source code in prefect_databricks/credentials.py 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 def get_client ( self ) -> AsyncClient : \"\"\" Gets an Databricks REST AsyncClient. Returns: An Databricks REST AsyncClient. Example: Gets a Databricks REST AsyncClient. ```python from prefect import flow from prefect_databricks import DatabricksCredentials @flow def example_get_client_flow(): token = \"consumer_key\" databricks_credentials = DatabricksCredentials(token=token) client = databricks_credentials.get_client() return client example_get_client_flow() ``` \"\"\" base_url = f \"https:// { self . databricks_instance } /api/\" client_kwargs = self . client_kwargs or {} client_kwargs [ \"headers\" ] = { \"Authorization\" : f \"Bearer { self . token . get_secret_value () } \" } client = AsyncClient ( base_url = base_url , ** client_kwargs ) return client","title":"Credentials"},{"location":"credentials/#prefect_databricks.credentials","text":"Credential classes used to perform authenticated interactions with Databricks","title":"credentials"},{"location":"credentials/#prefect_databricks.credentials.DatabricksCredentials","text":"Block used to manage Databricks authentication. Attributes: Name Type Description databricks_instance str Databricks instance used in formatting the endpoint URL. token SecretStr The token to authenticate with Databricks. Examples: Load stored Databricks credentials: from prefect_databricks import DatabricksCredentials databricks_credentials_block = DatabricksCredentials . load ( \"BLOCK_NAME\" ) Source code in prefect_databricks/credentials.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 class DatabricksCredentials ( Block ): \"\"\" Block used to manage Databricks authentication. Attributes: databricks_instance: Databricks instance used in formatting the endpoint URL. token: The token to authenticate with Databricks. Examples: Load stored Databricks credentials: ```python from prefect_databricks import DatabricksCredentials databricks_credentials_block = DatabricksCredentials.load(\"BLOCK_NAME\") ``` \"\"\" _block_type_name = \"Databricks Credentials\" _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/5GTHI1PH2dTiantfps6Fnc/1c750fab7f4c14ea1b93a62b9fea6a94/databricks_logo_icon_170295.png?h=250\" # noqa databricks_instance : str token : SecretStr client_kwargs : Optional [ Dict [ str , Any ]] = None def get_client ( self ) -> AsyncClient : \"\"\" Gets an Databricks REST AsyncClient. Returns: An Databricks REST AsyncClient. Example: Gets a Databricks REST AsyncClient. ```python from prefect import flow from prefect_databricks import DatabricksCredentials @flow def example_get_client_flow(): token = \"consumer_key\" databricks_credentials = DatabricksCredentials(token=token) client = databricks_credentials.get_client() return client example_get_client_flow() ``` \"\"\" base_url = f \"https:// { self . databricks_instance } /api/\" client_kwargs = self . client_kwargs or {} client_kwargs [ \"headers\" ] = { \"Authorization\" : f \"Bearer { self . token . get_secret_value () } \" } client = AsyncClient ( base_url = base_url , ** client_kwargs ) return client","title":"DatabricksCredentials"},{"location":"credentials/#prefect_databricks.credentials.DatabricksCredentials.get_client","text":"Gets an Databricks REST AsyncClient. Returns: Type Description AsyncClient An Databricks REST AsyncClient. Example Gets a Databricks REST AsyncClient. from prefect import flow from prefect_databricks import DatabricksCredentials @flow def example_get_client_flow (): token = \"consumer_key\" databricks_credentials = DatabricksCredentials ( token = token ) client = databricks_credentials . get_client () return client example_get_client_flow () Source code in prefect_databricks/credentials.py 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 def get_client ( self ) -> AsyncClient : \"\"\" Gets an Databricks REST AsyncClient. Returns: An Databricks REST AsyncClient. Example: Gets a Databricks REST AsyncClient. ```python from prefect import flow from prefect_databricks import DatabricksCredentials @flow def example_get_client_flow(): token = \"consumer_key\" databricks_credentials = DatabricksCredentials(token=token) client = databricks_credentials.get_client() return client example_get_client_flow() ``` \"\"\" base_url = f \"https:// { self . databricks_instance } /api/\" client_kwargs = self . client_kwargs or {} client_kwargs [ \"headers\" ] = { \"Authorization\" : f \"Bearer { self . token . get_secret_value () } \" } client = AsyncClient ( base_url = base_url , ** client_kwargs ) return client","title":"get_client()"},{"location":"flows/","text":"prefect_databricks.flows Module containing flows for interacting with Databricks DatabricksJobInternalError Raised when Databricks jobs runs submit encounters internal error Source code in prefect_databricks/flows.py 38 39 40 41 class DatabricksJobInternalError ( Exception ): \"\"\"Raised when Databricks jobs runs submit encounters internal error\"\"\" pass DatabricksJobRunTimedOut Raised when Databricks jobs runs does not complete in the configured max wait seconds Source code in prefect_databricks/flows.py 44 45 46 47 48 49 50 class DatabricksJobRunTimedOut ( Exception ): \"\"\" Raised when Databricks jobs runs does not complete in the configured max wait seconds \"\"\" pass DatabricksJobSkipped Raised when Databricks jobs runs submit skips Source code in prefect_databricks/flows.py 32 33 34 35 class DatabricksJobSkipped ( Exception ): \"\"\"Raised when Databricks jobs runs submit skips\"\"\" pass DatabricksJobTerminated Raised when Databricks jobs runs submit terminates Source code in prefect_databricks/flows.py 26 27 28 29 class DatabricksJobTerminated ( Exception ): \"\"\"Raised when Databricks jobs runs submit terminates\"\"\" pass jobs_runs_submit_and_wait_for_completion async Flow that triggers a job run and waits for the triggered run to complete. Parameters: Name Type Description Default databricks_credentials DatabricksCredentials Credentials to use for authentication with Databricks. required tasks List [ RunSubmitTaskSettings ] Tasks to run, e.g. [ { \"task_key\": \"Sessionize\", \"description\": \"Extracts session data from events\", \"depends_on\": [], \"existing_cluster_id\": \"0923-164208-meows279\", \"spark_jar_task\": { \"main_class_name\": \"com.databricks.Sessionize\", \"parameters\": [\"--data\", \"dbfs:/path/to/data.json\"], }, \"libraries\": [{\"jar\": \"dbfs:/mnt/databricks/Sessionize.jar\"}], \"timeout_seconds\": 86400, }, { \"task_key\": \"Orders_Ingest\", \"description\": \"Ingests order data\", \"depends_on\": [], \"existing_cluster_id\": \"0923-164208-meows279\", \"spark_jar_task\": { \"main_class_name\": \"com.databricks.OrdersIngest\", \"parameters\": [\"--data\", \"dbfs:/path/to/order-data.json\"], }, \"libraries\": [{\"jar\": \"dbfs:/mnt/databricks/OrderIngest.jar\"}], \"timeout_seconds\": 86400, }, { \"task_key\": \"Match\", \"description\": \"Matches orders with user sessions\", \"depends_on\": [ {\"task_key\": \"Orders_Ingest\"}, {\"task_key\": \"Sessionize\"}, ], \"new_cluster\": { \"spark_version\": \"7.3.x-scala2.12\", \"node_type_id\": \"i3.xlarge\", \"spark_conf\": {\"spark.speculation\": True}, \"aws_attributes\": { \"availability\": \"SPOT\", \"zone_id\": \"us-west-2a\", }, \"autoscale\": {\"min_workers\": 2, \"max_workers\": 16}, }, \"notebook_task\": { \"notebook_path\": \"/Users/user.name@databricks.com/Match\", \"base_parameters\": {\"name\": \"John Doe\", \"age\": \"35\"}, }, \"timeout_seconds\": 86400, }, ] None run_name str An optional name for the run. The default value is Untitled , e.g. A multitask job run . None git_source GitSource This functionality is in Public Preview. An optional specification for a remote repository containing the notebooks used by this job's notebook tasks. Key-values: - git_url: URL of the repository to be cloned by this job. The maximum length is 300 characters, e.g. https://github.com/databricks/databricks-cli . - git_provider: Unique identifier of the service used to host the Git repository. The value is case insensitive, e.g. github . - git_branch: Name of the branch to be checked out and used by this job. This field cannot be specified in conjunction with git_tag or git_commit. The maximum length is 255 characters, e.g. main . - git_tag: Name of the tag to be checked out and used by this job. This field cannot be specified in conjunction with git_branch or git_commit. The maximum length is 255 characters, e.g. release-1.0.0 . - git_commit: Commit to be checked out and used by this job. This field cannot be specified in conjunction with git_branch or git_tag. The maximum length is 64 characters, e.g. e0056d01 . - git_snapshot: Read-only state of the remote repository at the time the job was run. This field is only included on job runs. None timeout_seconds int An optional timeout applied to each run of this job. The default behavior is to have no timeout, e.g. 86400 . None idempotency_token str An optional token that can be used to guarantee the idempotency of job run requests. If a run with the provided token already exists, the request does not create a new run but returns the ID of the existing run instead. If a run with the provided token is deleted, an error is returned. If you specify the idempotency token, upon failure you can retry until the request succeeds. Databricks guarantees that exactly one run is launched with that idempotency token. This token must have at most 64 characters. For more information, see How to ensure idempotency for jobs , e.g. 8f018174-4792-40d5-bcbc-3e6a527352c8 . None access_control_list List [ AccessControlRequest ] List of permissions to set on the job. None max_wait_seconds int Maximum number of seconds to wait for the entire flow to complete. 900 poll_frequency_seconds int Number of seconds to wait in between checks for run completion. 10 **jobs_runs_submit_kwargs Dict [ str , Any ] Additional keyword arguments to pass to jobs_runs_submit . {} Returns: Type Description Dict A dictionary of task keys to its corresponding notebook output. Examples: Submit jobs runs and wait. from prefect import flow from prefect_databricks import DatabricksCredentials from prefect_databricks.flows import jobs_runs_submit_and_wait_for_completion from prefect_databricks.models.jobs import ( AutoScale , AwsAttributes , JobTaskSettings , NotebookTask , NewCluster , ) @flow def jobs_runs_submit_and_wait_for_completion_flow ( notebook_path , ** base_parameters ): databricks_credentials = await DatabricksCredentials . load ( \"BLOCK_NAME\" ) # specify new cluster settings aws_attributes = AwsAttributes ( availability = \"SPOT\" , zone_id = \"us-west-2a\" , ebs_volume_type = \"GENERAL_PURPOSE_SSD\" , ebs_volume_count = 3 , ebs_volume_size = 100 , ) auto_scale = AutoScale ( min_workers = 1 , max_workers = 2 ) new_cluster = NewCluster ( aws_attributes = aws_attributes , autoscale = auto_scale , node_type_id = \"m4.large\" , spark_version = \"10.4.x-scala2.12\" , spark_conf = { \"spark.speculation\" : True }, ) # specify notebook to use and parameters to pass notebook_task = NotebookTask ( notebook_path = notebook_path , base_parameters = base_parameters , ) # compile job task settings job_task_settings = JobTaskSettings ( new_cluster = new_cluster , notebook_task = notebook_task , task_key = \"prefect-task\" ) multi_task_runs = jobs_runs_submit_and_wait_for_completion ( databricks_credentials = databricks_credentials , run_name = \"prefect-job\" , tasks = [ job_task_settings ] ) return multi_task_runs Source code in prefect_databricks/flows.pyflow ( name = \"Submit jobs runs and wait for completion\" , description = ( \"Triggers a Databricks jobs runs and waits for the \" \"triggered runs to complete.\" ), ) async def jobs_runs_submit_and_wait_for_completion ( databricks_credentials : DatabricksCredentials , tasks : List [ RunSubmitTaskSettings ] = None , run_name : str = None , max_wait_seconds : int = 900 , poll_frequency_seconds : int = 10 , git_source : GitSource = None , timeout_seconds : int = None , idempotency_token : str = None , access_control_list : List [ AccessControlRequest ] = None , ** jobs_runs_submit_kwargs : Dict [ str , Any ], ) -> Dict : \"\"\" Flow that triggers a job run and waits for the triggered run to complete. Args: databricks_credentials: Credentials to use for authentication with Databricks. tasks: Tasks to run, e.g. ``` [ { \"task_key\": \"Sessionize\", \"description\": \"Extracts session data from events\", \"depends_on\": [], \"existing_cluster_id\": \"0923-164208-meows279\", \"spark_jar_task\": { \"main_class_name\": \"com.databricks.Sessionize\", \"parameters\": [\"--data\", \"dbfs:/path/to/data.json\"], }, \"libraries\": [{\"jar\": \"dbfs:/mnt/databricks/Sessionize.jar\"}], \"timeout_seconds\": 86400, }, { \"task_key\": \"Orders_Ingest\", \"description\": \"Ingests order data\", \"depends_on\": [], \"existing_cluster_id\": \"0923-164208-meows279\", \"spark_jar_task\": { \"main_class_name\": \"com.databricks.OrdersIngest\", \"parameters\": [\"--data\", \"dbfs:/path/to/order-data.json\"], }, \"libraries\": [{\"jar\": \"dbfs:/mnt/databricks/OrderIngest.jar\"}], \"timeout_seconds\": 86400, }, { \"task_key\": \"Match\", \"description\": \"Matches orders with user sessions\", \"depends_on\": [ {\"task_key\": \"Orders_Ingest\"}, {\"task_key\": \"Sessionize\"}, ], \"new_cluster\": { \"spark_version\": \"7.3.x-scala2.12\", \"node_type_id\": \"i3.xlarge\", \"spark_conf\": {\"spark.speculation\": True}, \"aws_attributes\": { \"availability\": \"SPOT\", \"zone_id\": \"us-west-2a\", }, \"autoscale\": {\"min_workers\": 2, \"max_workers\": 16}, }, \"notebook_task\": { \"notebook_path\": \"/Users/user.name@databricks.com/Match\", \"base_parameters\": {\"name\": \"John Doe\", \"age\": \"35\"}, }, \"timeout_seconds\": 86400, }, ] ``` run_name: An optional name for the run. The default value is `Untitled`, e.g. `A multitask job run`. git_source: This functionality is in Public Preview. An optional specification for a remote repository containing the notebooks used by this job's notebook tasks. Key-values: - git_url: URL of the repository to be cloned by this job. The maximum length is 300 characters, e.g. `https://github.com/databricks/databricks-cli`. - git_provider: Unique identifier of the service used to host the Git repository. The value is case insensitive, e.g. `github`. - git_branch: Name of the branch to be checked out and used by this job. This field cannot be specified in conjunction with git_tag or git_commit. The maximum length is 255 characters, e.g. `main`. - git_tag: Name of the tag to be checked out and used by this job. This field cannot be specified in conjunction with git_branch or git_commit. The maximum length is 255 characters, e.g. `release-1.0.0`. - git_commit: Commit to be checked out and used by this job. This field cannot be specified in conjunction with git_branch or git_tag. The maximum length is 64 characters, e.g. `e0056d01`. - git_snapshot: Read-only state of the remote repository at the time the job was run. This field is only included on job runs. timeout_seconds: An optional timeout applied to each run of this job. The default behavior is to have no timeout, e.g. `86400`. idempotency_token: An optional token that can be used to guarantee the idempotency of job run requests. If a run with the provided token already exists, the request does not create a new run but returns the ID of the existing run instead. If a run with the provided token is deleted, an error is returned. If you specify the idempotency token, upon failure you can retry until the request succeeds. Databricks guarantees that exactly one run is launched with that idempotency token. This token must have at most 64 characters. For more information, see [How to ensure idempotency for jobs](https://kb.databricks.com/jobs/jobs-idempotency.html), e.g. `8f018174-4792-40d5-bcbc-3e6a527352c8`. access_control_list: List of permissions to set on the job. max_wait_seconds: Maximum number of seconds to wait for the entire flow to complete. poll_frequency_seconds: Number of seconds to wait in between checks for run completion. **jobs_runs_submit_kwargs: Additional keyword arguments to pass to `jobs_runs_submit`. Returns: A dictionary of task keys to its corresponding notebook output. Examples: Submit jobs runs and wait. ```python from prefect import flow from prefect_databricks import DatabricksCredentials from prefect_databricks.flows import jobs_runs_submit_and_wait_for_completion from prefect_databricks.models.jobs import ( AutoScale, AwsAttributes, JobTaskSettings, NotebookTask, NewCluster, ) @flow def jobs_runs_submit_and_wait_for_completion_flow(notebook_path, **base_parameters): databricks_credentials = await DatabricksCredentials.load(\"BLOCK_NAME\") # specify new cluster settings aws_attributes = AwsAttributes( availability=\"SPOT\", zone_id=\"us-west-2a\", ebs_volume_type=\"GENERAL_PURPOSE_SSD\", ebs_volume_count=3, ebs_volume_size=100, ) auto_scale = AutoScale(min_workers=1, max_workers=2) new_cluster = NewCluster( aws_attributes=aws_attributes, autoscale=auto_scale, node_type_id=\"m4.large\", spark_version=\"10.4.x-scala2.12\", spark_conf={\"spark.speculation\": True}, ) # specify notebook to use and parameters to pass notebook_task = NotebookTask( notebook_path=notebook_path, base_parameters=base_parameters, ) # compile job task settings job_task_settings = JobTaskSettings( new_cluster=new_cluster, notebook_task=notebook_task, task_key=\"prefect-task\" ) multi_task_runs = jobs_runs_submit_and_wait_for_completion( databricks_credentials=databricks_credentials, run_name=\"prefect-job\", tasks=[job_task_settings] ) return multi_task_runs ``` \"\"\" # noqa logger = get_run_logger () # submit the jobs runs multi_task_jobs_runs_future = await jobs_runs_submit . submit ( databricks_credentials = databricks_credentials , tasks = tasks , run_name = run_name , git_source = git_source , timeout_seconds = timeout_seconds , idempotency_token = idempotency_token , access_control_list = access_control_list , ** jobs_runs_submit_kwargs , ) multi_task_jobs_runs = await multi_task_jobs_runs_future . result () multi_task_jobs_runs_id = multi_task_jobs_runs [ \"run_id\" ] # wait for all the jobs runs to complete in a separate flow # for a cleaner radar interface jobs_runs_state , jobs_runs_metadata = await jobs_runs_wait_for_completion ( run_name = run_name , multi_task_jobs_runs_id = multi_task_jobs_runs_id , databricks_credentials = databricks_credentials , max_wait_seconds = max_wait_seconds , poll_frequency_seconds = poll_frequency_seconds , ) # fetch the state results jobs_runs_life_cycle_state = jobs_runs_state [ \"life_cycle_state\" ] jobs_runs_state_message = jobs_runs_state [ \"state_message\" ] # return results or raise error if jobs_runs_life_cycle_state == RunLifeCycleState . terminated . value : jobs_runs_result_state = jobs_runs_state . get ( \"result_state\" , None ) if jobs_runs_result_state == RunResultState . success . value : task_notebook_outputs = {} for task in jobs_runs_metadata [ \"tasks\" ]: task_key = task [ \"task_key\" ] task_run_id = task [ \"run_id\" ] task_run_output_future = await jobs_runs_get_output . submit ( run_id = task_run_id , databricks_credentials = databricks_credentials , ) task_run_output = await task_run_output_future . result () task_run_notebook_output = task_run_output . get ( \"notebook_output\" , {}) task_notebook_outputs [ task_key ] = task_run_notebook_output logger . info ( \"Databricks Jobs Runs Submit ( %s ID %s ) completed successfully!\" , run_name , multi_task_jobs_runs_id , ) return task_notebook_outputs else : raise DatabricksJobTerminated ( f \"Databricks Jobs Runs Submit \" f \"( { run_name } ID { multi_task_jobs_runs_id } ) \" f \"terminated with result state, { jobs_runs_result_state } : \" f \" { jobs_runs_state_message } \" ) elif jobs_runs_life_cycle_state == RunLifeCycleState . skipped . value : raise DatabricksJobSkipped ( f \"Databricks Jobs Runs Submit ( { run_name } ID \" f \" { multi_task_jobs_runs_id } ) was skipped: { jobs_runs_state_message } .\" , ) elif jobs_runs_life_cycle_state == RunLifeCycleState . internalerror . value : raise DatabricksJobInternalError ( f \"Databricks Jobs Runs Submit ( { run_name } ID \" f \" { multi_task_jobs_runs_id } ) \" f \"encountered an internal error: { jobs_runs_state_message } .\" , ) jobs_runs_wait_for_completion async Flow that triggers a job run and waits for the triggered run to complete. Parameters: Name Type Description Default run_name str The name of the jobs runs task. required multi_task_jobs_run_id The ID of the jobs runs task to watch. required databricks_credentials DatabricksCredentials Credentials to use for authentication with Databricks. required max_wait_seconds int Maximum number of seconds to wait for the entire flow to complete. 900 poll_frequency_seconds int Number of seconds to wait in between checks for run completion. 10 Returns: Name Type Description jobs_runs_state A dict containing the jobs runs life cycle state and message. jobs_runs_metadata A dict containing IDs of the jobs runs tasks. Example Waits for completion on jobs runs. from prefect import flow from prefect_databricks import DatabricksCredentials from prefect_databricks.flows import jobs_runs_wait_for_completion @flow def jobs_runs_wait_for_completion_flow (): databricks_credentials = DatabricksCredentials . load ( \"BLOCK_NAME\" ) return jobs_runs_wait_for_completion ( run_name = \"my_run_name\" , multi_task_jobs_run_id = 45429 , databricks_credentials = databricks_credentials , max_wait_seconds = 1800 , # 30 minutes poll_frequency_seconds = 120 , # 2 minutes ) Source code in prefect_databricks/flows.py 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 @flow ( name = \"Wait for completion of jobs runs\" , description = \"Waits for the jobs runs to finish running\" , ) async def jobs_runs_wait_for_completion ( run_name : str , multi_task_jobs_runs_id : int , databricks_credentials : DatabricksCredentials , max_wait_seconds : int = 900 , poll_frequency_seconds : int = 10 , ): \"\"\" Flow that triggers a job run and waits for the triggered run to complete. Args: run_name: The name of the jobs runs task. multi_task_jobs_run_id: The ID of the jobs runs task to watch. databricks_credentials: Credentials to use for authentication with Databricks. max_wait_seconds: Maximum number of seconds to wait for the entire flow to complete. poll_frequency_seconds: Number of seconds to wait in between checks for run completion. Returns: jobs_runs_state: A dict containing the jobs runs life cycle state and message. jobs_runs_metadata: A dict containing IDs of the jobs runs tasks. Example: Waits for completion on jobs runs. ```python from prefect import flow from prefect_databricks import DatabricksCredentials from prefect_databricks.flows import jobs_runs_wait_for_completion @flow def jobs_runs_wait_for_completion_flow(): databricks_credentials = DatabricksCredentials.load(\"BLOCK_NAME\") return jobs_runs_wait_for_completion( run_name=\"my_run_name\", multi_task_jobs_run_id=45429, databricks_credentials=databricks_credentials, max_wait_seconds=1800, # 30 minutes poll_frequency_seconds=120, # 2 minutes ) ``` \"\"\" logger = get_run_logger () seconds_waited_for_run_completion = 0 wait_for = [] jobs_status = {} tasks_status = {} while seconds_waited_for_run_completion <= max_wait_seconds : jobs_runs_metadata_future = await jobs_runs_get . submit ( run_id = multi_task_jobs_runs_id , databricks_credentials = databricks_credentials , wait_for = wait_for , ) wait_for = [ jobs_runs_metadata_future ] jobs_runs_metadata = await jobs_runs_metadata_future . result () jobs_status = _update_and_log_state_changes ( jobs_status , jobs_runs_metadata , logger , \"Job\" ) jobs_runs_metadata_tasks = jobs_runs_metadata . get ( \"tasks\" , []) for task_metadata in jobs_runs_metadata_tasks : tasks_status = _update_and_log_state_changes ( tasks_status , task_metadata , logger , \"Task\" ) jobs_runs_state = jobs_runs_metadata . get ( \"state\" , {}) jobs_runs_life_cycle_state = jobs_runs_state [ \"life_cycle_state\" ] if jobs_runs_life_cycle_state in TERMINAL_STATUS_CODES : return jobs_runs_state , jobs_runs_metadata logger . info ( \"Waiting for %s seconds.\" , poll_frequency_seconds ) await asyncio . sleep ( poll_frequency_seconds ) seconds_waited_for_run_completion += poll_frequency_seconds raise DatabricksJobRunTimedOut ( f \"Max wait time of { max_wait_seconds } seconds exceeded while waiting \" f \"for job run ( { run_name } ID { multi_task_jobs_runs_id } )\" )","title":"Flows"},{"location":"flows/#prefect_databricks.flows","text":"Module containing flows for interacting with Databricks","title":"flows"},{"location":"flows/#prefect_databricks.flows.DatabricksJobInternalError","text":"Raised when Databricks jobs runs submit encounters internal error Source code in prefect_databricks/flows.py 38 39 40 41 class DatabricksJobInternalError ( Exception ): \"\"\"Raised when Databricks jobs runs submit encounters internal error\"\"\" pass","title":"DatabricksJobInternalError"},{"location":"flows/#prefect_databricks.flows.DatabricksJobRunTimedOut","text":"Raised when Databricks jobs runs does not complete in the configured max wait seconds Source code in prefect_databricks/flows.py 44 45 46 47 48 49 50 class DatabricksJobRunTimedOut ( Exception ): \"\"\" Raised when Databricks jobs runs does not complete in the configured max wait seconds \"\"\" pass","title":"DatabricksJobRunTimedOut"},{"location":"flows/#prefect_databricks.flows.DatabricksJobSkipped","text":"Raised when Databricks jobs runs submit skips Source code in prefect_databricks/flows.py 32 33 34 35 class DatabricksJobSkipped ( Exception ): \"\"\"Raised when Databricks jobs runs submit skips\"\"\" pass","title":"DatabricksJobSkipped"},{"location":"flows/#prefect_databricks.flows.DatabricksJobTerminated","text":"Raised when Databricks jobs runs submit terminates Source code in prefect_databricks/flows.py 26 27 28 29 class DatabricksJobTerminated ( Exception ): \"\"\"Raised when Databricks jobs runs submit terminates\"\"\" pass","title":"DatabricksJobTerminated"},{"location":"flows/#prefect_databricks.flows.jobs_runs_submit_and_wait_for_completion","text":"Flow that triggers a job run and waits for the triggered run to complete. Parameters: Name Type Description Default databricks_credentials DatabricksCredentials Credentials to use for authentication with Databricks. required tasks List [ RunSubmitTaskSettings ] Tasks to run, e.g. [ { \"task_key\": \"Sessionize\", \"description\": \"Extracts session data from events\", \"depends_on\": [], \"existing_cluster_id\": \"0923-164208-meows279\", \"spark_jar_task\": { \"main_class_name\": \"com.databricks.Sessionize\", \"parameters\": [\"--data\", \"dbfs:/path/to/data.json\"], }, \"libraries\": [{\"jar\": \"dbfs:/mnt/databricks/Sessionize.jar\"}], \"timeout_seconds\": 86400, }, { \"task_key\": \"Orders_Ingest\", \"description\": \"Ingests order data\", \"depends_on\": [], \"existing_cluster_id\": \"0923-164208-meows279\", \"spark_jar_task\": { \"main_class_name\": \"com.databricks.OrdersIngest\", \"parameters\": [\"--data\", \"dbfs:/path/to/order-data.json\"], }, \"libraries\": [{\"jar\": \"dbfs:/mnt/databricks/OrderIngest.jar\"}], \"timeout_seconds\": 86400, }, { \"task_key\": \"Match\", \"description\": \"Matches orders with user sessions\", \"depends_on\": [ {\"task_key\": \"Orders_Ingest\"}, {\"task_key\": \"Sessionize\"}, ], \"new_cluster\": { \"spark_version\": \"7.3.x-scala2.12\", \"node_type_id\": \"i3.xlarge\", \"spark_conf\": {\"spark.speculation\": True}, \"aws_attributes\": { \"availability\": \"SPOT\", \"zone_id\": \"us-west-2a\", }, \"autoscale\": {\"min_workers\": 2, \"max_workers\": 16}, }, \"notebook_task\": { \"notebook_path\": \"/Users/user.name@databricks.com/Match\", \"base_parameters\": {\"name\": \"John Doe\", \"age\": \"35\"}, }, \"timeout_seconds\": 86400, }, ] None run_name str An optional name for the run. The default value is Untitled , e.g. A multitask job run . None git_source GitSource This functionality is in Public Preview. An optional specification for a remote repository containing the notebooks used by this job's notebook tasks. Key-values: - git_url: URL of the repository to be cloned by this job. The maximum length is 300 characters, e.g. https://github.com/databricks/databricks-cli . - git_provider: Unique identifier of the service used to host the Git repository. The value is case insensitive, e.g. github . - git_branch: Name of the branch to be checked out and used by this job. This field cannot be specified in conjunction with git_tag or git_commit. The maximum length is 255 characters, e.g. main . - git_tag: Name of the tag to be checked out and used by this job. This field cannot be specified in conjunction with git_branch or git_commit. The maximum length is 255 characters, e.g. release-1.0.0 . - git_commit: Commit to be checked out and used by this job. This field cannot be specified in conjunction with git_branch or git_tag. The maximum length is 64 characters, e.g. e0056d01 . - git_snapshot: Read-only state of the remote repository at the time the job was run. This field is only included on job runs. None timeout_seconds int An optional timeout applied to each run of this job. The default behavior is to have no timeout, e.g. 86400 . None idempotency_token str An optional token that can be used to guarantee the idempotency of job run requests. If a run with the provided token already exists, the request does not create a new run but returns the ID of the existing run instead. If a run with the provided token is deleted, an error is returned. If you specify the idempotency token, upon failure you can retry until the request succeeds. Databricks guarantees that exactly one run is launched with that idempotency token. This token must have at most 64 characters. For more information, see How to ensure idempotency for jobs , e.g. 8f018174-4792-40d5-bcbc-3e6a527352c8 . None access_control_list List [ AccessControlRequest ] List of permissions to set on the job. None max_wait_seconds int Maximum number of seconds to wait for the entire flow to complete. 900 poll_frequency_seconds int Number of seconds to wait in between checks for run completion. 10 **jobs_runs_submit_kwargs Dict [ str , Any ] Additional keyword arguments to pass to jobs_runs_submit . {} Returns: Type Description Dict A dictionary of task keys to its corresponding notebook output. Examples: Submit jobs runs and wait. from prefect import flow from prefect_databricks import DatabricksCredentials from prefect_databricks.flows import jobs_runs_submit_and_wait_for_completion from prefect_databricks.models.jobs import ( AutoScale , AwsAttributes , JobTaskSettings , NotebookTask , NewCluster , ) @flow def jobs_runs_submit_and_wait_for_completion_flow ( notebook_path , ** base_parameters ): databricks_credentials = await DatabricksCredentials . load ( \"BLOCK_NAME\" ) # specify new cluster settings aws_attributes = AwsAttributes ( availability = \"SPOT\" , zone_id = \"us-west-2a\" , ebs_volume_type = \"GENERAL_PURPOSE_SSD\" , ebs_volume_count = 3 , ebs_volume_size = 100 , ) auto_scale = AutoScale ( min_workers = 1 , max_workers = 2 ) new_cluster = NewCluster ( aws_attributes = aws_attributes , autoscale = auto_scale , node_type_id = \"m4.large\" , spark_version = \"10.4.x-scala2.12\" , spark_conf = { \"spark.speculation\" : True }, ) # specify notebook to use and parameters to pass notebook_task = NotebookTask ( notebook_path = notebook_path , base_parameters = base_parameters , ) # compile job task settings job_task_settings = JobTaskSettings ( new_cluster = new_cluster , notebook_task = notebook_task , task_key = \"prefect-task\" ) multi_task_runs = jobs_runs_submit_and_wait_for_completion ( databricks_credentials = databricks_credentials , run_name = \"prefect-job\" , tasks = [ job_task_settings ] ) return multi_task_runs Source code in prefect_databricks/flows.pyflow ( name = \"Submit jobs runs and wait for completion\" , description = ( \"Triggers a Databricks jobs runs and waits for the \" \"triggered runs to complete.\" ), ) async def jobs_runs_submit_and_wait_for_completion ( databricks_credentials : DatabricksCredentials , tasks : List [ RunSubmitTaskSettings ] = None , run_name : str = None , max_wait_seconds : int = 900 , poll_frequency_seconds : int = 10 , git_source : GitSource = None , timeout_seconds : int = None , idempotency_token : str = None , access_control_list : List [ AccessControlRequest ] = None , ** jobs_runs_submit_kwargs : Dict [ str , Any ], ) -> Dict : \"\"\" Flow that triggers a job run and waits for the triggered run to complete. Args: databricks_credentials: Credentials to use for authentication with Databricks. tasks: Tasks to run, e.g. ``` [ { \"task_key\": \"Sessionize\", \"description\": \"Extracts session data from events\", \"depends_on\": [], \"existing_cluster_id\": \"0923-164208-meows279\", \"spark_jar_task\": { \"main_class_name\": \"com.databricks.Sessionize\", \"parameters\": [\"--data\", \"dbfs:/path/to/data.json\"], }, \"libraries\": [{\"jar\": \"dbfs:/mnt/databricks/Sessionize.jar\"}], \"timeout_seconds\": 86400, }, { \"task_key\": \"Orders_Ingest\", \"description\": \"Ingests order data\", \"depends_on\": [], \"existing_cluster_id\": \"0923-164208-meows279\", \"spark_jar_task\": { \"main_class_name\": \"com.databricks.OrdersIngest\", \"parameters\": [\"--data\", \"dbfs:/path/to/order-data.json\"], }, \"libraries\": [{\"jar\": \"dbfs:/mnt/databricks/OrderIngest.jar\"}], \"timeout_seconds\": 86400, }, { \"task_key\": \"Match\", \"description\": \"Matches orders with user sessions\", \"depends_on\": [ {\"task_key\": \"Orders_Ingest\"}, {\"task_key\": \"Sessionize\"}, ], \"new_cluster\": { \"spark_version\": \"7.3.x-scala2.12\", \"node_type_id\": \"i3.xlarge\", \"spark_conf\": {\"spark.speculation\": True}, \"aws_attributes\": { \"availability\": \"SPOT\", \"zone_id\": \"us-west-2a\", }, \"autoscale\": {\"min_workers\": 2, \"max_workers\": 16}, }, \"notebook_task\": { \"notebook_path\": \"/Users/user.name@databricks.com/Match\", \"base_parameters\": {\"name\": \"John Doe\", \"age\": \"35\"}, }, \"timeout_seconds\": 86400, }, ] ``` run_name: An optional name for the run. The default value is `Untitled`, e.g. `A multitask job run`. git_source: This functionality is in Public Preview. An optional specification for a remote repository containing the notebooks used by this job's notebook tasks. Key-values: - git_url: URL of the repository to be cloned by this job. The maximum length is 300 characters, e.g. `https://github.com/databricks/databricks-cli`. - git_provider: Unique identifier of the service used to host the Git repository. The value is case insensitive, e.g. `github`. - git_branch: Name of the branch to be checked out and used by this job. This field cannot be specified in conjunction with git_tag or git_commit. The maximum length is 255 characters, e.g. `main`. - git_tag: Name of the tag to be checked out and used by this job. This field cannot be specified in conjunction with git_branch or git_commit. The maximum length is 255 characters, e.g. `release-1.0.0`. - git_commit: Commit to be checked out and used by this job. This field cannot be specified in conjunction with git_branch or git_tag. The maximum length is 64 characters, e.g. `e0056d01`. - git_snapshot: Read-only state of the remote repository at the time the job was run. This field is only included on job runs. timeout_seconds: An optional timeout applied to each run of this job. The default behavior is to have no timeout, e.g. `86400`. idempotency_token: An optional token that can be used to guarantee the idempotency of job run requests. If a run with the provided token already exists, the request does not create a new run but returns the ID of the existing run instead. If a run with the provided token is deleted, an error is returned. If you specify the idempotency token, upon failure you can retry until the request succeeds. Databricks guarantees that exactly one run is launched with that idempotency token. This token must have at most 64 characters. For more information, see [How to ensure idempotency for jobs](https://kb.databricks.com/jobs/jobs-idempotency.html), e.g. `8f018174-4792-40d5-bcbc-3e6a527352c8`. access_control_list: List of permissions to set on the job. max_wait_seconds: Maximum number of seconds to wait for the entire flow to complete. poll_frequency_seconds: Number of seconds to wait in between checks for run completion. **jobs_runs_submit_kwargs: Additional keyword arguments to pass to `jobs_runs_submit`. Returns: A dictionary of task keys to its corresponding notebook output. Examples: Submit jobs runs and wait. ```python from prefect import flow from prefect_databricks import DatabricksCredentials from prefect_databricks.flows import jobs_runs_submit_and_wait_for_completion from prefect_databricks.models.jobs import ( AutoScale, AwsAttributes, JobTaskSettings, NotebookTask, NewCluster, ) @flow def jobs_runs_submit_and_wait_for_completion_flow(notebook_path, **base_parameters): databricks_credentials = await DatabricksCredentials.load(\"BLOCK_NAME\") # specify new cluster settings aws_attributes = AwsAttributes( availability=\"SPOT\", zone_id=\"us-west-2a\", ebs_volume_type=\"GENERAL_PURPOSE_SSD\", ebs_volume_count=3, ebs_volume_size=100, ) auto_scale = AutoScale(min_workers=1, max_workers=2) new_cluster = NewCluster( aws_attributes=aws_attributes, autoscale=auto_scale, node_type_id=\"m4.large\", spark_version=\"10.4.x-scala2.12\", spark_conf={\"spark.speculation\": True}, ) # specify notebook to use and parameters to pass notebook_task = NotebookTask( notebook_path=notebook_path, base_parameters=base_parameters, ) # compile job task settings job_task_settings = JobTaskSettings( new_cluster=new_cluster, notebook_task=notebook_task, task_key=\"prefect-task\" ) multi_task_runs = jobs_runs_submit_and_wait_for_completion( databricks_credentials=databricks_credentials, run_name=\"prefect-job\", tasks=[job_task_settings] ) return multi_task_runs ``` \"\"\" # noqa logger = get_run_logger () # submit the jobs runs multi_task_jobs_runs_future = await jobs_runs_submit . submit ( databricks_credentials = databricks_credentials , tasks = tasks , run_name = run_name , git_source = git_source , timeout_seconds = timeout_seconds , idempotency_token = idempotency_token , access_control_list = access_control_list , ** jobs_runs_submit_kwargs , ) multi_task_jobs_runs = await multi_task_jobs_runs_future . result () multi_task_jobs_runs_id = multi_task_jobs_runs [ \"run_id\" ] # wait for all the jobs runs to complete in a separate flow # for a cleaner radar interface jobs_runs_state , jobs_runs_metadata = await jobs_runs_wait_for_completion ( run_name = run_name , multi_task_jobs_runs_id = multi_task_jobs_runs_id , databricks_credentials = databricks_credentials , max_wait_seconds = max_wait_seconds , poll_frequency_seconds = poll_frequency_seconds , ) # fetch the state results jobs_runs_life_cycle_state = jobs_runs_state [ \"life_cycle_state\" ] jobs_runs_state_message = jobs_runs_state [ \"state_message\" ] # return results or raise error if jobs_runs_life_cycle_state == RunLifeCycleState . terminated . value : jobs_runs_result_state = jobs_runs_state . get ( \"result_state\" , None ) if jobs_runs_result_state == RunResultState . success . value : task_notebook_outputs = {} for task in jobs_runs_metadata [ \"tasks\" ]: task_key = task [ \"task_key\" ] task_run_id = task [ \"run_id\" ] task_run_output_future = await jobs_runs_get_output . submit ( run_id = task_run_id , databricks_credentials = databricks_credentials , ) task_run_output = await task_run_output_future . result () task_run_notebook_output = task_run_output . get ( \"notebook_output\" , {}) task_notebook_outputs [ task_key ] = task_run_notebook_output logger . info ( \"Databricks Jobs Runs Submit ( %s ID %s ) completed successfully!\" , run_name , multi_task_jobs_runs_id , ) return task_notebook_outputs else : raise DatabricksJobTerminated ( f \"Databricks Jobs Runs Submit \" f \"( { run_name } ID { multi_task_jobs_runs_id } ) \" f \"terminated with result state, { jobs_runs_result_state } : \" f \" { jobs_runs_state_message } \" ) elif jobs_runs_life_cycle_state == RunLifeCycleState . skipped . value : raise DatabricksJobSkipped ( f \"Databricks Jobs Runs Submit ( { run_name } ID \" f \" { multi_task_jobs_runs_id } ) was skipped: { jobs_runs_state_message } .\" , ) elif jobs_runs_life_cycle_state == RunLifeCycleState . internalerror . value : raise DatabricksJobInternalError ( f \"Databricks Jobs Runs Submit ( { run_name } ID \" f \" { multi_task_jobs_runs_id } ) \" f \"encountered an internal error: { jobs_runs_state_message } .\" , )","title":"jobs_runs_submit_and_wait_for_completion()"},{"location":"flows/#prefect_databricks.flows.jobs_runs_wait_for_completion","text":"Flow that triggers a job run and waits for the triggered run to complete. Parameters: Name Type Description Default run_name str The name of the jobs runs task. required multi_task_jobs_run_id The ID of the jobs runs task to watch. required databricks_credentials DatabricksCredentials Credentials to use for authentication with Databricks. required max_wait_seconds int Maximum number of seconds to wait for the entire flow to complete. 900 poll_frequency_seconds int Number of seconds to wait in between checks for run completion. 10 Returns: Name Type Description jobs_runs_state A dict containing the jobs runs life cycle state and message. jobs_runs_metadata A dict containing IDs of the jobs runs tasks. Example Waits for completion on jobs runs. from prefect import flow from prefect_databricks import DatabricksCredentials from prefect_databricks.flows import jobs_runs_wait_for_completion @flow def jobs_runs_wait_for_completion_flow (): databricks_credentials = DatabricksCredentials . load ( \"BLOCK_NAME\" ) return jobs_runs_wait_for_completion ( run_name = \"my_run_name\" , multi_task_jobs_run_id = 45429 , databricks_credentials = databricks_credentials , max_wait_seconds = 1800 , # 30 minutes poll_frequency_seconds = 120 , # 2 minutes ) Source code in prefect_databricks/flows.py 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 @flow ( name = \"Wait for completion of jobs runs\" , description = \"Waits for the jobs runs to finish running\" , ) async def jobs_runs_wait_for_completion ( run_name : str , multi_task_jobs_runs_id : int , databricks_credentials : DatabricksCredentials , max_wait_seconds : int = 900 , poll_frequency_seconds : int = 10 , ): \"\"\" Flow that triggers a job run and waits for the triggered run to complete. Args: run_name: The name of the jobs runs task. multi_task_jobs_run_id: The ID of the jobs runs task to watch. databricks_credentials: Credentials to use for authentication with Databricks. max_wait_seconds: Maximum number of seconds to wait for the entire flow to complete. poll_frequency_seconds: Number of seconds to wait in between checks for run completion. Returns: jobs_runs_state: A dict containing the jobs runs life cycle state and message. jobs_runs_metadata: A dict containing IDs of the jobs runs tasks. Example: Waits for completion on jobs runs. ```python from prefect import flow from prefect_databricks import DatabricksCredentials from prefect_databricks.flows import jobs_runs_wait_for_completion @flow def jobs_runs_wait_for_completion_flow(): databricks_credentials = DatabricksCredentials.load(\"BLOCK_NAME\") return jobs_runs_wait_for_completion( run_name=\"my_run_name\", multi_task_jobs_run_id=45429, databricks_credentials=databricks_credentials, max_wait_seconds=1800, # 30 minutes poll_frequency_seconds=120, # 2 minutes ) ``` \"\"\" logger = get_run_logger () seconds_waited_for_run_completion = 0 wait_for = [] jobs_status = {} tasks_status = {} while seconds_waited_for_run_completion <= max_wait_seconds : jobs_runs_metadata_future = await jobs_runs_get . submit ( run_id = multi_task_jobs_runs_id , databricks_credentials = databricks_credentials , wait_for = wait_for , ) wait_for = [ jobs_runs_metadata_future ] jobs_runs_metadata = await jobs_runs_metadata_future . result () jobs_status = _update_and_log_state_changes ( jobs_status , jobs_runs_metadata , logger , \"Job\" ) jobs_runs_metadata_tasks = jobs_runs_metadata . get ( \"tasks\" , []) for task_metadata in jobs_runs_metadata_tasks : tasks_status = _update_and_log_state_changes ( tasks_status , task_metadata , logger , \"Task\" ) jobs_runs_state = jobs_runs_metadata . get ( \"state\" , {}) jobs_runs_life_cycle_state = jobs_runs_state [ \"life_cycle_state\" ] if jobs_runs_life_cycle_state in TERMINAL_STATUS_CODES : return jobs_runs_state , jobs_runs_metadata logger . info ( \"Waiting for %s seconds.\" , poll_frequency_seconds ) await asyncio . sleep ( poll_frequency_seconds ) seconds_waited_for_run_completion += poll_frequency_seconds raise DatabricksJobRunTimedOut ( f \"Max wait time of { max_wait_seconds } seconds exceeded while waiting \" f \"for job run ( { run_name } ID { multi_task_jobs_runs_id } )\" )","title":"jobs_runs_wait_for_completion()"},{"location":"jobs/","text":"prefect_databricks.jobs This is a module containing tasks for interacting with: Databricks jobs jobs_create async Create a new job. Parameters: Name Type Description Default databricks_credentials 'DatabricksCredentials' Credentials to use for authentication with Databricks. required name str An optional name for the job, e.g. A multitask job . 'Untitled' tags Dict A map of tags associated with the job. These are forwarded to the cluster as cluster tags for jobs clusters, and are subject to the same limitations as cluster tags. A maximum of 25 tags can be added to the job, e.g. {\"cost-center\": \"engineering\", \"team\": \"jobs\"} None tasks List ['models.JobTaskSettings'] A list of task specifications to be executed by this job, e.g. [ { \"task_key\": \"Sessionize\", \"description\": \"Extracts session data from events\", \"depends_on\": [], \"existing_cluster_id\": \"0923-164208-meows279\", \"spark_jar_task\": { \"main_class_name\": \"com.databricks.Sessionize\", \"parameters\": [\"--data\", \"dbfs:/path/to/data.json\"], }, \"libraries\": [{\"jar\": \"dbfs:/mnt/databricks/Sessionize.jar\"}], \"timeout_seconds\": 86400, \"max_retries\": 3, \"min_retry_interval_millis\": 2000, \"retry_on_timeout\": False, }, { \"task_key\": \"Orders_Ingest\", \"description\": \"Ingests order data\", \"depends_on\": [], \"job_cluster_key\": \"auto_scaling_cluster\", \"spark_jar_task\": { \"main_class_name\": \"com.databricks.OrdersIngest\", \"parameters\": [\"--data\", \"dbfs:/path/to/order-data.json\"], }, \"libraries\": [{\"jar\": \"dbfs:/mnt/databricks/OrderIngest.jar\"}], \"timeout_seconds\": 86400, \"max_retries\": 3, \"min_retry_interval_millis\": 2000, \"retry_on_timeout\": False, }, { \"task_key\": \"Match\", \"description\": \"Matches orders with user sessions\", \"depends_on\": [ {\"task_key\": \"Orders_Ingest\"}, {\"task_key\": \"Sessionize\"}, ], \"new_cluster\": { \"spark_version\": \"7.3.x-scala2.12\", \"node_type_id\": \"i3.xlarge\", \"spark_conf\": {\"spark.speculation\": True}, \"aws_attributes\": { \"availability\": \"SPOT\", \"zone_id\": \"us-west-2a\", }, \"autoscale\": {\"min_workers\": 2, \"max_workers\": 16}, }, \"notebook_task\": { \"notebook_path\": \"/Users/user.name@databricks.com/Match\", \"source\": \"WORKSPACE\", \"base_parameters\": {\"name\": \"John Doe\", \"age\": \"35\"}, }, \"timeout_seconds\": 86400, \"max_retries\": 3, \"min_retry_interval_millis\": 2000, \"retry_on_timeout\": False, }, ] None job_clusters List ['models.JobCluster'] A list of job cluster specifications that can be shared and reused by tasks of this job. Libraries cannot be declared in a shared job cluster. You must declare dependent libraries in task settings, e.g. [ { \"job_cluster_key\": \"auto_scaling_cluster\", \"new_cluster\": { \"spark_version\": \"7.3.x-scala2.12\", \"node_type_id\": \"i3.xlarge\", \"spark_conf\": {\"spark.speculation\": True}, \"aws_attributes\": { \"availability\": \"SPOT\", \"zone_id\": \"us-west-2a\", }, \"autoscale\": {\"min_workers\": 2, \"max_workers\": 16}, }, } ] None email_notifications 'models.JobEmailNotifications' An optional set of email addresses that is notified when runs of this job begin or complete as well as when this job is deleted. The default behavior is to not send any emails. Key-values: - on_start: A list of email addresses to be notified when a run begins. If not specified on job creation, reset, or update, the list is empty, and notifications are not sent, e.g. [\"user.name@databricks.com\"] - on_success: A list of email addresses to be notified when a run successfully completes. A run is considered to have completed successfully if it ends with a TERMINATED life_cycle_state and a SUCCESSFUL result_state. If not specified on job creation, reset, or update, the list is empty, and notifications are not sent, e.g. [\"user.name@databricks.com\"] - on_failure: A list of email addresses to be notified when a run unsuccessfully completes. A run is considered to have completed unsuccessfully if it ends with an INTERNAL_ERROR life_cycle_state or a SKIPPED , FAILED , or TIMED_OUT result_state. If this is not specified on job creation, reset, or update the list is empty, and notifications are not sent, e.g. [\"user.name@databricks.com\"] - no_alert_for_skipped_runs: If true, do not send email to recipients specified in on_failure if the run is skipped. None timeout_seconds int An optional timeout applied to each run of this job. The default behavior is to have no timeout, e.g. 86400 . None schedule 'models.CronSchedule' An optional periodic schedule for this job. The default behavior is that the job only runs when triggered by clicking \u201cRun Now\u201d in the Jobs UI or sending an API request to runNow . Key-values: - quartz_cron_expression: A Cron expression using Quartz syntax that describes the schedule for a job. See Cron Trigger for details. This field is required, e.g. 20 30 * * * ? . - timezone_id: A Java timezone ID. The schedule for a job is resolved with respect to this timezone. See Java TimeZone for details. This field is required, e.g. Europe/London . - pause_status: Indicate whether this schedule is paused or not, e.g. PAUSED . None max_concurrent_runs int An optional maximum allowed number of concurrent runs of the job. Set this value if you want to be able to execute multiple runs of the same job concurrently. This is useful for example if you trigger your job on a frequent schedule and want to allow consecutive runs to overlap with each other, or if you want to trigger multiple runs which differ by their input parameters. This setting affects only new runs. For example, suppose the job\u2019s concurrency is 4 and there are 4 concurrent active runs. Then setting the concurrency to 3 won\u2019t kill any of the active runs. However, from then on, new runs are skipped unless there are fewer than 3 active runs. This value cannot exceed 1000. Setting this value to 0 causes all new runs to be skipped. The default behavior is to allow only 1 concurrent run, e.g. 10 . None git_source 'models.GitSource' This functionality is in Public Preview. An optional specification for a remote repository containing the notebooks used by this job's notebook tasks, e.g. { \"git_url\": \"https://github.com/databricks/databricks-cli\", \"git_branch\": \"main\", \"git_provider\": \"gitHub\", } Key-values: - git_url: URL of the repository to be cloned by this job. The maximum length is 300 characters, e.g. https://github.com/databricks/databricks-cli . - git_provider: Unique identifier of the service used to host the Git repository. The value is case insensitive, e.g. github . - git_branch: Name of the branch to be checked out and used by this job. This field cannot be specified in conjunction with git_tag or git_commit. The maximum length is 255 characters, e.g. main . - git_tag: Name of the tag to be checked out and used by this job. This field cannot be specified in conjunction with git_branch or git_commit. The maximum length is 255 characters, e.g. release-1.0.0 . - git_commit: Commit to be checked out and used by this job. This field cannot be specified in conjunction with git_branch or git_tag. The maximum length is 64 characters, e.g. e0056d01 . - git_snapshot: Read-only state of the remote repository at the time the job was run. This field is only included on job runs. None format str Used to tell what is the format of the job. This field is ignored in Create/Update/Reset calls. When using the Jobs API 2.1 this value is always set to 'MULTI_TASK' , e.g. MULTI_TASK . None access_control_list List ['models.AccessControlRequest'] List of permissions to set on the job. None Returns: Type Description Dict [ str , Any ] Upon success, a dict of the response. - job_id: int API Endpoint: /2.1/jobs/create API Responses: Response Description 200 Job was created successfully. 400 The request was malformed. See JSON response for error details. 401 The request was unauthorized. 500 The request was not handled correctly due to a server error. Source code in prefect_databricks/jobs.pytask async def jobs_create ( databricks_credentials : \"DatabricksCredentials\" , name : str = \"Untitled\" , tags : Dict = None , tasks : List [ \"models.JobTaskSettings\" ] = None , job_clusters : List [ \"models.JobCluster\" ] = None , email_notifications : \"models.JobEmailNotifications\" = None , timeout_seconds : int = None , schedule : \"models.CronSchedule\" = None , max_concurrent_runs : int = None , git_source : \"models.GitSource\" = None , format : str = None , access_control_list : List [ \"models.AccessControlRequest\" ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Create a new job. Args: databricks_credentials: Credentials to use for authentication with Databricks. name: An optional name for the job, e.g. `A multitask job`. tags: A map of tags associated with the job. These are forwarded to the cluster as cluster tags for jobs clusters, and are subject to the same limitations as cluster tags. A maximum of 25 tags can be added to the job, e.g. ``` {\"cost-center\": \"engineering\", \"team\": \"jobs\"} ``` tasks: A list of task specifications to be executed by this job, e.g. ``` [ { \"task_key\": \"Sessionize\", \"description\": \"Extracts session data from events\", \"depends_on\": [], \"existing_cluster_id\": \"0923-164208-meows279\", \"spark_jar_task\": { \"main_class_name\": \"com.databricks.Sessionize\", \"parameters\": [\"--data\", \"dbfs:/path/to/data.json\"], }, \"libraries\": [{\"jar\": \"dbfs:/mnt/databricks/Sessionize.jar\"}], \"timeout_seconds\": 86400, \"max_retries\": 3, \"min_retry_interval_millis\": 2000, \"retry_on_timeout\": False, }, { \"task_key\": \"Orders_Ingest\", \"description\": \"Ingests order data\", \"depends_on\": [], \"job_cluster_key\": \"auto_scaling_cluster\", \"spark_jar_task\": { \"main_class_name\": \"com.databricks.OrdersIngest\", \"parameters\": [\"--data\", \"dbfs:/path/to/order-data.json\"], }, \"libraries\": [{\"jar\": \"dbfs:/mnt/databricks/OrderIngest.jar\"}], \"timeout_seconds\": 86400, \"max_retries\": 3, \"min_retry_interval_millis\": 2000, \"retry_on_timeout\": False, }, { \"task_key\": \"Match\", \"description\": \"Matches orders with user sessions\", \"depends_on\": [ {\"task_key\": \"Orders_Ingest\"}, {\"task_key\": \"Sessionize\"}, ], \"new_cluster\": { \"spark_version\": \"7.3.x-scala2.12\", \"node_type_id\": \"i3.xlarge\", \"spark_conf\": {\"spark.speculation\": True}, \"aws_attributes\": { \"availability\": \"SPOT\", \"zone_id\": \"us-west-2a\", }, \"autoscale\": {\"min_workers\": 2, \"max_workers\": 16}, }, \"notebook_task\": { \"notebook_path\": \"/Users/user.name@databricks.com/Match\", \"source\": \"WORKSPACE\", \"base_parameters\": {\"name\": \"John Doe\", \"age\": \"35\"}, }, \"timeout_seconds\": 86400, \"max_retries\": 3, \"min_retry_interval_millis\": 2000, \"retry_on_timeout\": False, }, ] ``` job_clusters: A list of job cluster specifications that can be shared and reused by tasks of this job. Libraries cannot be declared in a shared job cluster. You must declare dependent libraries in task settings, e.g. ``` [ { \"job_cluster_key\": \"auto_scaling_cluster\", \"new_cluster\": { \"spark_version\": \"7.3.x-scala2.12\", \"node_type_id\": \"i3.xlarge\", \"spark_conf\": {\"spark.speculation\": True}, \"aws_attributes\": { \"availability\": \"SPOT\", \"zone_id\": \"us-west-2a\", }, \"autoscale\": {\"min_workers\": 2, \"max_workers\": 16}, }, } ] ``` email_notifications: An optional set of email addresses that is notified when runs of this job begin or complete as well as when this job is deleted. The default behavior is to not send any emails. Key-values: - on_start: A list of email addresses to be notified when a run begins. If not specified on job creation, reset, or update, the list is empty, and notifications are not sent, e.g. ``` [\"user.name@databricks.com\"] ``` - on_success: A list of email addresses to be notified when a run successfully completes. A run is considered to have completed successfully if it ends with a `TERMINATED` `life_cycle_state` and a `SUCCESSFUL` result_state. If not specified on job creation, reset, or update, the list is empty, and notifications are not sent, e.g. ``` [\"user.name@databricks.com\"] ``` - on_failure: A list of email addresses to be notified when a run unsuccessfully completes. A run is considered to have completed unsuccessfully if it ends with an `INTERNAL_ERROR` `life_cycle_state` or a `SKIPPED`, `FAILED`, or `TIMED_OUT` result_state. If this is not specified on job creation, reset, or update the list is empty, and notifications are not sent, e.g. ``` [\"user.name@databricks.com\"] ``` - no_alert_for_skipped_runs: If true, do not send email to recipients specified in `on_failure` if the run is skipped. timeout_seconds: An optional timeout applied to each run of this job. The default behavior is to have no timeout, e.g. `86400`. schedule: An optional periodic schedule for this job. The default behavior is that the job only runs when triggered by clicking \u201cRun Now\u201d in the Jobs UI or sending an API request to `runNow`. Key-values: - quartz_cron_expression: A Cron expression using Quartz syntax that describes the schedule for a job. See [Cron Trigger](http://www.quartz- scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html) for details. This field is required, e.g. `20 30 * * * ?`. - timezone_id: A Java timezone ID. The schedule for a job is resolved with respect to this timezone. See [Java TimeZone](https://docs.oracle.com/javase/7/docs/api/java/util/TimeZone.html) for details. This field is required, e.g. `Europe/London`. - pause_status: Indicate whether this schedule is paused or not, e.g. `PAUSED`. max_concurrent_runs: An optional maximum allowed number of concurrent runs of the job. Set this value if you want to be able to execute multiple runs of the same job concurrently. This is useful for example if you trigger your job on a frequent schedule and want to allow consecutive runs to overlap with each other, or if you want to trigger multiple runs which differ by their input parameters. This setting affects only new runs. For example, suppose the job\u2019s concurrency is 4 and there are 4 concurrent active runs. Then setting the concurrency to 3 won\u2019t kill any of the active runs. However, from then on, new runs are skipped unless there are fewer than 3 active runs. This value cannot exceed 1000\\. Setting this value to 0 causes all new runs to be skipped. The default behavior is to allow only 1 concurrent run, e.g. `10`. git_source: This functionality is in Public Preview. An optional specification for a remote repository containing the notebooks used by this job's notebook tasks, e.g. ``` { \"git_url\": \"https://github.com/databricks/databricks-cli\", \"git_branch\": \"main\", \"git_provider\": \"gitHub\", } ``` Key-values: - git_url: URL of the repository to be cloned by this job. The maximum length is 300 characters, e.g. `https://github.com/databricks/databricks-cli`. - git_provider: Unique identifier of the service used to host the Git repository. The value is case insensitive, e.g. `github`. - git_branch: Name of the branch to be checked out and used by this job. This field cannot be specified in conjunction with git_tag or git_commit. The maximum length is 255 characters, e.g. `main`. - git_tag: Name of the tag to be checked out and used by this job. This field cannot be specified in conjunction with git_branch or git_commit. The maximum length is 255 characters, e.g. `release-1.0.0`. - git_commit: Commit to be checked out and used by this job. This field cannot be specified in conjunction with git_branch or git_tag. The maximum length is 64 characters, e.g. `e0056d01`. - git_snapshot: Read-only state of the remote repository at the time the job was run. This field is only included on job runs. format: Used to tell what is the format of the job. This field is ignored in Create/Update/Reset calls. When using the Jobs API 2.1 this value is always set to `'MULTI_TASK'`, e.g. `MULTI_TASK`. access_control_list: List of permissions to set on the job. Returns: Upon success, a dict of the response. </br>- `job_id: int`</br> <h4>API Endpoint:</h4> `/2.1/jobs/create` <h4>API Responses:</h4> | Response | Description | | --- | --- | | 200 | Job was created successfully. | | 400 | The request was malformed. See JSON response for error details. | | 401 | The request was unauthorized. | | 500 | The request was not handled correctly due to a server error. | \"\"\" # noqa endpoint = \"/2.1/jobs/create\" # noqa responses = { 200 : \"Job was created successfully.\" , # noqa 400 : \"The request was malformed. See JSON response for error details.\" , # noqa 401 : \"The request was unauthorized.\" , # noqa 500 : \"The request was not handled correctly due to a server error.\" , # noqa } json_payload = { \"name\" : name , \"tags\" : tags , \"tasks\" : tasks , \"job_clusters\" : job_clusters , \"email_notifications\" : email_notifications , \"timeout_seconds\" : timeout_seconds , \"schedule\" : schedule , \"max_concurrent_runs\" : max_concurrent_runs , \"git_source\" : git_source , \"format\" : format , \"access_control_list\" : access_control_list , } response = await execute_endpoint . fn ( endpoint , databricks_credentials , http_method = HTTPMethod . POST , json = json_payload , ) contents = _unpack_contents ( response , responses ) return contents jobs_delete async Deletes a job. Parameters: Name Type Description Default databricks_credentials 'DatabricksCredentials' Credentials to use for authentication with Databricks. required job_id int The canonical identifier of the job to delete. This field is required, e.g. 11223344 . None Returns: Type Description Dict [ str , Any ] Upon success, an empty dict. API Endpoint: /2.1/jobs/delete API Responses: Response Description 200 Job was deleted successfully. 400 The request was malformed. See JSON response for error details. 401 The request was unauthorized. 500 The request was not handled correctly due to a server error. Source code in prefect_databricks/jobs.py 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 @task async def jobs_delete ( databricks_credentials : \"DatabricksCredentials\" , job_id : int = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Deletes a job. Args: databricks_credentials: Credentials to use for authentication with Databricks. job_id: The canonical identifier of the job to delete. This field is required, e.g. `11223344`. Returns: Upon success, an empty dict. <h4>API Endpoint:</h4> `/2.1/jobs/delete` <h4>API Responses:</h4> | Response | Description | | --- | --- | | 200 | Job was deleted successfully. | | 400 | The request was malformed. See JSON response for error details. | | 401 | The request was unauthorized. | | 500 | The request was not handled correctly due to a server error. | \"\"\" # noqa endpoint = \"/2.1/jobs/delete\" # noqa responses = { 200 : \"Job was deleted successfully.\" , # noqa 400 : \"The request was malformed. See JSON response for error details.\" , # noqa 401 : \"The request was unauthorized.\" , # noqa 500 : \"The request was not handled correctly due to a server error.\" , # noqa } json_payload = { \"job_id\" : job_id , } response = await execute_endpoint . fn ( endpoint , databricks_credentials , http_method = HTTPMethod . POST , json = json_payload , ) contents = _unpack_contents ( response , responses ) return contents jobs_get async Retrieves the details for a single job. Parameters: Name Type Description Default job_id int The canonical identifier of the job to retrieve information about. This field is required. required databricks_credentials 'DatabricksCredentials' Credentials to use for authentication with Databricks. required Returns: Type Description Dict [ str , Any ] Upon success, a dict of the response. - job_id: int - creator_user_name: str - run_as_user_name: str - settings: \"models.JobSettings\" - created_time: int API Endpoint: /2.1/jobs/get API Responses: Response Description 200 Job was retrieved successfully. 400 The request was malformed. See JSON response for error details. 401 The request was unauthorized. 500 The request was not handled correctly due to a server error. Source code in prefect_databricks/jobs.py 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 @task async def jobs_get ( job_id : int , databricks_credentials : \"DatabricksCredentials\" , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Retrieves the details for a single job. Args: job_id: The canonical identifier of the job to retrieve information about. This field is required. databricks_credentials: Credentials to use for authentication with Databricks. Returns: Upon success, a dict of the response. </br>- `job_id: int`</br>- `creator_user_name: str`</br>- `run_as_user_name: str`</br>- `settings: \"models.JobSettings\"`</br>- `created_time: int`</br> <h4>API Endpoint:</h4> `/2.1/jobs/get` <h4>API Responses:</h4> | Response | Description | | --- | --- | | 200 | Job was retrieved successfully. | | 400 | The request was malformed. See JSON response for error details. | | 401 | The request was unauthorized. | | 500 | The request was not handled correctly due to a server error. | \"\"\" # noqa endpoint = \"/2.1/jobs/get\" # noqa responses = { 200 : \"Job was retrieved successfully.\" , # noqa 400 : \"The request was malformed. See JSON response for error details.\" , # noqa 401 : \"The request was unauthorized.\" , # noqa 500 : \"The request was not handled correctly due to a server error.\" , # noqa } params = { \"job_id\" : job_id , } response = await execute_endpoint . fn ( endpoint , databricks_credentials , http_method = HTTPMethod . GET , params = params , ) contents = _unpack_contents ( response , responses ) return contents jobs_list async Retrieves a list of jobs. Parameters: Name Type Description Default databricks_credentials 'DatabricksCredentials' Credentials to use for authentication with Databricks. required limit int The number of jobs to return. This value must be greater than 0 and less or equal to 25. The default value is 20. 20 offset int The offset of the first job to return, relative to the most recently created job. 0 expand_tasks bool Whether to include task and cluster details in the response. False Returns: Type Description Dict [ str , Any ] Upon success, a dict of the response. - jobs: List[\"models.Job\"] - has_more: bool API Endpoint: /2.1/jobs/list API Responses: Response Description 200 List of jobs was retrieved successfully. 400 The request was malformed. See JSON response for error details. 401 The request was unauthorized. 500 The request was not handled correctly due to a server error. Source code in prefect_databricks/jobs.py 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 @task async def jobs_list ( databricks_credentials : \"DatabricksCredentials\" , limit : int = 20 , offset : int = 0 , expand_tasks : bool = False , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Retrieves a list of jobs. Args: databricks_credentials: Credentials to use for authentication with Databricks. limit: The number of jobs to return. This value must be greater than 0 and less or equal to 25. The default value is 20. offset: The offset of the first job to return, relative to the most recently created job. expand_tasks: Whether to include task and cluster details in the response. Returns: Upon success, a dict of the response. </br>- `jobs: List[\"models.Job\"]`</br>- `has_more: bool`</br> <h4>API Endpoint:</h4> `/2.1/jobs/list` <h4>API Responses:</h4> | Response | Description | | --- | --- | | 200 | List of jobs was retrieved successfully. | | 400 | The request was malformed. See JSON response for error details. | | 401 | The request was unauthorized. | | 500 | The request was not handled correctly due to a server error. | \"\"\" # noqa endpoint = \"/2.1/jobs/list\" # noqa responses = { 200 : \"List of jobs was retrieved successfully.\" , # noqa 400 : \"The request was malformed. See JSON response for error details.\" , # noqa 401 : \"The request was unauthorized.\" , # noqa 500 : \"The request was not handled correctly due to a server error.\" , # noqa } params = { \"limit\" : limit , \"offset\" : offset , \"expand_tasks\" : expand_tasks , } response = await execute_endpoint . fn ( endpoint , databricks_credentials , http_method = HTTPMethod . GET , params = params , ) contents = _unpack_contents ( response , responses ) return contents jobs_reset async Overwrites all the settings for a specific job. Use the Update endpoint to update job settings partially. Parameters: Name Type Description Default databricks_credentials 'DatabricksCredentials' Credentials to use for authentication with Databricks. required job_id int The canonical identifier of the job to reset. This field is required, e.g. 11223344 . None new_settings 'models.JobSettings' The new settings of the job. These settings completely replace the old settings. Changes to the field JobSettings.timeout_seconds are applied to active runs. Changes to other fields are applied to future runs only. Key-values: - name: An optional name for the job, e.g. A multitask job . - tags: A map of tags associated with the job. These are forwarded to the cluster as cluster tags for jobs clusters, and are subject to the same limitations as cluster tags. A maximum of 25 tags can be added to the job, e.g. {\"cost-center\": \"engineering\", \"team\": \"jobs\"} - tasks: A list of task specifications to be executed by this job, e.g. [ { \"task_key\": \"Sessionize\", \"description\": \"Extracts session data from events\", \"depends_on\": [], \"existing_cluster_id\": \"0923-164208-meows279\", \"spark_jar_task\": { \"main_class_name\": \"com.databricks.Sessionize\", \"parameters\": [ \"--data\", \"dbfs:/path/to/data.json\", ], }, \"libraries\": [ {\"jar\": \"dbfs:/mnt/databricks/Sessionize.jar\"} ], \"timeout_seconds\": 86400, \"max_retries\": 3, \"min_retry_interval_millis\": 2000, \"retry_on_timeout\": False, }, { \"task_key\": \"Orders_Ingest\", \"description\": \"Ingests order data\", \"depends_on\": [], \"job_cluster_key\": \"auto_scaling_cluster\", \"spark_jar_task\": { \"main_class_name\": \"com.databricks.OrdersIngest\", \"parameters\": [ \"--data\", \"dbfs:/path/to/order-data.json\", ], }, \"libraries\": [ {\"jar\": \"dbfs:/mnt/databricks/OrderIngest.jar\"} ], \"timeout_seconds\": 86400, \"max_retries\": 3, \"min_retry_interval_millis\": 2000, \"retry_on_timeout\": False, }, { \"task_key\": \"Match\", \"description\": \"Matches orders with user sessions\", \"depends_on\": [ {\"task_key\": \"Orders_Ingest\"}, {\"task_key\": \"Sessionize\"}, ], \"new_cluster\": { \"spark_version\": \"7.3.x-scala2.12\", \"node_type_id\": \"i3.xlarge\", \"spark_conf\": {\"spark.speculation\": True}, \"aws_attributes\": { \"availability\": \"SPOT\", \"zone_id\": \"us-west-2a\", }, \"autoscale\": { \"min_workers\": 2, \"max_workers\": 16, }, }, \"notebook_task\": { \"notebook_path\": \"/Users/user.name@databricks.com/Match\", \"source\": \"WORKSPACE\", \"base_parameters\": { \"name\": \"John Doe\", \"age\": \"35\", }, }, \"timeout_seconds\": 86400, \"max_retries\": 3, \"min_retry_interval_millis\": 2000, \"retry_on_timeout\": False, }, ] - job_clusters: A list of job cluster specifications that can be shared and reused by tasks of this job. Libraries cannot be declared in a shared job cluster. You must declare dependent libraries in task settings, e.g. [ { \"job_cluster_key\": \"auto_scaling_cluster\", \"new_cluster\": { \"spark_version\": \"7.3.x-scala2.12\", \"node_type_id\": \"i3.xlarge\", \"spark_conf\": {\"spark.speculation\": True}, \"aws_attributes\": { \"availability\": \"SPOT\", \"zone_id\": \"us-west-2a\", }, \"autoscale\": { \"min_workers\": 2, \"max_workers\": 16, }, }, } ] - email_notifications: An optional set of email addresses that is notified when runs of this job begin or complete as well as when this job is deleted. The default behavior is to not send any emails. - timeout_seconds: An optional timeout applied to each run of this job. The default behavior is to have no timeout, e.g. 86400 . - schedule: An optional periodic schedule for this job. The default behavior is that the job only runs when triggered by clicking \u201cRun Now\u201d in the Jobs UI or sending an API request to runNow . - max_concurrent_runs: An optional maximum allowed number of concurrent runs of the job. Set this value if you want to be able to execute multiple runs of the same job concurrently. This is useful for example if you trigger your job on a frequent schedule and want to allow consecutive runs to overlap with each other, or if you want to trigger multiple runs which differ by their input parameters. This setting affects only new runs. For example, suppose the job\u2019s concurrency is 4 and there are 4 concurrent active runs. Then setting the concurrency to 3 won\u2019t kill any of the active runs. However, from then on, new runs are skipped unless there are fewer than 3 active runs. This value cannot exceed 1000. Setting this value to 0 causes all new runs to be skipped. The default behavior is to allow only 1 concurrent run, e.g. 10 . - git_source: This functionality is in Public Preview. An optional specification for a remote repository containing the notebooks used by this job's notebook tasks, e.g. { \"git_url\": \"https://github.com/databricks/databricks-cli\", \"git_branch\": \"main\", \"git_provider\": \"gitHub\", } - format: Used to tell what is the format of the job. This field is ignored in Create/Update/Reset calls. When using the Jobs API 2.1 this value is always set to 'MULTI_TASK' , e.g. MULTI_TASK . None Returns: Type Description Dict [ str , Any ] Upon success, an empty dict. API Endpoint: /2.1/jobs/reset API Responses: Response Description 200 Job was overwritten successfully. 400 The request was malformed. See JSON response for error details. 401 The request was unauthorized. 500 The request was not handled correctly due to a server error. Source code in prefect_databricks/jobs.pytask async def jobs_reset ( databricks_credentials : \"DatabricksCredentials\" , job_id : int = None , new_settings : \"models.JobSettings\" = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Overwrites all the settings for a specific job. Use the Update endpoint to update job settings partially. Args: databricks_credentials: Credentials to use for authentication with Databricks. job_id: The canonical identifier of the job to reset. This field is required, e.g. `11223344`. new_settings: The new settings of the job. These settings completely replace the old settings. Changes to the field `JobSettings.timeout_seconds` are applied to active runs. Changes to other fields are applied to future runs only. Key-values: - name: An optional name for the job, e.g. `A multitask job`. - tags: A map of tags associated with the job. These are forwarded to the cluster as cluster tags for jobs clusters, and are subject to the same limitations as cluster tags. A maximum of 25 tags can be added to the job, e.g. ``` {\"cost-center\": \"engineering\", \"team\": \"jobs\"} ``` - tasks: A list of task specifications to be executed by this job, e.g. ``` [ { \"task_key\": \"Sessionize\", \"description\": \"Extracts session data from events\", \"depends_on\": [], \"existing_cluster_id\": \"0923-164208-meows279\", \"spark_jar_task\": { \"main_class_name\": \"com.databricks.Sessionize\", \"parameters\": [ \"--data\", \"dbfs:/path/to/data.json\", ], }, \"libraries\": [ {\"jar\": \"dbfs:/mnt/databricks/Sessionize.jar\"} ], \"timeout_seconds\": 86400, \"max_retries\": 3, \"min_retry_interval_millis\": 2000, \"retry_on_timeout\": False, }, { \"task_key\": \"Orders_Ingest\", \"description\": \"Ingests order data\", \"depends_on\": [], \"job_cluster_key\": \"auto_scaling_cluster\", \"spark_jar_task\": { \"main_class_name\": \"com.databricks.OrdersIngest\", \"parameters\": [ \"--data\", \"dbfs:/path/to/order-data.json\", ], }, \"libraries\": [ {\"jar\": \"dbfs:/mnt/databricks/OrderIngest.jar\"} ], \"timeout_seconds\": 86400, \"max_retries\": 3, \"min_retry_interval_millis\": 2000, \"retry_on_timeout\": False, }, { \"task_key\": \"Match\", \"description\": \"Matches orders with user sessions\", \"depends_on\": [ {\"task_key\": \"Orders_Ingest\"}, {\"task_key\": \"Sessionize\"}, ], \"new_cluster\": { \"spark_version\": \"7.3.x-scala2.12\", \"node_type_id\": \"i3.xlarge\", \"spark_conf\": {\"spark.speculation\": True}, \"aws_attributes\": { \"availability\": \"SPOT\", \"zone_id\": \"us-west-2a\", }, \"autoscale\": { \"min_workers\": 2, \"max_workers\": 16, }, }, \"notebook_task\": { \"notebook_path\": \"/Users/user.name@databricks.com/Match\", \"source\": \"WORKSPACE\", \"base_parameters\": { \"name\": \"John Doe\", \"age\": \"35\", }, }, \"timeout_seconds\": 86400, \"max_retries\": 3, \"min_retry_interval_millis\": 2000, \"retry_on_timeout\": False, }, ] ``` - job_clusters: A list of job cluster specifications that can be shared and reused by tasks of this job. Libraries cannot be declared in a shared job cluster. You must declare dependent libraries in task settings, e.g. ``` [ { \"job_cluster_key\": \"auto_scaling_cluster\", \"new_cluster\": { \"spark_version\": \"7.3.x-scala2.12\", \"node_type_id\": \"i3.xlarge\", \"spark_conf\": {\"spark.speculation\": True}, \"aws_attributes\": { \"availability\": \"SPOT\", \"zone_id\": \"us-west-2a\", }, \"autoscale\": { \"min_workers\": 2, \"max_workers\": 16, }, }, } ] ``` - email_notifications: An optional set of email addresses that is notified when runs of this job begin or complete as well as when this job is deleted. The default behavior is to not send any emails. - timeout_seconds: An optional timeout applied to each run of this job. The default behavior is to have no timeout, e.g. `86400`. - schedule: An optional periodic schedule for this job. The default behavior is that the job only runs when triggered by clicking \u201cRun Now\u201d in the Jobs UI or sending an API request to `runNow`. - max_concurrent_runs: An optional maximum allowed number of concurrent runs of the job. Set this value if you want to be able to execute multiple runs of the same job concurrently. This is useful for example if you trigger your job on a frequent schedule and want to allow consecutive runs to overlap with each other, or if you want to trigger multiple runs which differ by their input parameters. This setting affects only new runs. For example, suppose the job\u2019s concurrency is 4 and there are 4 concurrent active runs. Then setting the concurrency to 3 won\u2019t kill any of the active runs. However, from then on, new runs are skipped unless there are fewer than 3 active runs. This value cannot exceed 1000\\. Setting this value to 0 causes all new runs to be skipped. The default behavior is to allow only 1 concurrent run, e.g. `10`. - git_source: This functionality is in Public Preview. An optional specification for a remote repository containing the notebooks used by this job's notebook tasks, e.g. ``` { \"git_url\": \"https://github.com/databricks/databricks-cli\", \"git_branch\": \"main\", \"git_provider\": \"gitHub\", } ``` - format: Used to tell what is the format of the job. This field is ignored in Create/Update/Reset calls. When using the Jobs API 2.1 this value is always set to `'MULTI_TASK'`, e.g. `MULTI_TASK`. Returns: Upon success, an empty dict. <h4>API Endpoint:</h4> `/2.1/jobs/reset` <h4>API Responses:</h4> | Response | Description | | --- | --- | | 200 | Job was overwritten successfully. | | 400 | The request was malformed. See JSON response for error details. | | 401 | The request was unauthorized. | | 500 | The request was not handled correctly due to a server error. | \"\"\" # noqa endpoint = \"/2.1/jobs/reset\" # noqa responses = { 200 : \"Job was overwritten successfully.\" , # noqa 400 : \"The request was malformed. See JSON response for error details.\" , # noqa 401 : \"The request was unauthorized.\" , # noqa 500 : \"The request was not handled correctly due to a server error.\" , # noqa } json_payload = { \"job_id\" : job_id , \"new_settings\" : new_settings , } response = await execute_endpoint . fn ( endpoint , databricks_credentials , http_method = HTTPMethod . POST , json = json_payload , ) contents = _unpack_contents ( response , responses ) return contents jobs_run_now async Run a job and return the run_id of the triggered run. Parameters: Name Type Description Default databricks_credentials 'DatabricksCredentials' Credentials to use for authentication with Databricks. required job_id int The ID of the job to be executed, e.g. 11223344 . None idempotency_token str An optional token to guarantee the idempotency of job run requests. If a run with the provided token already exists, the request does not create a new run but returns the ID of the existing run instead. If a run with the provided token is deleted, an error is returned. If you specify the idempotency token, upon failure you can retry until the request succeeds. Databricks guarantees that exactly one run is launched with that idempotency token. This token must have at most 64 characters. For more information, see How to ensure idempotency for jobs , e.g. 8f018174-4792-40d5-bcbc-3e6a527352c8 . None jar_params List [ str ] A list of parameters for jobs with Spark JAR tasks, for example 'jar_params': ['john doe', '35'] . The parameters are used to invoke the main function of the main class specified in the Spark JAR task. If not specified upon run-now , it defaults to an empty list. jar_params cannot be specified in conjunction with notebook_params. The JSON representation of this field (for example {'jar_params':['john doe','35']} ) cannot exceed 10,000 bytes. Use Task parameter variables to set parameters containing information about job runs, e.g. [\"john\", \"doe\", \"35\"] None notebook_params Dict A map from keys to values for jobs with notebook task, for example 'notebook_params': {'name': 'john doe', 'age': '35'} . The map is passed to the notebook and is accessible through the dbutils.widgets.get function. If not specified upon run-now , the triggered run uses the job\u2019s base parameters. notebook_params cannot be specified in conjunction with jar_params. Use Task parameter variables to set parameters containing information about job runs. The JSON representation of this field (for example {'notebook_params':{'name':'john doe','age':'35'}} ) cannot exceed 10,000 bytes, e.g. {\"name\": \"john doe\", \"age\": \"35\"} None python_params List [ str ] A list of parameters for jobs with Python tasks, for example 'python_params': ['john doe', '35'] . The parameters are passed to Python file as command-line parameters. If specified upon run-now , it would overwrite the parameters specified in job setting. The JSON representation of this field (for example {'python_params':['john doe','35']} ) cannot exceed 10,000 bytes. Use Task parameter variables to set parameters containing information about job runs. Important These parameters accept only Latin characters (ASCII character set). Using non-ASCII characters returns an error. Examples of invalid, non-ASCII characters are Chinese, Japanese kanjis, and emojis, e.g. [\"john doe\", \"35\"] None spark_submit_params List [ str ] A list of parameters for jobs with spark submit task, for example 'spark_submit_params': ['--class', 'org.apache.spark.examples.SparkPi'] . The parameters are passed to spark-submit script as command-line parameters. If specified upon run-now , it would overwrite the parameters specified in job setting. The JSON representation of this field (for example {'python_params':['john doe','35']} ) cannot exceed 10,000 bytes. Use Task parameter variables to set parameters containing information about job runs. Important These parameters accept only Latin characters (ASCII character set). Using non-ASCII characters returns an error. Examples of invalid, non-ASCII characters are Chinese, Japanese kanjis, and emojis, e.g. [\"--class\", \"org.apache.spark.examples.SparkPi\"] None python_named_params Dict A map from keys to values for jobs with Python wheel task, for example 'python_named_params': {'name': 'task', 'data': 'dbfs:/path/to/data.json'} , e.g. {\"name\": \"task\", \"data\": \"dbfs:/path/to/data.json\"} None pipeline_params str None sql_params Dict A map from keys to values for SQL tasks, for example 'sql_params': {'name': 'john doe', 'age': '35'} . The SQL alert task does not support custom parameters, e.g. {\"name\": \"john doe\", \"age\": \"35\"} None dbt_commands List An array of commands to execute for jobs with the dbt task, for example 'dbt_commands': ['dbt deps', 'dbt seed', 'dbt run'] , e.g. [\"dbt deps\", \"dbt seed\", \"dbt run\"] None Returns: Type Description Dict [ str , Any ] Upon success, a dict of the response. - run_id: int - number_in_job: int API Endpoint: /2.1/jobs/run-now API Responses: Response Description 200 Run was started successfully. 400 The request was malformed. See JSON response for error details. 401 The request was unauthorized. 500 The request was not handled correctly due to a server error. Source code in prefect_databricks/jobs.pytask async def jobs_run_now ( databricks_credentials : \"DatabricksCredentials\" , job_id : int = None , idempotency_token : str = None , jar_params : List [ str ] = None , notebook_params : Dict = None , python_params : List [ str ] = None , spark_submit_params : List [ str ] = None , python_named_params : Dict = None , pipeline_params : str = None , sql_params : Dict = None , dbt_commands : List = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Run a job and return the `run_id` of the triggered run. Args: databricks_credentials: Credentials to use for authentication with Databricks. job_id: The ID of the job to be executed, e.g. `11223344`. idempotency_token: An optional token to guarantee the idempotency of job run requests. If a run with the provided token already exists, the request does not create a new run but returns the ID of the existing run instead. If a run with the provided token is deleted, an error is returned. If you specify the idempotency token, upon failure you can retry until the request succeeds. Databricks guarantees that exactly one run is launched with that idempotency token. This token must have at most 64 characters. For more information, see [How to ensure idempotency for jobs](https://kb.databricks.com/jobs/jobs- idempotency.html), e.g. `8f018174-4792-40d5-bcbc-3e6a527352c8`. jar_params: A list of parameters for jobs with Spark JAR tasks, for example `'jar_params': ['john doe', '35']`. The parameters are used to invoke the main function of the main class specified in the Spark JAR task. If not specified upon `run-now`, it defaults to an empty list. jar_params cannot be specified in conjunction with notebook_params. The JSON representation of this field (for example `{'jar_params':['john doe','35']}`) cannot exceed 10,000 bytes. Use [Task parameter variables](https://docs.databricks.com/jobs.html parameter-variables) to set parameters containing information about job runs, e.g. ``` [\"john\", \"doe\", \"35\"] ``` notebook_params: A map from keys to values for jobs with notebook task, for example `'notebook_params': {'name': 'john doe', 'age': '35'}`. The map is passed to the notebook and is accessible through the [dbutils.widgets.get](https://docs.databricks.com/dev- tools/databricks-utils.html dbutils-widgets) function. If not specified upon `run-now`, the triggered run uses the job\u2019s base parameters. notebook_params cannot be specified in conjunction with jar_params. Use [Task parameter variables](https://docs.databricks.com/jobs.html parameter-variables) to set parameters containing information about job runs. The JSON representation of this field (for example `{'notebook_params':{'name':'john doe','age':'35'}}`) cannot exceed 10,000 bytes, e.g. ``` {\"name\": \"john doe\", \"age\": \"35\"} ``` python_params: A list of parameters for jobs with Python tasks, for example `'python_params': ['john doe', '35']`. The parameters are passed to Python file as command-line parameters. If specified upon `run-now`, it would overwrite the parameters specified in job setting. The JSON representation of this field (for example `{'python_params':['john doe','35']}`) cannot exceed 10,000 bytes. Use [Task parameter variables](https://docs.databricks.com/jobs.html parameter-variables) to set parameters containing information about job runs. Important These parameters accept only Latin characters (ASCII character set). Using non-ASCII characters returns an error. Examples of invalid, non-ASCII characters are Chinese, Japanese kanjis, and emojis, e.g. ``` [\"john doe\", \"35\"] ``` spark_submit_params: A list of parameters for jobs with spark submit task, for example `'spark_submit_params': ['--class', 'org.apache.spark.examples.SparkPi']`. The parameters are passed to spark-submit script as command-line parameters. If specified upon `run-now`, it would overwrite the parameters specified in job setting. The JSON representation of this field (for example `{'python_params':['john doe','35']}`) cannot exceed 10,000 bytes. Use [Task parameter variables](https://docs.databricks.com/jobs.html parameter-variables) to set parameters containing information about job runs. Important These parameters accept only Latin characters (ASCII character set). Using non-ASCII characters returns an error. Examples of invalid, non-ASCII characters are Chinese, Japanese kanjis, and emojis, e.g. ``` [\"--class\", \"org.apache.spark.examples.SparkPi\"] ``` python_named_params: A map from keys to values for jobs with Python wheel task, for example `'python_named_params': {'name': 'task', 'data': 'dbfs:/path/to/data.json'}`, e.g. ``` {\"name\": \"task\", \"data\": \"dbfs:/path/to/data.json\"} ``` pipeline_params: sql_params: A map from keys to values for SQL tasks, for example `'sql_params': {'name': 'john doe', 'age': '35'}`. The SQL alert task does not support custom parameters, e.g. ``` {\"name\": \"john doe\", \"age\": \"35\"} ``` dbt_commands: An array of commands to execute for jobs with the dbt task, for example `'dbt_commands': ['dbt deps', 'dbt seed', 'dbt run']`, e.g. ``` [\"dbt deps\", \"dbt seed\", \"dbt run\"] ``` Returns: Upon success, a dict of the response. </br>- `run_id: int`</br>- `number_in_job: int`</br> <h4>API Endpoint:</h4> `/2.1/jobs/run-now` <h4>API Responses:</h4> | Response | Description | | --- | --- | | 200 | Run was started successfully. | | 400 | The request was malformed. See JSON response for error details. | | 401 | The request was unauthorized. | | 500 | The request was not handled correctly due to a server error. | \"\"\" # noqa endpoint = \"/2.1/jobs/run-now\" # noqa responses = { 200 : \"Run was started successfully.\" , # noqa 400 : \"The request was malformed. See JSON response for error details.\" , # noqa 401 : \"The request was unauthorized.\" , # noqa 500 : \"The request was not handled correctly due to a server error.\" , # noqa } json_payload = { \"job_id\" : job_id , \"idempotency_token\" : idempotency_token , \"jar_params\" : jar_params , \"notebook_params\" : notebook_params , \"python_params\" : python_params , \"spark_submit_params\" : spark_submit_params , \"python_named_params\" : python_named_params , \"pipeline_params\" : pipeline_params , \"sql_params\" : sql_params , \"dbt_commands\" : dbt_commands , } response = await execute_endpoint . fn ( endpoint , databricks_credentials , http_method = HTTPMethod . POST , json = json_payload , ) contents = _unpack_contents ( response , responses ) return contents jobs_runs_cancel async Cancels a job run. The run is canceled asynchronously, so it may still be running when this request completes. Parameters: Name Type Description Default databricks_credentials 'DatabricksCredentials' Credentials to use for authentication with Databricks. required run_id int This field is required, e.g. 455644833 . None Returns: Type Description Dict [ str , Any ] Upon success, an empty dict. API Endpoint: /2.1/jobs/runs/cancel API Responses: Response Description 200 Run was cancelled successfully. 400 The request was malformed. See JSON response for error details. 401 The request was unauthorized. 500 The request was not handled correctly due to a server error. Source code in prefect_databricks/jobs.py 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 @task async def jobs_runs_cancel ( databricks_credentials : \"DatabricksCredentials\" , run_id : int = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Cancels a job run. The run is canceled asynchronously, so it may still be running when this request completes. Args: databricks_credentials: Credentials to use for authentication with Databricks. run_id: This field is required, e.g. `455644833`. Returns: Upon success, an empty dict. <h4>API Endpoint:</h4> `/2.1/jobs/runs/cancel` <h4>API Responses:</h4> | Response | Description | | --- | --- | | 200 | Run was cancelled successfully. | | 400 | The request was malformed. See JSON response for error details. | | 401 | The request was unauthorized. | | 500 | The request was not handled correctly due to a server error. | \"\"\" # noqa endpoint = \"/2.1/jobs/runs/cancel\" # noqa responses = { 200 : \"Run was cancelled successfully.\" , # noqa 400 : \"The request was malformed. See JSON response for error details.\" , # noqa 401 : \"The request was unauthorized.\" , # noqa 500 : \"The request was not handled correctly due to a server error.\" , # noqa } json_payload = { \"run_id\" : run_id , } response = await execute_endpoint . fn ( endpoint , databricks_credentials , http_method = HTTPMethod . POST , json = json_payload , ) contents = _unpack_contents ( response , responses ) return contents jobs_runs_cancel_all async Cancels all active runs of a job. The runs are canceled asynchronously, so it doesn't prevent new runs from being started. Parameters: Name Type Description Default databricks_credentials 'DatabricksCredentials' Credentials to use for authentication with Databricks. required job_id int The canonical identifier of the job to cancel all runs of. This field is required, e.g. 11223344 . None Returns: Type Description Dict [ str , Any ] Upon success, an empty dict. API Endpoint: /2.1/jobs/runs/cancel-all API Responses: Response Description 200 All runs were cancelled successfully. 400 The request was malformed. See JSON response for error details. 401 The request was unauthorized. 500 The request was not handled correctly due to a server error. Source code in prefect_databricks/jobs.py 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 @task async def jobs_runs_cancel_all ( databricks_credentials : \"DatabricksCredentials\" , job_id : int = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Cancels all active runs of a job. The runs are canceled asynchronously, so it doesn't prevent new runs from being started. Args: databricks_credentials: Credentials to use for authentication with Databricks. job_id: The canonical identifier of the job to cancel all runs of. This field is required, e.g. `11223344`. Returns: Upon success, an empty dict. <h4>API Endpoint:</h4> `/2.1/jobs/runs/cancel-all` <h4>API Responses:</h4> | Response | Description | | --- | --- | | 200 | All runs were cancelled successfully. | | 400 | The request was malformed. See JSON response for error details. | | 401 | The request was unauthorized. | | 500 | The request was not handled correctly due to a server error. | \"\"\" # noqa endpoint = \"/2.1/jobs/runs/cancel-all\" # noqa responses = { 200 : \"All runs were cancelled successfully.\" , # noqa 400 : \"The request was malformed. See JSON response for error details.\" , # noqa 401 : \"The request was unauthorized.\" , # noqa 500 : \"The request was not handled correctly due to a server error.\" , # noqa } json_payload = { \"job_id\" : job_id , } response = await execute_endpoint . fn ( endpoint , databricks_credentials , http_method = HTTPMethod . POST , json = json_payload , ) contents = _unpack_contents ( response , responses ) return contents jobs_runs_delete async Deletes a non-active run. Returns an error if the run is active. Parameters: Name Type Description Default databricks_credentials 'DatabricksCredentials' Credentials to use for authentication with Databricks. required run_id int The canonical identifier of the run for which to retrieve the metadata, e.g. 455644833 . None Returns: Type Description Dict [ str , Any ] Upon success, an empty dict. API Endpoint: /2.1/jobs/runs/delete API Responses: Response Description 200 Run was deleted successfully. 400 The request was malformed. See JSON response for error details. 401 The request was unauthorized. 500 The request was not handled correctly due to a server error. Source code in prefect_databricks/jobs.py 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 @task async def jobs_runs_delete ( databricks_credentials : \"DatabricksCredentials\" , run_id : int = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Deletes a non-active run. Returns an error if the run is active. Args: databricks_credentials: Credentials to use for authentication with Databricks. run_id: The canonical identifier of the run for which to retrieve the metadata, e.g. `455644833`. Returns: Upon success, an empty dict. <h4>API Endpoint:</h4> `/2.1/jobs/runs/delete` <h4>API Responses:</h4> | Response | Description | | --- | --- | | 200 | Run was deleted successfully. | | 400 | The request was malformed. See JSON response for error details. | | 401 | The request was unauthorized. | | 500 | The request was not handled correctly due to a server error. | \"\"\" # noqa endpoint = \"/2.1/jobs/runs/delete\" # noqa responses = { 200 : \"Run was deleted successfully.\" , # noqa 400 : \"The request was malformed. See JSON response for error details.\" , # noqa 401 : \"The request was unauthorized.\" , # noqa 500 : \"The request was not handled correctly due to a server error.\" , # noqa } json_payload = { \"run_id\" : run_id , } response = await execute_endpoint . fn ( endpoint , databricks_credentials , http_method = HTTPMethod . POST , json = json_payload , ) contents = _unpack_contents ( response , responses ) return contents jobs_runs_export async Export and retrieve the job run task. Parameters: Name Type Description Default run_id int The canonical identifier for the run. This field is required. required databricks_credentials 'DatabricksCredentials' Credentials to use for authentication with Databricks. required views_to_export str Which views to export (CODE, DASHBOARDS, or ALL). Defaults to CODE. None Returns: Type Description Dict [ str , Any ] Upon success, a dict of the response. - views: List[\"models.ViewItem\"] API Endpoint: /2.0/jobs/runs/export API Responses: Response Description 200 Run was exported successfully. 400 The request was malformed. See JSON response for error details. 401 The request was unauthorized. 500 The request was not handled correctly due to a server error. Source code in prefect_databricks/jobs.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 @task async def jobs_runs_export ( run_id : int , databricks_credentials : \"DatabricksCredentials\" , views_to_export : str = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Export and retrieve the job run task. Args: run_id: The canonical identifier for the run. This field is required. databricks_credentials: Credentials to use for authentication with Databricks. views_to_export: Which views to export (CODE, DASHBOARDS, or ALL). Defaults to CODE. Returns: Upon success, a dict of the response. </br>- `views: List[\"models.ViewItem\"]`</br> <h4>API Endpoint:</h4> `/2.0/jobs/runs/export` <h4>API Responses:</h4> | Response | Description | | --- | --- | | 200 | Run was exported successfully. | | 400 | The request was malformed. See JSON response for error details. | | 401 | The request was unauthorized. | | 500 | The request was not handled correctly due to a server error. | \"\"\" # noqa endpoint = \"/2.0/jobs/runs/export\" # noqa responses = { 200 : \"Run was exported successfully.\" , # noqa 400 : \"The request was malformed. See JSON response for error details.\" , # noqa 401 : \"The request was unauthorized.\" , # noqa 500 : \"The request was not handled correctly due to a server error.\" , # noqa } params = { \"run_id\" : run_id , \"views_to_export\" : views_to_export , } response = await execute_endpoint . fn ( endpoint , databricks_credentials , http_method = HTTPMethod . GET , params = params , ) contents = _unpack_contents ( response , responses ) return contents jobs_runs_get async Retrieve the metadata of a run. Parameters: Name Type Description Default run_id int The canonical identifier of the run for which to retrieve the metadata. This field is required. required databricks_credentials 'DatabricksCredentials' Credentials to use for authentication with Databricks. required include_history bool Whether to include the repair history in the response. None Returns: Type Description Dict [ str , Any ] Upon success, a dict of the response. - job_id: int - run_id: int - number_in_job: int - creator_user_name: str - original_attempt_run_id: int - state: \"models.RunState\" - schedule: \"models.CronSchedule\" - tasks: List[\"models.RunTask\"] - job_clusters: List[\"models.JobCluster\"] - cluster_spec: \"models.ClusterSpec\" - cluster_instance: \"models.ClusterInstance\" - git_source: \"models.GitSource\" - overriding_parameters: \"models.RunParameters\" - start_time: int - setup_duration: int - execution_duration: int - cleanup_duration: int - end_time: int - trigger: \"models.TriggerType\" - run_name: str - run_page_url: str - run_type: \"models.RunType\" - attempt_number: int - repair_history: List[\"models.RepairHistoryItem\"] API Endpoint: /2.1/jobs/runs/get API Responses: Response Description 200 Run was retrieved successfully. 400 The request was malformed. See JSON response for error details. 401 The request was unauthorized. 500 The request was not handled correctly due to a server error. Source code in prefect_databricks/jobs.py 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 @task async def jobs_runs_get ( run_id : int , databricks_credentials : \"DatabricksCredentials\" , include_history : bool = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Retrieve the metadata of a run. Args: run_id: The canonical identifier of the run for which to retrieve the metadata. This field is required. databricks_credentials: Credentials to use for authentication with Databricks. include_history: Whether to include the repair history in the response. Returns: Upon success, a dict of the response. </br>- `job_id: int`</br>- `run_id: int`</br>- `number_in_job: int`</br>- `creator_user_name: str`</br>- `original_attempt_run_id: int`</br>- `state: \"models.RunState\"`</br>- `schedule: \"models.CronSchedule\"`</br>- `tasks: List[\"models.RunTask\"]`</br>- `job_clusters: List[\"models.JobCluster\"]`</br>- `cluster_spec: \"models.ClusterSpec\"`</br>- `cluster_instance: \"models.ClusterInstance\"`</br>- `git_source: \"models.GitSource\"`</br>- `overriding_parameters: \"models.RunParameters\"`</br>- `start_time: int`</br>- `setup_duration: int`</br>- `execution_duration: int`</br>- `cleanup_duration: int`</br>- `end_time: int`</br>- `trigger: \"models.TriggerType\"`</br>- `run_name: str`</br>- `run_page_url: str`</br>- `run_type: \"models.RunType\"`</br>- `attempt_number: int`</br>- `repair_history: List[\"models.RepairHistoryItem\"]`</br> <h4>API Endpoint:</h4> `/2.1/jobs/runs/get` <h4>API Responses:</h4> | Response | Description | | --- | --- | | 200 | Run was retrieved successfully. | | 400 | The request was malformed. See JSON response for error details. | | 401 | The request was unauthorized. | | 500 | The request was not handled correctly due to a server error. | \"\"\" # noqa endpoint = \"/2.1/jobs/runs/get\" # noqa responses = { 200 : \"Run was retrieved successfully.\" , # noqa 400 : \"The request was malformed. See JSON response for error details.\" , # noqa 401 : \"The request was unauthorized.\" , # noqa 500 : \"The request was not handled correctly due to a server error.\" , # noqa } params = { \"run_id\" : run_id , \"include_history\" : include_history , } response = await execute_endpoint . fn ( endpoint , databricks_credentials , http_method = HTTPMethod . GET , params = params , ) contents = _unpack_contents ( response , responses ) return contents jobs_runs_get_output async Retrieve the output and metadata of a single task run. When a notebook task returns a value through the dbutils.notebook.exit() call, you can use this endpoint to retrieve that value. Databricks restricts this API to return the first 5 MB of the output. To return a larger result, you can store job results in a cloud storage service. This endpoint validates that the run_id parameter is valid and returns an HTTP status code 400 if the run_id parameter is invalid. Runs are automatically removed after 60 days. If you to want to reference them beyond 60 days, you must save old run results before they expire. To export using the UI, see Export job run results. To export using the Jobs API, see Runs export. Parameters: Name Type Description Default run_id int The canonical identifier for the run. This field is required. required databricks_credentials 'DatabricksCredentials' Credentials to use for authentication with Databricks. required Returns: Type Description Dict [ str , Any ] Upon success, a dict of the response. - notebook_output: \"models.NotebookOutput\" - sql_output: \"models.SqlOutput\" - dbt_output: \"models.DbtOutput\" - logs: str - logs_truncated: bool - error: str - error_trace: str - metadata: \"models.Run\" API Endpoint: /2.1/jobs/runs/get-output API Responses: Response Description 200 Run output was retrieved successfully. 400 A job run with multiple tasks was provided. 401 The request was unauthorized. 500 The request was not handled correctly due to a server error. Source code in prefect_databricks/jobs.py 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 @task async def jobs_runs_get_output ( run_id : int , databricks_credentials : \"DatabricksCredentials\" , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Retrieve the output and metadata of a single task run. When a notebook task returns a value through the dbutils.notebook.exit() call, you can use this endpoint to retrieve that value. Databricks restricts this API to return the first 5 MB of the output. To return a larger result, you can store job results in a cloud storage service. This endpoint validates that the run_id parameter is valid and returns an HTTP status code 400 if the run_id parameter is invalid. Runs are automatically removed after 60 days. If you to want to reference them beyond 60 days, you must save old run results before they expire. To export using the UI, see Export job run results. To export using the Jobs API, see Runs export. Args: run_id: The canonical identifier for the run. This field is required. databricks_credentials: Credentials to use for authentication with Databricks. Returns: Upon success, a dict of the response. </br>- `notebook_output: \"models.NotebookOutput\"`</br>- `sql_output: \"models.SqlOutput\"`</br>- `dbt_output: \"models.DbtOutput\"`</br>- `logs: str`</br>- `logs_truncated: bool`</br>- `error: str`</br>- `error_trace: str`</br>- `metadata: \"models.Run\"`</br> <h4>API Endpoint:</h4> `/2.1/jobs/runs/get-output` <h4>API Responses:</h4> | Response | Description | | --- | --- | | 200 | Run output was retrieved successfully. | | 400 | A job run with multiple tasks was provided. | | 401 | The request was unauthorized. | | 500 | The request was not handled correctly due to a server error. | \"\"\" # noqa endpoint = \"/2.1/jobs/runs/get-output\" # noqa responses = { 200 : \"Run output was retrieved successfully.\" , # noqa 400 : \"A job run with multiple tasks was provided.\" , # noqa 401 : \"The request was unauthorized.\" , # noqa 500 : \"The request was not handled correctly due to a server error.\" , # noqa } params = { \"run_id\" : run_id , } response = await execute_endpoint . fn ( endpoint , databricks_credentials , http_method = HTTPMethod . GET , params = params , ) contents = _unpack_contents ( response , responses ) return contents jobs_runs_list async List runs in descending order by start time. Parameters: Name Type Description Default databricks_credentials 'DatabricksCredentials' Credentials to use for authentication with Databricks. required active_only bool If active_only is true , only active runs are included in the results; otherwise, lists both active and completed runs. An active run is a run in the PENDING , RUNNING , or TERMINATING . This field cannot be true when completed_only is true . False completed_only bool If completed_only is true , only completed runs are included in the results; otherwise, lists both active and completed runs. This field cannot be true when active_only is true . False job_id int The job for which to list runs. If omitted, the Jobs service lists runs from all jobs. None offset int The offset of the first run to return, relative to the most recent run. 0 limit int The number of runs to return. This value must be greater than 0 and less than 25. The default value is 25. If a request specifies a limit of 0, the service instead uses the maximum limit. 25 run_type str The type of runs to return. For a description of run types, see Run . None expand_tasks bool Whether to include task and cluster details in the response. False start_time_from int Show runs that started at or after this value. The value must be a UTC timestamp in milliseconds. Can be combined with start_time_to to filter by a time range. None start_time_to int Show runs that started at or before this value. The value must be a UTC timestamp in milliseconds. Can be combined with start_time_from to filter by a time range. None Returns: Type Description Dict [ str , Any ] Upon success, a dict of the response. - runs: List[\"models.Run\"] - has_more: bool API Endpoint: /2.1/jobs/runs/list API Responses: Response Description 200 List of runs was retrieved successfully. 400 The request was malformed. See JSON response for error details. 401 The request was unauthorized. 500 The request was not handled correctly due to a server error. Source code in prefect_databricks/jobs.py 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 @task async def jobs_runs_list ( databricks_credentials : \"DatabricksCredentials\" , active_only : bool = False , completed_only : bool = False , job_id : int = None , offset : int = 0 , limit : int = 25 , run_type : str = None , expand_tasks : bool = False , start_time_from : int = None , start_time_to : int = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" List runs in descending order by start time. Args: databricks_credentials: Credentials to use for authentication with Databricks. active_only: If active_only is `true`, only active runs are included in the results; otherwise, lists both active and completed runs. An active run is a run in the `PENDING`, `RUNNING`, or `TERMINATING`. This field cannot be `true` when completed_only is `true`. completed_only: If completed_only is `true`, only completed runs are included in the results; otherwise, lists both active and completed runs. This field cannot be `true` when active_only is `true`. job_id: The job for which to list runs. If omitted, the Jobs service lists runs from all jobs. offset: The offset of the first run to return, relative to the most recent run. limit: The number of runs to return. This value must be greater than 0 and less than 25\\. The default value is 25\\. If a request specifies a limit of 0, the service instead uses the maximum limit. run_type: The type of runs to return. For a description of run types, see [Run](https://docs.databricks.com/dev- tools/api/latest/jobs.html operation/JobsRunsGet). expand_tasks: Whether to include task and cluster details in the response. start_time_from: Show runs that started _at or after_ this value. The value must be a UTC timestamp in milliseconds. Can be combined with _start_time_to_ to filter by a time range. start_time_to: Show runs that started _at or before_ this value. The value must be a UTC timestamp in milliseconds. Can be combined with _start_time_from_ to filter by a time range. Returns: Upon success, a dict of the response. </br>- `runs: List[\"models.Run\"]`</br>- `has_more: bool`</br> <h4>API Endpoint:</h4> `/2.1/jobs/runs/list` <h4>API Responses:</h4> | Response | Description | | --- | --- | | 200 | List of runs was retrieved successfully. | | 400 | The request was malformed. See JSON response for error details. | | 401 | The request was unauthorized. | | 500 | The request was not handled correctly due to a server error. | \"\"\" # noqa endpoint = \"/2.1/jobs/runs/list\" # noqa responses = { 200 : \"List of runs was retrieved successfully.\" , # noqa 400 : \"The request was malformed. See JSON response for error details.\" , # noqa 401 : \"The request was unauthorized.\" , # noqa 500 : \"The request was not handled correctly due to a server error.\" , # noqa } params = { \"active_only\" : active_only , \"completed_only\" : completed_only , \"job_id\" : job_id , \"offset\" : offset , \"limit\" : limit , \"run_type\" : run_type , \"expand_tasks\" : expand_tasks , \"start_time_from\" : start_time_from , \"start_time_to\" : start_time_to , } response = await execute_endpoint . fn ( endpoint , databricks_credentials , http_method = HTTPMethod . GET , params = params , ) contents = _unpack_contents ( response , responses ) return contents jobs_runs_repair async Re-run one or more tasks. Tasks are re-run as part of the original job run, use the current job and task settings, and can be viewed in the history for the original job run. Parameters: Name Type Description Default databricks_credentials 'DatabricksCredentials' Credentials to use for authentication with Databricks. required run_id int The job run ID of the run to repair. The run must not be in progress, e.g. 455644833 . None rerun_tasks List [ str ] The task keys of the task runs to repair, e.g. [\"task0\", \"task1\"] None latest_repair_id int The ID of the latest repair. This parameter is not required when repairing a run for the first time, but must be provided on subsequent requests to repair the same run, e.g. 734650698524280 . None jar_params List [ str ] A list of parameters for jobs with Spark JAR tasks, for example 'jar_params': ['john doe', '35'] . The parameters are used to invoke the main function of the main class specified in the Spark JAR task. If not specified upon run-now , it defaults to an empty list. jar_params cannot be specified in conjunction with notebook_params. The JSON representation of this field (for example {'jar_params':['john doe','35']} ) cannot exceed 10,000 bytes. Use Task parameter variables to set parameters containing information about job runs, e.g. [\"john\", \"doe\", \"35\"] None notebook_params Dict A map from keys to values for jobs with notebook task, for example 'notebook_params': {'name': 'john doe', 'age': '35'} . The map is passed to the notebook and is accessible through the dbutils.widgets.get function. If not specified upon run-now , the triggered run uses the job\u2019s base parameters. notebook_params cannot be specified in conjunction with jar_params. Use Task parameter variables to set parameters containing information about job runs. The JSON representation of this field (for example {'notebook_params':{'name':'john doe','age':'35'}} ) cannot exceed 10,000 bytes, e.g. {\"name\": \"john doe\", \"age\": \"35\"} None python_params List [ str ] A list of parameters for jobs with Python tasks, for example 'python_params': ['john doe', '35'] . The parameters are passed to Python file as command-line parameters. If specified upon run-now , it would overwrite the parameters specified in job setting. The JSON representation of this field (for example {'python_params':['john doe','35']} ) cannot exceed 10,000 bytes. Use Task parameter variables to set parameters containing information about job runs. Important These parameters accept only Latin characters (ASCII character set). Using non-ASCII characters returns an error. Examples of invalid, non-ASCII characters are Chinese, Japanese kanjis, and emojis, e.g. [\"john doe\", \"35\"] None spark_submit_params List [ str ] A list of parameters for jobs with spark submit task, for example 'spark_submit_params': ['--class', 'org.apache.spark.examples.SparkPi'] . The parameters are passed to spark-submit script as command-line parameters. If specified upon run-now , it would overwrite the parameters specified in job setting. The JSON representation of this field (for example {'python_params':['john doe','35']} ) cannot exceed 10,000 bytes. Use Task parameter variables to set parameters containing information about job runs. Important These parameters accept only Latin characters (ASCII character set). Using non-ASCII characters returns an error. Examples of invalid, non-ASCII characters are Chinese, Japanese kanjis, and emojis, e.g. [\"--class\", \"org.apache.spark.examples.SparkPi\"] None python_named_params Dict A map from keys to values for jobs with Python wheel task, for example 'python_named_params': {'name': 'task', 'data': 'dbfs:/path/to/data.json'} , e.g. {\"name\": \"task\", \"data\": \"dbfs:/path/to/data.json\"} None pipeline_params str None sql_params Dict A map from keys to values for SQL tasks, for example 'sql_params': {'name': 'john doe', 'age': '35'} . The SQL alert task does not support custom parameters, e.g. {\"name\": \"john doe\", \"age\": \"35\"} None dbt_commands List An array of commands to execute for jobs with the dbt task, for example 'dbt_commands': ['dbt deps', 'dbt seed', 'dbt run'] , e.g. [\"dbt deps\", \"dbt seed\", \"dbt run\"] None Returns: Type Description Dict [ str , Any ] Upon success, a dict of the response. - repair_id: int API Endpoint: /2.1/jobs/runs/repair API Responses: Response Description 200 Run repair was initiated. 400 The request was malformed. See JSON response for error details. 401 The request was unauthorized. 500 The request was not handled correctly due to a server error. Source code in prefect_databricks/jobs.py 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 @task async def jobs_runs_repair ( databricks_credentials : \"DatabricksCredentials\" , run_id : int = None , rerun_tasks : List [ str ] = None , latest_repair_id : int = None , jar_params : List [ str ] = None , notebook_params : Dict = None , python_params : List [ str ] = None , spark_submit_params : List [ str ] = None , python_named_params : Dict = None , pipeline_params : str = None , sql_params : Dict = None , dbt_commands : List = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Re-run one or more tasks. Tasks are re-run as part of the original job run, use the current job and task settings, and can be viewed in the history for the original job run. Args: databricks_credentials: Credentials to use for authentication with Databricks. run_id: The job run ID of the run to repair. The run must not be in progress, e.g. `455644833`. rerun_tasks: The task keys of the task runs to repair, e.g. ``` [\"task0\", \"task1\"] ``` latest_repair_id: The ID of the latest repair. This parameter is not required when repairing a run for the first time, but must be provided on subsequent requests to repair the same run, e.g. `734650698524280`. jar_params: A list of parameters for jobs with Spark JAR tasks, for example `'jar_params': ['john doe', '35']`. The parameters are used to invoke the main function of the main class specified in the Spark JAR task. If not specified upon `run-now`, it defaults to an empty list. jar_params cannot be specified in conjunction with notebook_params. The JSON representation of this field (for example `{'jar_params':['john doe','35']}`) cannot exceed 10,000 bytes. Use [Task parameter variables](https://docs.databricks.com/jobs.html parameter-variables) to set parameters containing information about job runs, e.g. ``` [\"john\", \"doe\", \"35\"] ``` notebook_params: A map from keys to values for jobs with notebook task, for example `'notebook_params': {'name': 'john doe', 'age': '35'}`. The map is passed to the notebook and is accessible through the [dbutils.widgets.get](https://docs.databricks.com/dev- tools/databricks-utils.html dbutils-widgets) function. If not specified upon `run-now`, the triggered run uses the job\u2019s base parameters. notebook_params cannot be specified in conjunction with jar_params. Use [Task parameter variables](https://docs.databricks.com/jobs.html parameter-variables) to set parameters containing information about job runs. The JSON representation of this field (for example `{'notebook_params':{'name':'john doe','age':'35'}}`) cannot exceed 10,000 bytes, e.g. ``` {\"name\": \"john doe\", \"age\": \"35\"} ``` python_params: A list of parameters for jobs with Python tasks, for example `'python_params': ['john doe', '35']`. The parameters are passed to Python file as command-line parameters. If specified upon `run-now`, it would overwrite the parameters specified in job setting. The JSON representation of this field (for example `{'python_params':['john doe','35']}`) cannot exceed 10,000 bytes. Use [Task parameter variables](https://docs.databricks.com/jobs.html parameter-variables) to set parameters containing information about job runs. Important These parameters accept only Latin characters (ASCII character set). Using non-ASCII characters returns an error. Examples of invalid, non-ASCII characters are Chinese, Japanese kanjis, and emojis, e.g. ``` [\"john doe\", \"35\"] ``` spark_submit_params: A list of parameters for jobs with spark submit task, for example `'spark_submit_params': ['--class', 'org.apache.spark.examples.SparkPi']`. The parameters are passed to spark-submit script as command-line parameters. If specified upon `run-now`, it would overwrite the parameters specified in job setting. The JSON representation of this field (for example `{'python_params':['john doe','35']}`) cannot exceed 10,000 bytes. Use [Task parameter variables](https://docs.databricks.com/jobs.html parameter-variables) to set parameters containing information about job runs. Important These parameters accept only Latin characters (ASCII character set). Using non-ASCII characters returns an error. Examples of invalid, non-ASCII characters are Chinese, Japanese kanjis, and emojis, e.g. ``` [\"--class\", \"org.apache.spark.examples.SparkPi\"] ``` python_named_params: A map from keys to values for jobs with Python wheel task, for example `'python_named_params': {'name': 'task', 'data': 'dbfs:/path/to/data.json'}`, e.g. ``` {\"name\": \"task\", \"data\": \"dbfs:/path/to/data.json\"} ``` pipeline_params: sql_params: A map from keys to values for SQL tasks, for example `'sql_params': {'name': 'john doe', 'age': '35'}`. The SQL alert task does not support custom parameters, e.g. ``` {\"name\": \"john doe\", \"age\": \"35\"} ``` dbt_commands: An array of commands to execute for jobs with the dbt task, for example `'dbt_commands': ['dbt deps', 'dbt seed', 'dbt run']`, e.g. ``` [\"dbt deps\", \"dbt seed\", \"dbt run\"] ``` Returns: Upon success, a dict of the response. </br>- `repair_id: int`</br> <h4>API Endpoint:</h4> `/2.1/jobs/runs/repair` <h4>API Responses:</h4> | Response | Description | | --- | --- | | 200 | Run repair was initiated. | | 400 | The request was malformed. See JSON response for error details. | | 401 | The request was unauthorized. | | 500 | The request was not handled correctly due to a server error. | \"\"\" # noqa endpoint = \"/2.1/jobs/runs/repair\" # noqa responses = { 200 : \"Run repair was initiated.\" , # noqa 400 : \"The request was malformed. See JSON response for error details.\" , # noqa 401 : \"The request was unauthorized.\" , # noqa 500 : \"The request was not handled correctly due to a server error.\" , # noqa } json_payload = { \"run_id\" : run_id , \"rerun_tasks\" : rerun_tasks , \"latest_repair_id\" : latest_repair_id , \"jar_params\" : jar_params , \"notebook_params\" : notebook_params , \"python_params\" : python_params , \"spark_submit_params\" : spark_submit_params , \"python_named_params\" : python_named_params , \"pipeline_params\" : pipeline_params , \"sql_params\" : sql_params , \"dbt_commands\" : dbt_commands , } response = await execute_endpoint . fn ( endpoint , databricks_credentials , http_method = HTTPMethod . POST , json = json_payload , ) contents = _unpack_contents ( response , responses ) return contents jobs_runs_submit async Submit a one-time run. This endpoint allows you to submit a workload directly without creating a job. Runs submitted using this endpoint don\u2019t display in the UI. Use the jobs/runs/get API to check the run state after the job is submitted. Parameters: Name Type Description Default databricks_credentials 'DatabricksCredentials' Credentials to use for authentication with Databricks. required tasks List ['models.RunSubmitTaskSettings'] , e.g. [ { \"task_key\": \"Sessionize\", \"description\": \"Extracts session data from events\", \"depends_on\": [], \"existing_cluster_id\": \"0923-164208-meows279\", \"spark_jar_task\": { \"main_class_name\": \"com.databricks.Sessionize\", \"parameters\": [\"--data\", \"dbfs:/path/to/data.json\"], }, \"libraries\": [{\"jar\": \"dbfs:/mnt/databricks/Sessionize.jar\"}], \"timeout_seconds\": 86400, }, { \"task_key\": \"Orders_Ingest\", \"description\": \"Ingests order data\", \"depends_on\": [], \"existing_cluster_id\": \"0923-164208-meows279\", \"spark_jar_task\": { \"main_class_name\": \"com.databricks.OrdersIngest\", \"parameters\": [\"--data\", \"dbfs:/path/to/order-data.json\"], }, \"libraries\": [{\"jar\": \"dbfs:/mnt/databricks/OrderIngest.jar\"}], \"timeout_seconds\": 86400, }, { \"task_key\": \"Match\", \"description\": \"Matches orders with user sessions\", \"depends_on\": [ {\"task_key\": \"Orders_Ingest\"}, {\"task_key\": \"Sessionize\"}, ], \"new_cluster\": { \"spark_version\": \"7.3.x-scala2.12\", \"node_type_id\": \"i3.xlarge\", \"spark_conf\": {\"spark.speculation\": True}, \"aws_attributes\": { \"availability\": \"SPOT\", \"zone_id\": \"us-west-2a\", }, \"autoscale\": {\"min_workers\": 2, \"max_workers\": 16}, }, \"notebook_task\": { \"notebook_path\": \"/Users/user.name@databricks.com/Match\", \"source\": \"WORKSPACE\", \"base_parameters\": {\"name\": \"John Doe\", \"age\": \"35\"}, }, \"timeout_seconds\": 86400, }, ] None run_name str An optional name for the run. The default value is Untitled , e.g. A multitask job run . None git_source 'models.GitSource' This functionality is in Public Preview. An optional specification for a remote repository containing the notebooks used by this job's notebook tasks, e.g. { \"git_url\": \"https://github.com/databricks/databricks-cli\", \"git_branch\": \"main\", \"git_provider\": \"gitHub\", } Key-values: - git_url: URL of the repository to be cloned by this job. The maximum length is 300 characters, e.g. https://github.com/databricks/databricks-cli . - git_provider: Unique identifier of the service used to host the Git repository. The value is case insensitive, e.g. github . - git_branch: Name of the branch to be checked out and used by this job. This field cannot be specified in conjunction with git_tag or git_commit. The maximum length is 255 characters, e.g. main . - git_tag: Name of the tag to be checked out and used by this job. This field cannot be specified in conjunction with git_branch or git_commit. The maximum length is 255 characters, e.g. release-1.0.0 . - git_commit: Commit to be checked out and used by this job. This field cannot be specified in conjunction with git_branch or git_tag. The maximum length is 64 characters, e.g. e0056d01 . - git_snapshot: Read-only state of the remote repository at the time the job was run. This field is only included on job runs. None timeout_seconds int An optional timeout applied to each run of this job. The default behavior is to have no timeout, e.g. 86400 . None idempotency_token str An optional token that can be used to guarantee the idempotency of job run requests. If a run with the provided token already exists, the request does not create a new run but returns the ID of the existing run instead. If a run with the provided token is deleted, an error is returned. If you specify the idempotency token, upon failure you can retry until the request succeeds. Databricks guarantees that exactly one run is launched with that idempotency token. This token must have at most 64 characters. For more information, see How to ensure idempotency for jobs , e.g. 8f018174-4792-40d5-bcbc-3e6a527352c8 . None access_control_list List ['models.AccessControlRequest'] List of permissions to set on the job. None Returns: Type Description Dict [ str , Any ] Upon success, a dict of the response. - run_id: int API Endpoint: /2.1/jobs/runs/submit API Responses: Response Description 200 Run was created and started successfully. 400 The request was malformed. See JSON response for error details. 401 The request was unauthorized. 500 The request was not handled correctly due to a server error. Source code in prefect_databricks/jobs.py 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 @task async def jobs_runs_submit ( databricks_credentials : \"DatabricksCredentials\" , tasks : List [ \"models.RunSubmitTaskSettings\" ] = None , run_name : str = None , git_source : \"models.GitSource\" = None , timeout_seconds : int = None , idempotency_token : str = None , access_control_list : List [ \"models.AccessControlRequest\" ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Submit a one-time run. This endpoint allows you to submit a workload directly without creating a job. Runs submitted using this endpoint don\u2019t display in the UI. Use the `jobs/runs/get` API to check the run state after the job is submitted. Args: databricks_credentials: Credentials to use for authentication with Databricks. tasks: , e.g. ``` [ { \"task_key\": \"Sessionize\", \"description\": \"Extracts session data from events\", \"depends_on\": [], \"existing_cluster_id\": \"0923-164208-meows279\", \"spark_jar_task\": { \"main_class_name\": \"com.databricks.Sessionize\", \"parameters\": [\"--data\", \"dbfs:/path/to/data.json\"], }, \"libraries\": [{\"jar\": \"dbfs:/mnt/databricks/Sessionize.jar\"}], \"timeout_seconds\": 86400, }, { \"task_key\": \"Orders_Ingest\", \"description\": \"Ingests order data\", \"depends_on\": [], \"existing_cluster_id\": \"0923-164208-meows279\", \"spark_jar_task\": { \"main_class_name\": \"com.databricks.OrdersIngest\", \"parameters\": [\"--data\", \"dbfs:/path/to/order-data.json\"], }, \"libraries\": [{\"jar\": \"dbfs:/mnt/databricks/OrderIngest.jar\"}], \"timeout_seconds\": 86400, }, { \"task_key\": \"Match\", \"description\": \"Matches orders with user sessions\", \"depends_on\": [ {\"task_key\": \"Orders_Ingest\"}, {\"task_key\": \"Sessionize\"}, ], \"new_cluster\": { \"spark_version\": \"7.3.x-scala2.12\", \"node_type_id\": \"i3.xlarge\", \"spark_conf\": {\"spark.speculation\": True}, \"aws_attributes\": { \"availability\": \"SPOT\", \"zone_id\": \"us-west-2a\", }, \"autoscale\": {\"min_workers\": 2, \"max_workers\": 16}, }, \"notebook_task\": { \"notebook_path\": \"/Users/user.name@databricks.com/Match\", \"source\": \"WORKSPACE\", \"base_parameters\": {\"name\": \"John Doe\", \"age\": \"35\"}, }, \"timeout_seconds\": 86400, }, ] ``` run_name: An optional name for the run. The default value is `Untitled`, e.g. `A multitask job run`. git_source: This functionality is in Public Preview. An optional specification for a remote repository containing the notebooks used by this job's notebook tasks, e.g. ``` { \"git_url\": \"https://github.com/databricks/databricks-cli\", \"git_branch\": \"main\", \"git_provider\": \"gitHub\", } ``` Key-values: - git_url: URL of the repository to be cloned by this job. The maximum length is 300 characters, e.g. `https://github.com/databricks/databricks-cli`. - git_provider: Unique identifier of the service used to host the Git repository. The value is case insensitive, e.g. `github`. - git_branch: Name of the branch to be checked out and used by this job. This field cannot be specified in conjunction with git_tag or git_commit. The maximum length is 255 characters, e.g. `main`. - git_tag: Name of the tag to be checked out and used by this job. This field cannot be specified in conjunction with git_branch or git_commit. The maximum length is 255 characters, e.g. `release-1.0.0`. - git_commit: Commit to be checked out and used by this job. This field cannot be specified in conjunction with git_branch or git_tag. The maximum length is 64 characters, e.g. `e0056d01`. - git_snapshot: Read-only state of the remote repository at the time the job was run. This field is only included on job runs. timeout_seconds: An optional timeout applied to each run of this job. The default behavior is to have no timeout, e.g. `86400`. idempotency_token: An optional token that can be used to guarantee the idempotency of job run requests. If a run with the provided token already exists, the request does not create a new run but returns the ID of the existing run instead. If a run with the provided token is deleted, an error is returned. If you specify the idempotency token, upon failure you can retry until the request succeeds. Databricks guarantees that exactly one run is launched with that idempotency token. This token must have at most 64 characters. For more information, see [How to ensure idempotency for jobs](https://kb.databricks.com/jobs/jobs-idempotency.html), e.g. `8f018174-4792-40d5-bcbc-3e6a527352c8`. access_control_list: List of permissions to set on the job. Returns: Upon success, a dict of the response. </br>- `run_id: int`</br> <h4>API Endpoint:</h4> `/2.1/jobs/runs/submit` <h4>API Responses:</h4> | Response | Description | | --- | --- | | 200 | Run was created and started successfully. | | 400 | The request was malformed. See JSON response for error details. | | 401 | The request was unauthorized. | | 500 | The request was not handled correctly due to a server error. | \"\"\" # noqa endpoint = \"/2.1/jobs/runs/submit\" # noqa responses = { 200 : \"Run was created and started successfully.\" , # noqa 400 : \"The request was malformed. See JSON response for error details.\" , # noqa 401 : \"The request was unauthorized.\" , # noqa 500 : \"The request was not handled correctly due to a server error.\" , # noqa } json_payload = { \"tasks\" : tasks , \"run_name\" : run_name , \"git_source\" : git_source , \"timeout_seconds\" : timeout_seconds , \"idempotency_token\" : idempotency_token , \"access_control_list\" : access_control_list , } response = await execute_endpoint . fn ( endpoint , databricks_credentials , http_method = HTTPMethod . POST , json = json_payload , ) contents = _unpack_contents ( response , responses ) return contents jobs_update async Add, update, or remove specific settings of an existing job. Use the Reset endpoint to overwrite all job settings. Parameters: Name Type Description Default databricks_credentials 'DatabricksCredentials' Credentials to use for authentication with Databricks. required job_id int The canonical identifier of the job to update. This field is required, e.g. 11223344 . None new_settings 'models.JobSettings' The new settings for the job. Any top-level fields specified in new_settings are completely replaced. Partially updating nested fields is not supported. Changes to the field JobSettings.timeout_seconds are applied to active runs. Changes to other fields are applied to future runs only. Key-values: - name: An optional name for the job, e.g. A multitask job . - tags: A map of tags associated with the job. These are forwarded to the cluster as cluster tags for jobs clusters, and are subject to the same limitations as cluster tags. A maximum of 25 tags can be added to the job, e.g. {\"cost-center\": \"engineering\", \"team\": \"jobs\"} - tasks: A list of task specifications to be executed by this job, e.g. [ { \"task_key\": \"Sessionize\", \"description\": \"Extracts session data from events\", \"depends_on\": [], \"existing_cluster_id\": \"0923-164208-meows279\", \"spark_jar_task\": { \"main_class_name\": \"com.databricks.Sessionize\", \"parameters\": [ \"--data\", \"dbfs:/path/to/data.json\", ], }, \"libraries\": [ {\"jar\": \"dbfs:/mnt/databricks/Sessionize.jar\"} ], \"timeout_seconds\": 86400, \"max_retries\": 3, \"min_retry_interval_millis\": 2000, \"retry_on_timeout\": False, }, { \"task_key\": \"Orders_Ingest\", \"description\": \"Ingests order data\", \"depends_on\": [], \"job_cluster_key\": \"auto_scaling_cluster\", \"spark_jar_task\": { \"main_class_name\": \"com.databricks.OrdersIngest\", \"parameters\": [ \"--data\", \"dbfs:/path/to/order-data.json\", ], }, \"libraries\": [ {\"jar\": \"dbfs:/mnt/databricks/OrderIngest.jar\"} ], \"timeout_seconds\": 86400, \"max_retries\": 3, \"min_retry_interval_millis\": 2000, \"retry_on_timeout\": False, }, { \"task_key\": \"Match\", \"description\": \"Matches orders with user sessions\", \"depends_on\": [ {\"task_key\": \"Orders_Ingest\"}, {\"task_key\": \"Sessionize\"}, ], \"new_cluster\": { \"spark_version\": \"7.3.x-scala2.12\", \"node_type_id\": \"i3.xlarge\", \"spark_conf\": {\"spark.speculation\": True}, \"aws_attributes\": { \"availability\": \"SPOT\", \"zone_id\": \"us-west-2a\", }, \"autoscale\": { \"min_workers\": 2, \"max_workers\": 16, }, }, \"notebook_task\": { \"notebook_path\": \"/Users/user.name@databricks.com/Match\", \"source\": \"WORKSPACE\", \"base_parameters\": { \"name\": \"John Doe\", \"age\": \"35\", }, }, \"timeout_seconds\": 86400, \"max_retries\": 3, \"min_retry_interval_millis\": 2000, \"retry_on_timeout\": False, }, ] - job_clusters: A list of job cluster specifications that can be shared and reused by tasks of this job. Libraries cannot be declared in a shared job cluster. You must declare dependent libraries in task settings, e.g. [ { \"job_cluster_key\": \"auto_scaling_cluster\", \"new_cluster\": { \"spark_version\": \"7.3.x-scala2.12\", \"node_type_id\": \"i3.xlarge\", \"spark_conf\": {\"spark.speculation\": True}, \"aws_attributes\": { \"availability\": \"SPOT\", \"zone_id\": \"us-west-2a\", }, \"autoscale\": { \"min_workers\": 2, \"max_workers\": 16, }, }, } ] - email_notifications: An optional set of email addresses that is notified when runs of this job begin or complete as well as when this job is deleted. The default behavior is to not send any emails. - timeout_seconds: An optional timeout applied to each run of this job. The default behavior is to have no timeout, e.g. 86400 . - schedule: An optional periodic schedule for this job. The default behavior is that the job only runs when triggered by clicking \u201cRun Now\u201d in the Jobs UI or sending an API request to runNow . - max_concurrent_runs: An optional maximum allowed number of concurrent runs of the job. Set this value if you want to be able to execute multiple runs of the same job concurrently. This is useful for example if you trigger your job on a frequent schedule and want to allow consecutive runs to overlap with each other, or if you want to trigger multiple runs which differ by their input parameters. This setting affects only new runs. For example, suppose the job\u2019s concurrency is 4 and there are 4 concurrent active runs. Then setting the concurrency to 3 won\u2019t kill any of the active runs. However, from then on, new runs are skipped unless there are fewer than 3 active runs. This value cannot exceed 1000. Setting this value to 0 causes all new runs to be skipped. The default behavior is to allow only 1 concurrent run, e.g. 10 . - git_source: This functionality is in Public Preview. An optional specification for a remote repository containing the notebooks used by this job's notebook tasks, e.g. { \"git_url\": \"https://github.com/databricks/databricks-cli\", \"git_branch\": \"main\", \"git_provider\": \"gitHub\", } - format: Used to tell what is the format of the job. This field is ignored in Create/Update/Reset calls. When using the Jobs API 2.1 this value is always set to 'MULTI_TASK' , e.g. MULTI_TASK . None fields_to_remove List [ str ] Remove top-level fields in the job settings. Removing nested fields is not supported. This field is optional, e.g. [\"libraries\", \"schedule\"] None Returns: Type Description Dict [ str , Any ] Upon success, an empty dict. API Endpoint: /2.1/jobs/update API Responses: Response Description 200 Job was updated successfully. 400 The request was malformed. See JSON response for error details. 401 The request was unauthorized. 500 The request was not handled correctly due to a server error. Source code in prefect_databricks/jobs.py 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 1793 1794 1795 1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 1863 1864 1865 1866 1867 1868 1869 1870 @task async def jobs_update ( databricks_credentials : \"DatabricksCredentials\" , job_id : int = None , new_settings : \"models.JobSettings\" = None , fields_to_remove : List [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Add, update, or remove specific settings of an existing job. Use the Reset endpoint to overwrite all job settings. Args: databricks_credentials: Credentials to use for authentication with Databricks. job_id: The canonical identifier of the job to update. This field is required, e.g. `11223344`. new_settings: The new settings for the job. Any top-level fields specified in `new_settings` are completely replaced. Partially updating nested fields is not supported. Changes to the field `JobSettings.timeout_seconds` are applied to active runs. Changes to other fields are applied to future runs only. Key-values: - name: An optional name for the job, e.g. `A multitask job`. - tags: A map of tags associated with the job. These are forwarded to the cluster as cluster tags for jobs clusters, and are subject to the same limitations as cluster tags. A maximum of 25 tags can be added to the job, e.g. ``` {\"cost-center\": \"engineering\", \"team\": \"jobs\"} ``` - tasks: A list of task specifications to be executed by this job, e.g. ``` [ { \"task_key\": \"Sessionize\", \"description\": \"Extracts session data from events\", \"depends_on\": [], \"existing_cluster_id\": \"0923-164208-meows279\", \"spark_jar_task\": { \"main_class_name\": \"com.databricks.Sessionize\", \"parameters\": [ \"--data\", \"dbfs:/path/to/data.json\", ], }, \"libraries\": [ {\"jar\": \"dbfs:/mnt/databricks/Sessionize.jar\"} ], \"timeout_seconds\": 86400, \"max_retries\": 3, \"min_retry_interval_millis\": 2000, \"retry_on_timeout\": False, }, { \"task_key\": \"Orders_Ingest\", \"description\": \"Ingests order data\", \"depends_on\": [], \"job_cluster_key\": \"auto_scaling_cluster\", \"spark_jar_task\": { \"main_class_name\": \"com.databricks.OrdersIngest\", \"parameters\": [ \"--data\", \"dbfs:/path/to/order-data.json\", ], }, \"libraries\": [ {\"jar\": \"dbfs:/mnt/databricks/OrderIngest.jar\"} ], \"timeout_seconds\": 86400, \"max_retries\": 3, \"min_retry_interval_millis\": 2000, \"retry_on_timeout\": False, }, { \"task_key\": \"Match\", \"description\": \"Matches orders with user sessions\", \"depends_on\": [ {\"task_key\": \"Orders_Ingest\"}, {\"task_key\": \"Sessionize\"}, ], \"new_cluster\": { \"spark_version\": \"7.3.x-scala2.12\", \"node_type_id\": \"i3.xlarge\", \"spark_conf\": {\"spark.speculation\": True}, \"aws_attributes\": { \"availability\": \"SPOT\", \"zone_id\": \"us-west-2a\", }, \"autoscale\": { \"min_workers\": 2, \"max_workers\": 16, }, }, \"notebook_task\": { \"notebook_path\": \"/Users/user.name@databricks.com/Match\", \"source\": \"WORKSPACE\", \"base_parameters\": { \"name\": \"John Doe\", \"age\": \"35\", }, }, \"timeout_seconds\": 86400, \"max_retries\": 3, \"min_retry_interval_millis\": 2000, \"retry_on_timeout\": False, }, ] ``` - job_clusters: A list of job cluster specifications that can be shared and reused by tasks of this job. Libraries cannot be declared in a shared job cluster. You must declare dependent libraries in task settings, e.g. ``` [ { \"job_cluster_key\": \"auto_scaling_cluster\", \"new_cluster\": { \"spark_version\": \"7.3.x-scala2.12\", \"node_type_id\": \"i3.xlarge\", \"spark_conf\": {\"spark.speculation\": True}, \"aws_attributes\": { \"availability\": \"SPOT\", \"zone_id\": \"us-west-2a\", }, \"autoscale\": { \"min_workers\": 2, \"max_workers\": 16, }, }, } ] ``` - email_notifications: An optional set of email addresses that is notified when runs of this job begin or complete as well as when this job is deleted. The default behavior is to not send any emails. - timeout_seconds: An optional timeout applied to each run of this job. The default behavior is to have no timeout, e.g. `86400`. - schedule: An optional periodic schedule for this job. The default behavior is that the job only runs when triggered by clicking \u201cRun Now\u201d in the Jobs UI or sending an API request to `runNow`. - max_concurrent_runs: An optional maximum allowed number of concurrent runs of the job. Set this value if you want to be able to execute multiple runs of the same job concurrently. This is useful for example if you trigger your job on a frequent schedule and want to allow consecutive runs to overlap with each other, or if you want to trigger multiple runs which differ by their input parameters. This setting affects only new runs. For example, suppose the job\u2019s concurrency is 4 and there are 4 concurrent active runs. Then setting the concurrency to 3 won\u2019t kill any of the active runs. However, from then on, new runs are skipped unless there are fewer than 3 active runs. This value cannot exceed 1000\\. Setting this value to 0 causes all new runs to be skipped. The default behavior is to allow only 1 concurrent run, e.g. `10`. - git_source: This functionality is in Public Preview. An optional specification for a remote repository containing the notebooks used by this job's notebook tasks, e.g. ``` { \"git_url\": \"https://github.com/databricks/databricks-cli\", \"git_branch\": \"main\", \"git_provider\": \"gitHub\", } ``` - format: Used to tell what is the format of the job. This field is ignored in Create/Update/Reset calls. When using the Jobs API 2.1 this value is always set to `'MULTI_TASK'`, e.g. `MULTI_TASK`. fields_to_remove: Remove top-level fields in the job settings. Removing nested fields is not supported. This field is optional, e.g. ``` [\"libraries\", \"schedule\"] ``` Returns: Upon success, an empty dict. <h4>API Endpoint:</h4> `/2.1/jobs/update` <h4>API Responses:</h4> | Response | Description | | --- | --- | | 200 | Job was updated successfully. | | 400 | The request was malformed. See JSON response for error details. | | 401 | The request was unauthorized. | | 500 | The request was not handled correctly due to a server error. | \"\"\" # noqa endpoint = \"/2.1/jobs/update\" # noqa responses = { 200 : \"Job was updated successfully.\" , # noqa 400 : \"The request was malformed. See JSON response for error details.\" , # noqa 401 : \"The request was unauthorized.\" , # noqa 500 : \"The request was not handled correctly due to a server error.\" , # noqa } json_payload = { \"job_id\" : job_id , \"new_settings\" : new_settings , \"fields_to_remove\" : fields_to_remove , } response = await execute_endpoint . fn ( endpoint , databricks_credentials , http_method = HTTPMethod . POST , json = json_payload , ) contents = _unpack_contents ( response , responses ) return contents","title":"Jobs"},{"location":"jobs/#prefect_databricks.jobs","text":"This is a module containing tasks for interacting with: Databricks jobs","title":"jobs"},{"location":"jobs/#prefect_databricks.jobs.jobs_create","text":"Create a new job. Parameters: Name Type Description Default databricks_credentials 'DatabricksCredentials' Credentials to use for authentication with Databricks. required name str An optional name for the job, e.g. A multitask job . 'Untitled' tags Dict A map of tags associated with the job. These are forwarded to the cluster as cluster tags for jobs clusters, and are subject to the same limitations as cluster tags. A maximum of 25 tags can be added to the job, e.g. {\"cost-center\": \"engineering\", \"team\": \"jobs\"} None tasks List ['models.JobTaskSettings'] A list of task specifications to be executed by this job, e.g. [ { \"task_key\": \"Sessionize\", \"description\": \"Extracts session data from events\", \"depends_on\": [], \"existing_cluster_id\": \"0923-164208-meows279\", \"spark_jar_task\": { \"main_class_name\": \"com.databricks.Sessionize\", \"parameters\": [\"--data\", \"dbfs:/path/to/data.json\"], }, \"libraries\": [{\"jar\": \"dbfs:/mnt/databricks/Sessionize.jar\"}], \"timeout_seconds\": 86400, \"max_retries\": 3, \"min_retry_interval_millis\": 2000, \"retry_on_timeout\": False, }, { \"task_key\": \"Orders_Ingest\", \"description\": \"Ingests order data\", \"depends_on\": [], \"job_cluster_key\": \"auto_scaling_cluster\", \"spark_jar_task\": { \"main_class_name\": \"com.databricks.OrdersIngest\", \"parameters\": [\"--data\", \"dbfs:/path/to/order-data.json\"], }, \"libraries\": [{\"jar\": \"dbfs:/mnt/databricks/OrderIngest.jar\"}], \"timeout_seconds\": 86400, \"max_retries\": 3, \"min_retry_interval_millis\": 2000, \"retry_on_timeout\": False, }, { \"task_key\": \"Match\", \"description\": \"Matches orders with user sessions\", \"depends_on\": [ {\"task_key\": \"Orders_Ingest\"}, {\"task_key\": \"Sessionize\"}, ], \"new_cluster\": { \"spark_version\": \"7.3.x-scala2.12\", \"node_type_id\": \"i3.xlarge\", \"spark_conf\": {\"spark.speculation\": True}, \"aws_attributes\": { \"availability\": \"SPOT\", \"zone_id\": \"us-west-2a\", }, \"autoscale\": {\"min_workers\": 2, \"max_workers\": 16}, }, \"notebook_task\": { \"notebook_path\": \"/Users/user.name@databricks.com/Match\", \"source\": \"WORKSPACE\", \"base_parameters\": {\"name\": \"John Doe\", \"age\": \"35\"}, }, \"timeout_seconds\": 86400, \"max_retries\": 3, \"min_retry_interval_millis\": 2000, \"retry_on_timeout\": False, }, ] None job_clusters List ['models.JobCluster'] A list of job cluster specifications that can be shared and reused by tasks of this job. Libraries cannot be declared in a shared job cluster. You must declare dependent libraries in task settings, e.g. [ { \"job_cluster_key\": \"auto_scaling_cluster\", \"new_cluster\": { \"spark_version\": \"7.3.x-scala2.12\", \"node_type_id\": \"i3.xlarge\", \"spark_conf\": {\"spark.speculation\": True}, \"aws_attributes\": { \"availability\": \"SPOT\", \"zone_id\": \"us-west-2a\", }, \"autoscale\": {\"min_workers\": 2, \"max_workers\": 16}, }, } ] None email_notifications 'models.JobEmailNotifications' An optional set of email addresses that is notified when runs of this job begin or complete as well as when this job is deleted. The default behavior is to not send any emails. Key-values: - on_start: A list of email addresses to be notified when a run begins. If not specified on job creation, reset, or update, the list is empty, and notifications are not sent, e.g. [\"user.name@databricks.com\"] - on_success: A list of email addresses to be notified when a run successfully completes. A run is considered to have completed successfully if it ends with a TERMINATED life_cycle_state and a SUCCESSFUL result_state. If not specified on job creation, reset, or update, the list is empty, and notifications are not sent, e.g. [\"user.name@databricks.com\"] - on_failure: A list of email addresses to be notified when a run unsuccessfully completes. A run is considered to have completed unsuccessfully if it ends with an INTERNAL_ERROR life_cycle_state or a SKIPPED , FAILED , or TIMED_OUT result_state. If this is not specified on job creation, reset, or update the list is empty, and notifications are not sent, e.g. [\"user.name@databricks.com\"] - no_alert_for_skipped_runs: If true, do not send email to recipients specified in on_failure if the run is skipped. None timeout_seconds int An optional timeout applied to each run of this job. The default behavior is to have no timeout, e.g. 86400 . None schedule 'models.CronSchedule' An optional periodic schedule for this job. The default behavior is that the job only runs when triggered by clicking \u201cRun Now\u201d in the Jobs UI or sending an API request to runNow . Key-values: - quartz_cron_expression: A Cron expression using Quartz syntax that describes the schedule for a job. See Cron Trigger for details. This field is required, e.g. 20 30 * * * ? . - timezone_id: A Java timezone ID. The schedule for a job is resolved with respect to this timezone. See Java TimeZone for details. This field is required, e.g. Europe/London . - pause_status: Indicate whether this schedule is paused or not, e.g. PAUSED . None max_concurrent_runs int An optional maximum allowed number of concurrent runs of the job. Set this value if you want to be able to execute multiple runs of the same job concurrently. This is useful for example if you trigger your job on a frequent schedule and want to allow consecutive runs to overlap with each other, or if you want to trigger multiple runs which differ by their input parameters. This setting affects only new runs. For example, suppose the job\u2019s concurrency is 4 and there are 4 concurrent active runs. Then setting the concurrency to 3 won\u2019t kill any of the active runs. However, from then on, new runs are skipped unless there are fewer than 3 active runs. This value cannot exceed 1000. Setting this value to 0 causes all new runs to be skipped. The default behavior is to allow only 1 concurrent run, e.g. 10 . None git_source 'models.GitSource' This functionality is in Public Preview. An optional specification for a remote repository containing the notebooks used by this job's notebook tasks, e.g. { \"git_url\": \"https://github.com/databricks/databricks-cli\", \"git_branch\": \"main\", \"git_provider\": \"gitHub\", } Key-values: - git_url: URL of the repository to be cloned by this job. The maximum length is 300 characters, e.g. https://github.com/databricks/databricks-cli . - git_provider: Unique identifier of the service used to host the Git repository. The value is case insensitive, e.g. github . - git_branch: Name of the branch to be checked out and used by this job. This field cannot be specified in conjunction with git_tag or git_commit. The maximum length is 255 characters, e.g. main . - git_tag: Name of the tag to be checked out and used by this job. This field cannot be specified in conjunction with git_branch or git_commit. The maximum length is 255 characters, e.g. release-1.0.0 . - git_commit: Commit to be checked out and used by this job. This field cannot be specified in conjunction with git_branch or git_tag. The maximum length is 64 characters, e.g. e0056d01 . - git_snapshot: Read-only state of the remote repository at the time the job was run. This field is only included on job runs. None format str Used to tell what is the format of the job. This field is ignored in Create/Update/Reset calls. When using the Jobs API 2.1 this value is always set to 'MULTI_TASK' , e.g. MULTI_TASK . None access_control_list List ['models.AccessControlRequest'] List of permissions to set on the job. None Returns: Type Description Dict [ str , Any ] Upon success, a dict of the response. - job_id: int","title":"jobs_create()"},{"location":"jobs/#prefect_databricks.jobs.jobs_delete","text":"Deletes a job. Parameters: Name Type Description Default databricks_credentials 'DatabricksCredentials' Credentials to use for authentication with Databricks. required job_id int The canonical identifier of the job to delete. This field is required, e.g. 11223344 . None Returns: Type Description Dict [ str , Any ] Upon success, an empty dict.","title":"jobs_delete()"},{"location":"jobs/#prefect_databricks.jobs.jobs_get","text":"Retrieves the details for a single job. Parameters: Name Type Description Default job_id int The canonical identifier of the job to retrieve information about. This field is required. required databricks_credentials 'DatabricksCredentials' Credentials to use for authentication with Databricks. required Returns: Type Description Dict [ str , Any ] Upon success, a dict of the response. - job_id: int - creator_user_name: str - run_as_user_name: str - settings: \"models.JobSettings\" - created_time: int","title":"jobs_get()"},{"location":"jobs/#prefect_databricks.jobs.jobs_list","text":"Retrieves a list of jobs. Parameters: Name Type Description Default databricks_credentials 'DatabricksCredentials' Credentials to use for authentication with Databricks. required limit int The number of jobs to return. This value must be greater than 0 and less or equal to 25. The default value is 20. 20 offset int The offset of the first job to return, relative to the most recently created job. 0 expand_tasks bool Whether to include task and cluster details in the response. False Returns: Type Description Dict [ str , Any ] Upon success, a dict of the response. - jobs: List[\"models.Job\"] - has_more: bool","title":"jobs_list()"},{"location":"jobs/#prefect_databricks.jobs.jobs_reset","text":"Overwrites all the settings for a specific job. Use the Update endpoint to update job settings partially. Parameters: Name Type Description Default databricks_credentials 'DatabricksCredentials' Credentials to use for authentication with Databricks. required job_id int The canonical identifier of the job to reset. This field is required, e.g. 11223344 . None new_settings 'models.JobSettings' The new settings of the job. These settings completely replace the old settings. Changes to the field JobSettings.timeout_seconds are applied to active runs. Changes to other fields are applied to future runs only. Key-values: - name: An optional name for the job, e.g. A multitask job . - tags: A map of tags associated with the job. These are forwarded to the cluster as cluster tags for jobs clusters, and are subject to the same limitations as cluster tags. A maximum of 25 tags can be added to the job, e.g. {\"cost-center\": \"engineering\", \"team\": \"jobs\"} - tasks: A list of task specifications to be executed by this job, e.g. [ { \"task_key\": \"Sessionize\", \"description\": \"Extracts session data from events\", \"depends_on\": [], \"existing_cluster_id\": \"0923-164208-meows279\", \"spark_jar_task\": { \"main_class_name\": \"com.databricks.Sessionize\", \"parameters\": [ \"--data\", \"dbfs:/path/to/data.json\", ], }, \"libraries\": [ {\"jar\": \"dbfs:/mnt/databricks/Sessionize.jar\"} ], \"timeout_seconds\": 86400, \"max_retries\": 3, \"min_retry_interval_millis\": 2000, \"retry_on_timeout\": False, }, { \"task_key\": \"Orders_Ingest\", \"description\": \"Ingests order data\", \"depends_on\": [], \"job_cluster_key\": \"auto_scaling_cluster\", \"spark_jar_task\": { \"main_class_name\": \"com.databricks.OrdersIngest\", \"parameters\": [ \"--data\", \"dbfs:/path/to/order-data.json\", ], }, \"libraries\": [ {\"jar\": \"dbfs:/mnt/databricks/OrderIngest.jar\"} ], \"timeout_seconds\": 86400, \"max_retries\": 3, \"min_retry_interval_millis\": 2000, \"retry_on_timeout\": False, }, { \"task_key\": \"Match\", \"description\": \"Matches orders with user sessions\", \"depends_on\": [ {\"task_key\": \"Orders_Ingest\"}, {\"task_key\": \"Sessionize\"}, ], \"new_cluster\": { \"spark_version\": \"7.3.x-scala2.12\", \"node_type_id\": \"i3.xlarge\", \"spark_conf\": {\"spark.speculation\": True}, \"aws_attributes\": { \"availability\": \"SPOT\", \"zone_id\": \"us-west-2a\", }, \"autoscale\": { \"min_workers\": 2, \"max_workers\": 16, }, }, \"notebook_task\": { \"notebook_path\": \"/Users/user.name@databricks.com/Match\", \"source\": \"WORKSPACE\", \"base_parameters\": { \"name\": \"John Doe\", \"age\": \"35\", }, }, \"timeout_seconds\": 86400, \"max_retries\": 3, \"min_retry_interval_millis\": 2000, \"retry_on_timeout\": False, }, ] - job_clusters: A list of job cluster specifications that can be shared and reused by tasks of this job. Libraries cannot be declared in a shared job cluster. You must declare dependent libraries in task settings, e.g. [ { \"job_cluster_key\": \"auto_scaling_cluster\", \"new_cluster\": { \"spark_version\": \"7.3.x-scala2.12\", \"node_type_id\": \"i3.xlarge\", \"spark_conf\": {\"spark.speculation\": True}, \"aws_attributes\": { \"availability\": \"SPOT\", \"zone_id\": \"us-west-2a\", }, \"autoscale\": { \"min_workers\": 2, \"max_workers\": 16, }, }, } ] - email_notifications: An optional set of email addresses that is notified when runs of this job begin or complete as well as when this job is deleted. The default behavior is to not send any emails. - timeout_seconds: An optional timeout applied to each run of this job. The default behavior is to have no timeout, e.g. 86400 . - schedule: An optional periodic schedule for this job. The default behavior is that the job only runs when triggered by clicking \u201cRun Now\u201d in the Jobs UI or sending an API request to runNow . - max_concurrent_runs: An optional maximum allowed number of concurrent runs of the job. Set this value if you want to be able to execute multiple runs of the same job concurrently. This is useful for example if you trigger your job on a frequent schedule and want to allow consecutive runs to overlap with each other, or if you want to trigger multiple runs which differ by their input parameters. This setting affects only new runs. For example, suppose the job\u2019s concurrency is 4 and there are 4 concurrent active runs. Then setting the concurrency to 3 won\u2019t kill any of the active runs. However, from then on, new runs are skipped unless there are fewer than 3 active runs. This value cannot exceed 1000. Setting this value to 0 causes all new runs to be skipped. The default behavior is to allow only 1 concurrent run, e.g. 10 . - git_source: This functionality is in Public Preview. An optional specification for a remote repository containing the notebooks used by this job's notebook tasks, e.g. { \"git_url\": \"https://github.com/databricks/databricks-cli\", \"git_branch\": \"main\", \"git_provider\": \"gitHub\", } - format: Used to tell what is the format of the job. This field is ignored in Create/Update/Reset calls. When using the Jobs API 2.1 this value is always set to 'MULTI_TASK' , e.g. MULTI_TASK . None Returns: Type Description Dict [ str , Any ] Upon success, an empty dict.","title":"jobs_reset()"},{"location":"jobs/#prefect_databricks.jobs.jobs_run_now","text":"Run a job and return the run_id of the triggered run. Parameters: Name Type Description Default databricks_credentials 'DatabricksCredentials' Credentials to use for authentication with Databricks. required job_id int The ID of the job to be executed, e.g. 11223344 . None idempotency_token str An optional token to guarantee the idempotency of job run requests. If a run with the provided token already exists, the request does not create a new run but returns the ID of the existing run instead. If a run with the provided token is deleted, an error is returned. If you specify the idempotency token, upon failure you can retry until the request succeeds. Databricks guarantees that exactly one run is launched with that idempotency token. This token must have at most 64 characters. For more information, see How to ensure idempotency for jobs , e.g. 8f018174-4792-40d5-bcbc-3e6a527352c8 . None jar_params List [ str ] A list of parameters for jobs with Spark JAR tasks, for example 'jar_params': ['john doe', '35'] . The parameters are used to invoke the main function of the main class specified in the Spark JAR task. If not specified upon run-now , it defaults to an empty list. jar_params cannot be specified in conjunction with notebook_params. The JSON representation of this field (for example {'jar_params':['john doe','35']} ) cannot exceed 10,000 bytes. Use Task parameter variables to set parameters containing information about job runs, e.g. [\"john\", \"doe\", \"35\"] None notebook_params Dict A map from keys to values for jobs with notebook task, for example 'notebook_params': {'name': 'john doe', 'age': '35'} . The map is passed to the notebook and is accessible through the dbutils.widgets.get function. If not specified upon run-now , the triggered run uses the job\u2019s base parameters. notebook_params cannot be specified in conjunction with jar_params. Use Task parameter variables to set parameters containing information about job runs. The JSON representation of this field (for example {'notebook_params':{'name':'john doe','age':'35'}} ) cannot exceed 10,000 bytes, e.g. {\"name\": \"john doe\", \"age\": \"35\"} None python_params List [ str ] A list of parameters for jobs with Python tasks, for example 'python_params': ['john doe', '35'] . The parameters are passed to Python file as command-line parameters. If specified upon run-now , it would overwrite the parameters specified in job setting. The JSON representation of this field (for example {'python_params':['john doe','35']} ) cannot exceed 10,000 bytes. Use Task parameter variables to set parameters containing information about job runs. Important These parameters accept only Latin characters (ASCII character set). Using non-ASCII characters returns an error. Examples of invalid, non-ASCII characters are Chinese, Japanese kanjis, and emojis, e.g. [\"john doe\", \"35\"] None spark_submit_params List [ str ] A list of parameters for jobs with spark submit task, for example 'spark_submit_params': ['--class', 'org.apache.spark.examples.SparkPi'] . The parameters are passed to spark-submit script as command-line parameters. If specified upon run-now , it would overwrite the parameters specified in job setting. The JSON representation of this field (for example {'python_params':['john doe','35']} ) cannot exceed 10,000 bytes. Use Task parameter variables to set parameters containing information about job runs. Important These parameters accept only Latin characters (ASCII character set). Using non-ASCII characters returns an error. Examples of invalid, non-ASCII characters are Chinese, Japanese kanjis, and emojis, e.g. [\"--class\", \"org.apache.spark.examples.SparkPi\"] None python_named_params Dict A map from keys to values for jobs with Python wheel task, for example 'python_named_params': {'name': 'task', 'data': 'dbfs:/path/to/data.json'} , e.g. {\"name\": \"task\", \"data\": \"dbfs:/path/to/data.json\"} None pipeline_params str None sql_params Dict A map from keys to values for SQL tasks, for example 'sql_params': {'name': 'john doe', 'age': '35'} . The SQL alert task does not support custom parameters, e.g. {\"name\": \"john doe\", \"age\": \"35\"} None dbt_commands List An array of commands to execute for jobs with the dbt task, for example 'dbt_commands': ['dbt deps', 'dbt seed', 'dbt run'] , e.g. [\"dbt deps\", \"dbt seed\", \"dbt run\"] None Returns: Type Description Dict [ str , Any ] Upon success, a dict of the response. - run_id: int - number_in_job: int","title":"jobs_run_now()"},{"location":"jobs/#prefect_databricks.jobs.jobs_runs_cancel","text":"Cancels a job run. The run is canceled asynchronously, so it may still be running when this request completes. Parameters: Name Type Description Default databricks_credentials 'DatabricksCredentials' Credentials to use for authentication with Databricks. required run_id int This field is required, e.g. 455644833 . None Returns: Type Description Dict [ str , Any ] Upon success, an empty dict.","title":"jobs_runs_cancel()"},{"location":"jobs/#prefect_databricks.jobs.jobs_runs_cancel_all","text":"Cancels all active runs of a job. The runs are canceled asynchronously, so it doesn't prevent new runs from being started. Parameters: Name Type Description Default databricks_credentials 'DatabricksCredentials' Credentials to use for authentication with Databricks. required job_id int The canonical identifier of the job to cancel all runs of. This field is required, e.g. 11223344 . None Returns: Type Description Dict [ str , Any ] Upon success, an empty dict.","title":"jobs_runs_cancel_all()"},{"location":"jobs/#prefect_databricks.jobs.jobs_runs_delete","text":"Deletes a non-active run. Returns an error if the run is active. Parameters: Name Type Description Default databricks_credentials 'DatabricksCredentials' Credentials to use for authentication with Databricks. required run_id int The canonical identifier of the run for which to retrieve the metadata, e.g. 455644833 . None Returns: Type Description Dict [ str , Any ] Upon success, an empty dict.","title":"jobs_runs_delete()"},{"location":"jobs/#prefect_databricks.jobs.jobs_runs_export","text":"Export and retrieve the job run task. Parameters: Name Type Description Default run_id int The canonical identifier for the run. This field is required. required databricks_credentials 'DatabricksCredentials' Credentials to use for authentication with Databricks. required views_to_export str Which views to export (CODE, DASHBOARDS, or ALL). Defaults to CODE. None Returns: Type Description Dict [ str , Any ] Upon success, a dict of the response. - views: List[\"models.ViewItem\"]","title":"jobs_runs_export()"},{"location":"jobs/#prefect_databricks.jobs.jobs_runs_get","text":"Retrieve the metadata of a run. Parameters: Name Type Description Default run_id int The canonical identifier of the run for which to retrieve the metadata. This field is required. required databricks_credentials 'DatabricksCredentials' Credentials to use for authentication with Databricks. required include_history bool Whether to include the repair history in the response. None Returns: Type Description Dict [ str , Any ] Upon success, a dict of the response. - job_id: int - run_id: int - number_in_job: int - creator_user_name: str - original_attempt_run_id: int - state: \"models.RunState\" - schedule: \"models.CronSchedule\" - tasks: List[\"models.RunTask\"] - job_clusters: List[\"models.JobCluster\"] - cluster_spec: \"models.ClusterSpec\" - cluster_instance: \"models.ClusterInstance\" - git_source: \"models.GitSource\" - overriding_parameters: \"models.RunParameters\" - start_time: int - setup_duration: int - execution_duration: int - cleanup_duration: int - end_time: int - trigger: \"models.TriggerType\" - run_name: str - run_page_url: str - run_type: \"models.RunType\" - attempt_number: int - repair_history: List[\"models.RepairHistoryItem\"]","title":"jobs_runs_get()"},{"location":"jobs/#prefect_databricks.jobs.jobs_runs_get_output","text":"Retrieve the output and metadata of a single task run. When a notebook task returns a value through the dbutils.notebook.exit() call, you can use this endpoint to retrieve that value. Databricks restricts this API to return the first 5 MB of the output. To return a larger result, you can store job results in a cloud storage service. This endpoint validates that the run_id parameter is valid and returns an HTTP status code 400 if the run_id parameter is invalid. Runs are automatically removed after 60 days. If you to want to reference them beyond 60 days, you must save old run results before they expire. To export using the UI, see Export job run results. To export using the Jobs API, see Runs export. Parameters: Name Type Description Default run_id int The canonical identifier for the run. This field is required. required databricks_credentials 'DatabricksCredentials' Credentials to use for authentication with Databricks. required Returns: Type Description Dict [ str , Any ] Upon success, a dict of the response. - notebook_output: \"models.NotebookOutput\" - sql_output: \"models.SqlOutput\" - dbt_output: \"models.DbtOutput\" - logs: str - logs_truncated: bool - error: str - error_trace: str - metadata: \"models.Run\"","title":"jobs_runs_get_output()"},{"location":"jobs/#prefect_databricks.jobs.jobs_runs_list","text":"List runs in descending order by start time. Parameters: Name Type Description Default databricks_credentials 'DatabricksCredentials' Credentials to use for authentication with Databricks. required active_only bool If active_only is true , only active runs are included in the results; otherwise, lists both active and completed runs. An active run is a run in the PENDING , RUNNING , or TERMINATING . This field cannot be true when completed_only is true . False completed_only bool If completed_only is true , only completed runs are included in the results; otherwise, lists both active and completed runs. This field cannot be true when active_only is true . False job_id int The job for which to list runs. If omitted, the Jobs service lists runs from all jobs. None offset int The offset of the first run to return, relative to the most recent run. 0 limit int The number of runs to return. This value must be greater than 0 and less than 25. The default value is 25. If a request specifies a limit of 0, the service instead uses the maximum limit. 25 run_type str The type of runs to return. For a description of run types, see Run . None expand_tasks bool Whether to include task and cluster details in the response. False start_time_from int Show runs that started at or after this value. The value must be a UTC timestamp in milliseconds. Can be combined with start_time_to to filter by a time range. None start_time_to int Show runs that started at or before this value. The value must be a UTC timestamp in milliseconds. Can be combined with start_time_from to filter by a time range. None Returns: Type Description Dict [ str , Any ] Upon success, a dict of the response. - runs: List[\"models.Run\"] - has_more: bool","title":"jobs_runs_list()"},{"location":"jobs/#prefect_databricks.jobs.jobs_runs_repair","text":"Re-run one or more tasks. Tasks are re-run as part of the original job run, use the current job and task settings, and can be viewed in the history for the original job run. Parameters: Name Type Description Default databricks_credentials 'DatabricksCredentials' Credentials to use for authentication with Databricks. required run_id int The job run ID of the run to repair. The run must not be in progress, e.g. 455644833 . None rerun_tasks List [ str ] The task keys of the task runs to repair, e.g. [\"task0\", \"task1\"] None latest_repair_id int The ID of the latest repair. This parameter is not required when repairing a run for the first time, but must be provided on subsequent requests to repair the same run, e.g. 734650698524280 . None jar_params List [ str ] A list of parameters for jobs with Spark JAR tasks, for example 'jar_params': ['john doe', '35'] . The parameters are used to invoke the main function of the main class specified in the Spark JAR task. If not specified upon run-now , it defaults to an empty list. jar_params cannot be specified in conjunction with notebook_params. The JSON representation of this field (for example {'jar_params':['john doe','35']} ) cannot exceed 10,000 bytes. Use Task parameter variables to set parameters containing information about job runs, e.g. [\"john\", \"doe\", \"35\"] None notebook_params Dict A map from keys to values for jobs with notebook task, for example 'notebook_params': {'name': 'john doe', 'age': '35'} . The map is passed to the notebook and is accessible through the dbutils.widgets.get function. If not specified upon run-now , the triggered run uses the job\u2019s base parameters. notebook_params cannot be specified in conjunction with jar_params. Use Task parameter variables to set parameters containing information about job runs. The JSON representation of this field (for example {'notebook_params':{'name':'john doe','age':'35'}} ) cannot exceed 10,000 bytes, e.g. {\"name\": \"john doe\", \"age\": \"35\"} None python_params List [ str ] A list of parameters for jobs with Python tasks, for example 'python_params': ['john doe', '35'] . The parameters are passed to Python file as command-line parameters. If specified upon run-now , it would overwrite the parameters specified in job setting. The JSON representation of this field (for example {'python_params':['john doe','35']} ) cannot exceed 10,000 bytes. Use Task parameter variables to set parameters containing information about job runs. Important These parameters accept only Latin characters (ASCII character set). Using non-ASCII characters returns an error. Examples of invalid, non-ASCII characters are Chinese, Japanese kanjis, and emojis, e.g. [\"john doe\", \"35\"] None spark_submit_params List [ str ] A list of parameters for jobs with spark submit task, for example 'spark_submit_params': ['--class', 'org.apache.spark.examples.SparkPi'] . The parameters are passed to spark-submit script as command-line parameters. If specified upon run-now , it would overwrite the parameters specified in job setting. The JSON representation of this field (for example {'python_params':['john doe','35']} ) cannot exceed 10,000 bytes. Use Task parameter variables to set parameters containing information about job runs. Important These parameters accept only Latin characters (ASCII character set). Using non-ASCII characters returns an error. Examples of invalid, non-ASCII characters are Chinese, Japanese kanjis, and emojis, e.g. [\"--class\", \"org.apache.spark.examples.SparkPi\"] None python_named_params Dict A map from keys to values for jobs with Python wheel task, for example 'python_named_params': {'name': 'task', 'data': 'dbfs:/path/to/data.json'} , e.g. {\"name\": \"task\", \"data\": \"dbfs:/path/to/data.json\"} None pipeline_params str None sql_params Dict A map from keys to values for SQL tasks, for example 'sql_params': {'name': 'john doe', 'age': '35'} . The SQL alert task does not support custom parameters, e.g. {\"name\": \"john doe\", \"age\": \"35\"} None dbt_commands List An array of commands to execute for jobs with the dbt task, for example 'dbt_commands': ['dbt deps', 'dbt seed', 'dbt run'] , e.g. [\"dbt deps\", \"dbt seed\", \"dbt run\"] None Returns: Type Description Dict [ str , Any ] Upon success, a dict of the response. - repair_id: int","title":"jobs_runs_repair()"},{"location":"jobs/#prefect_databricks.jobs.jobs_runs_submit","text":"Submit a one-time run. This endpoint allows you to submit a workload directly without creating a job. Runs submitted using this endpoint don\u2019t display in the UI. Use the jobs/runs/get API to check the run state after the job is submitted. Parameters: Name Type Description Default databricks_credentials 'DatabricksCredentials' Credentials to use for authentication with Databricks. required tasks List ['models.RunSubmitTaskSettings'] , e.g. [ { \"task_key\": \"Sessionize\", \"description\": \"Extracts session data from events\", \"depends_on\": [], \"existing_cluster_id\": \"0923-164208-meows279\", \"spark_jar_task\": { \"main_class_name\": \"com.databricks.Sessionize\", \"parameters\": [\"--data\", \"dbfs:/path/to/data.json\"], }, \"libraries\": [{\"jar\": \"dbfs:/mnt/databricks/Sessionize.jar\"}], \"timeout_seconds\": 86400, }, { \"task_key\": \"Orders_Ingest\", \"description\": \"Ingests order data\", \"depends_on\": [], \"existing_cluster_id\": \"0923-164208-meows279\", \"spark_jar_task\": { \"main_class_name\": \"com.databricks.OrdersIngest\", \"parameters\": [\"--data\", \"dbfs:/path/to/order-data.json\"], }, \"libraries\": [{\"jar\": \"dbfs:/mnt/databricks/OrderIngest.jar\"}], \"timeout_seconds\": 86400, }, { \"task_key\": \"Match\", \"description\": \"Matches orders with user sessions\", \"depends_on\": [ {\"task_key\": \"Orders_Ingest\"}, {\"task_key\": \"Sessionize\"}, ], \"new_cluster\": { \"spark_version\": \"7.3.x-scala2.12\", \"node_type_id\": \"i3.xlarge\", \"spark_conf\": {\"spark.speculation\": True}, \"aws_attributes\": { \"availability\": \"SPOT\", \"zone_id\": \"us-west-2a\", }, \"autoscale\": {\"min_workers\": 2, \"max_workers\": 16}, }, \"notebook_task\": { \"notebook_path\": \"/Users/user.name@databricks.com/Match\", \"source\": \"WORKSPACE\", \"base_parameters\": {\"name\": \"John Doe\", \"age\": \"35\"}, }, \"timeout_seconds\": 86400, }, ] None run_name str An optional name for the run. The default value is Untitled , e.g. A multitask job run . None git_source 'models.GitSource' This functionality is in Public Preview. An optional specification for a remote repository containing the notebooks used by this job's notebook tasks, e.g. { \"git_url\": \"https://github.com/databricks/databricks-cli\", \"git_branch\": \"main\", \"git_provider\": \"gitHub\", } Key-values: - git_url: URL of the repository to be cloned by this job. The maximum length is 300 characters, e.g. https://github.com/databricks/databricks-cli . - git_provider: Unique identifier of the service used to host the Git repository. The value is case insensitive, e.g. github . - git_branch: Name of the branch to be checked out and used by this job. This field cannot be specified in conjunction with git_tag or git_commit. The maximum length is 255 characters, e.g. main . - git_tag: Name of the tag to be checked out and used by this job. This field cannot be specified in conjunction with git_branch or git_commit. The maximum length is 255 characters, e.g. release-1.0.0 . - git_commit: Commit to be checked out and used by this job. This field cannot be specified in conjunction with git_branch or git_tag. The maximum length is 64 characters, e.g. e0056d01 . - git_snapshot: Read-only state of the remote repository at the time the job was run. This field is only included on job runs. None timeout_seconds int An optional timeout applied to each run of this job. The default behavior is to have no timeout, e.g. 86400 . None idempotency_token str An optional token that can be used to guarantee the idempotency of job run requests. If a run with the provided token already exists, the request does not create a new run but returns the ID of the existing run instead. If a run with the provided token is deleted, an error is returned. If you specify the idempotency token, upon failure you can retry until the request succeeds. Databricks guarantees that exactly one run is launched with that idempotency token. This token must have at most 64 characters. For more information, see How to ensure idempotency for jobs , e.g. 8f018174-4792-40d5-bcbc-3e6a527352c8 . None access_control_list List ['models.AccessControlRequest'] List of permissions to set on the job. None Returns: Type Description Dict [ str , Any ] Upon success, a dict of the response. - run_id: int","title":"jobs_runs_submit()"},{"location":"jobs/#prefect_databricks.jobs.jobs_update","text":"Add, update, or remove specific settings of an existing job. Use the Reset endpoint to overwrite all job settings. Parameters: Name Type Description Default databricks_credentials 'DatabricksCredentials' Credentials to use for authentication with Databricks. required job_id int The canonical identifier of the job to update. This field is required, e.g. 11223344 . None new_settings 'models.JobSettings' The new settings for the job. Any top-level fields specified in new_settings are completely replaced. Partially updating nested fields is not supported. Changes to the field JobSettings.timeout_seconds are applied to active runs. Changes to other fields are applied to future runs only. Key-values: - name: An optional name for the job, e.g. A multitask job . - tags: A map of tags associated with the job. These are forwarded to the cluster as cluster tags for jobs clusters, and are subject to the same limitations as cluster tags. A maximum of 25 tags can be added to the job, e.g. {\"cost-center\": \"engineering\", \"team\": \"jobs\"} - tasks: A list of task specifications to be executed by this job, e.g. [ { \"task_key\": \"Sessionize\", \"description\": \"Extracts session data from events\", \"depends_on\": [], \"existing_cluster_id\": \"0923-164208-meows279\", \"spark_jar_task\": { \"main_class_name\": \"com.databricks.Sessionize\", \"parameters\": [ \"--data\", \"dbfs:/path/to/data.json\", ], }, \"libraries\": [ {\"jar\": \"dbfs:/mnt/databricks/Sessionize.jar\"} ], \"timeout_seconds\": 86400, \"max_retries\": 3, \"min_retry_interval_millis\": 2000, \"retry_on_timeout\": False, }, { \"task_key\": \"Orders_Ingest\", \"description\": \"Ingests order data\", \"depends_on\": [], \"job_cluster_key\": \"auto_scaling_cluster\", \"spark_jar_task\": { \"main_class_name\": \"com.databricks.OrdersIngest\", \"parameters\": [ \"--data\", \"dbfs:/path/to/order-data.json\", ], }, \"libraries\": [ {\"jar\": \"dbfs:/mnt/databricks/OrderIngest.jar\"} ], \"timeout_seconds\": 86400, \"max_retries\": 3, \"min_retry_interval_millis\": 2000, \"retry_on_timeout\": False, }, { \"task_key\": \"Match\", \"description\": \"Matches orders with user sessions\", \"depends_on\": [ {\"task_key\": \"Orders_Ingest\"}, {\"task_key\": \"Sessionize\"}, ], \"new_cluster\": { \"spark_version\": \"7.3.x-scala2.12\", \"node_type_id\": \"i3.xlarge\", \"spark_conf\": {\"spark.speculation\": True}, \"aws_attributes\": { \"availability\": \"SPOT\", \"zone_id\": \"us-west-2a\", }, \"autoscale\": { \"min_workers\": 2, \"max_workers\": 16, }, }, \"notebook_task\": { \"notebook_path\": \"/Users/user.name@databricks.com/Match\", \"source\": \"WORKSPACE\", \"base_parameters\": { \"name\": \"John Doe\", \"age\": \"35\", }, }, \"timeout_seconds\": 86400, \"max_retries\": 3, \"min_retry_interval_millis\": 2000, \"retry_on_timeout\": False, }, ] - job_clusters: A list of job cluster specifications that can be shared and reused by tasks of this job. Libraries cannot be declared in a shared job cluster. You must declare dependent libraries in task settings, e.g. [ { \"job_cluster_key\": \"auto_scaling_cluster\", \"new_cluster\": { \"spark_version\": \"7.3.x-scala2.12\", \"node_type_id\": \"i3.xlarge\", \"spark_conf\": {\"spark.speculation\": True}, \"aws_attributes\": { \"availability\": \"SPOT\", \"zone_id\": \"us-west-2a\", }, \"autoscale\": { \"min_workers\": 2, \"max_workers\": 16, }, }, } ] - email_notifications: An optional set of email addresses that is notified when runs of this job begin or complete as well as when this job is deleted. The default behavior is to not send any emails. - timeout_seconds: An optional timeout applied to each run of this job. The default behavior is to have no timeout, e.g. 86400 . - schedule: An optional periodic schedule for this job. The default behavior is that the job only runs when triggered by clicking \u201cRun Now\u201d in the Jobs UI or sending an API request to runNow . - max_concurrent_runs: An optional maximum allowed number of concurrent runs of the job. Set this value if you want to be able to execute multiple runs of the same job concurrently. This is useful for example if you trigger your job on a frequent schedule and want to allow consecutive runs to overlap with each other, or if you want to trigger multiple runs which differ by their input parameters. This setting affects only new runs. For example, suppose the job\u2019s concurrency is 4 and there are 4 concurrent active runs. Then setting the concurrency to 3 won\u2019t kill any of the active runs. However, from then on, new runs are skipped unless there are fewer than 3 active runs. This value cannot exceed 1000. Setting this value to 0 causes all new runs to be skipped. The default behavior is to allow only 1 concurrent run, e.g. 10 . - git_source: This functionality is in Public Preview. An optional specification for a remote repository containing the notebooks used by this job's notebook tasks, e.g. { \"git_url\": \"https://github.com/databricks/databricks-cli\", \"git_branch\": \"main\", \"git_provider\": \"gitHub\", } - format: Used to tell what is the format of the job. This field is ignored in Create/Update/Reset calls. When using the Jobs API 2.1 this value is always set to 'MULTI_TASK' , e.g. MULTI_TASK . None fields_to_remove List [ str ] Remove top-level fields in the job settings. Removing nested fields is not supported. This field is optional, e.g. [\"libraries\", \"schedule\"] None Returns: Type Description Dict [ str , Any ] Upon success, an empty dict.","title":"jobs_update()"},{"location":"rest/","text":"prefect_databricks.rest This is a module containing generic REST tasks. HTTPMethod Available HTTP request methods. Source code in prefect_databricks/rest.py 20 21 22 23 24 25 26 27 28 29 class HTTPMethod ( Enum ): \"\"\" Available HTTP request methods. \"\"\" GET = \"get\" POST = \"post\" PUT = \"put\" DELETE = \"delete\" PATCH = \"patch\" execute_endpoint async Generic function for executing REST endpoints. Parameters: Name Type Description Default endpoint str The endpoint route. required databricks_credentials 'DatabricksCredentials' Credentials to use for authentication with Databricks. required http_method HTTPMethod Either GET, POST, PUT, DELETE, or PATCH. HTTPMethod.GET params Dict [ str , Any ] URL query parameters in the request. None json Dict [ str , Any ] JSON serializable object to include in the body of the request. None **kwargs Dict [ str , Any ] Additional keyword arguments to pass. {} Returns: Type Description httpx . Response The httpx.Response from interacting with the endpoint. Examples: Lists jobs on the Databricks instance. from prefect import flow from prefect_databricks import DatabricksCredentials from prefect_databricks.rest import execute_endpoint @flow def example_execute_endpoint_flow (): endpoint = \"/2.1/jobs/list\" databricks_credentials = DatabricksCredentials . load ( \"my-block\" ) params = { \"limit\" : 5 , \"offset\" : None , \"expand_tasks\" : True , } response = execute_endpoint ( endpoint , databricks_credentials , params = params ) return response . json () Source code in prefect_databricks/rest.py 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 @task async def execute_endpoint ( endpoint : str , databricks_credentials : \"DatabricksCredentials\" , http_method : HTTPMethod = HTTPMethod . GET , params : Dict [ str , Any ] = None , json : Dict [ str , Any ] = None , ** kwargs : Dict [ str , Any ], ) -> httpx . Response : \"\"\" Generic function for executing REST endpoints. Args: endpoint: The endpoint route. databricks_credentials: Credentials to use for authentication with Databricks. http_method: Either GET, POST, PUT, DELETE, or PATCH. params: URL query parameters in the request. json: JSON serializable object to include in the body of the request. **kwargs: Additional keyword arguments to pass. Returns: The httpx.Response from interacting with the endpoint. Examples: Lists jobs on the Databricks instance. ```python from prefect import flow from prefect_databricks import DatabricksCredentials from prefect_databricks.rest import execute_endpoint @flow def example_execute_endpoint_flow(): endpoint = \"/2.1/jobs/list\" databricks_credentials = DatabricksCredentials.load(\"my-block\") params = { \"limit\": 5, \"offset\": None, \"expand_tasks\": True, } response = execute_endpoint( endpoint, databricks_credentials, params=params ) return response.json() ``` \"\"\" if isinstance ( http_method , HTTPMethod ): http_method = http_method . value if params is not None : stripped_params = strip_kwargs ( ** params ) else : stripped_params = None if json is not None : kwargs [ \"json\" ] = strip_kwargs ( ** json ) async with databricks_credentials . get_client () as client : response = await getattr ( client , http_method )( endpoint , params = stripped_params , ** kwargs ) return response serialize_model Recursively serializes pydantic.BaseModel into JSON; returns original obj if not a BaseModel . Parameters: Name Type Description Default obj Any Input object to serialize. required Returns: Type Description Any Serialized version of object. Source code in prefect_databricks/rest.py 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 def serialize_model ( obj : Any ) -> Any : \"\"\" Recursively serializes `pydantic.BaseModel` into JSON; returns original obj if not a `BaseModel`. Args: obj: Input object to serialize. Returns: Serialized version of object. \"\"\" if isinstance ( obj , list ): return [ serialize_model ( o ) for o in obj ] elif isinstance ( obj , Dict ): return { k : serialize_model ( v ) for k , v in obj . items ()} if isinstance ( obj , BaseModel ): obj = obj . dict () return obj strip_kwargs Recursively drops keyword arguments if value is None, and serializes any pydantic.BaseModel types. Parameters: Name Type Description Default **kwargs Dict Input keyword arguments. {} Returns: Type Description Dict Stripped version of kwargs. Source code in prefect_databricks/rest.py 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 def strip_kwargs ( ** kwargs : Dict ) -> Dict : \"\"\" Recursively drops keyword arguments if value is None, and serializes any `pydantic.BaseModel` types. Args: **kwargs: Input keyword arguments. Returns: Stripped version of kwargs. \"\"\" stripped_dict = {} for k , v in kwargs . items (): v = serialize_model ( v ) if isinstance ( v , dict ): v = strip_kwargs ( ** v ) if v is not None : stripped_dict [ k ] = v return stripped_dict or {}","title":"Rest"},{"location":"rest/#prefect_databricks.rest","text":"This is a module containing generic REST tasks.","title":"rest"},{"location":"rest/#prefect_databricks.rest.HTTPMethod","text":"Available HTTP request methods. Source code in prefect_databricks/rest.py 20 21 22 23 24 25 26 27 28 29 class HTTPMethod ( Enum ): \"\"\" Available HTTP request methods. \"\"\" GET = \"get\" POST = \"post\" PUT = \"put\" DELETE = \"delete\" PATCH = \"patch\"","title":"HTTPMethod"},{"location":"rest/#prefect_databricks.rest.execute_endpoint","text":"Generic function for executing REST endpoints. Parameters: Name Type Description Default endpoint str The endpoint route. required databricks_credentials 'DatabricksCredentials' Credentials to use for authentication with Databricks. required http_method HTTPMethod Either GET, POST, PUT, DELETE, or PATCH. HTTPMethod.GET params Dict [ str , Any ] URL query parameters in the request. None json Dict [ str , Any ] JSON serializable object to include in the body of the request. None **kwargs Dict [ str , Any ] Additional keyword arguments to pass. {} Returns: Type Description httpx . Response The httpx.Response from interacting with the endpoint. Examples: Lists jobs on the Databricks instance. from prefect import flow from prefect_databricks import DatabricksCredentials from prefect_databricks.rest import execute_endpoint @flow def example_execute_endpoint_flow (): endpoint = \"/2.1/jobs/list\" databricks_credentials = DatabricksCredentials . load ( \"my-block\" ) params = { \"limit\" : 5 , \"offset\" : None , \"expand_tasks\" : True , } response = execute_endpoint ( endpoint , databricks_credentials , params = params ) return response . json () Source code in prefect_databricks/rest.py 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 @task async def execute_endpoint ( endpoint : str , databricks_credentials : \"DatabricksCredentials\" , http_method : HTTPMethod = HTTPMethod . GET , params : Dict [ str , Any ] = None , json : Dict [ str , Any ] = None , ** kwargs : Dict [ str , Any ], ) -> httpx . Response : \"\"\" Generic function for executing REST endpoints. Args: endpoint: The endpoint route. databricks_credentials: Credentials to use for authentication with Databricks. http_method: Either GET, POST, PUT, DELETE, or PATCH. params: URL query parameters in the request. json: JSON serializable object to include in the body of the request. **kwargs: Additional keyword arguments to pass. Returns: The httpx.Response from interacting with the endpoint. Examples: Lists jobs on the Databricks instance. ```python from prefect import flow from prefect_databricks import DatabricksCredentials from prefect_databricks.rest import execute_endpoint @flow def example_execute_endpoint_flow(): endpoint = \"/2.1/jobs/list\" databricks_credentials = DatabricksCredentials.load(\"my-block\") params = { \"limit\": 5, \"offset\": None, \"expand_tasks\": True, } response = execute_endpoint( endpoint, databricks_credentials, params=params ) return response.json() ``` \"\"\" if isinstance ( http_method , HTTPMethod ): http_method = http_method . value if params is not None : stripped_params = strip_kwargs ( ** params ) else : stripped_params = None if json is not None : kwargs [ \"json\" ] = strip_kwargs ( ** json ) async with databricks_credentials . get_client () as client : response = await getattr ( client , http_method )( endpoint , params = stripped_params , ** kwargs ) return response","title":"execute_endpoint()"},{"location":"rest/#prefect_databricks.rest.serialize_model","text":"Recursively serializes pydantic.BaseModel into JSON; returns original obj if not a BaseModel . Parameters: Name Type Description Default obj Any Input object to serialize. required Returns: Type Description Any Serialized version of object. Source code in prefect_databricks/rest.py 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 def serialize_model ( obj : Any ) -> Any : \"\"\" Recursively serializes `pydantic.BaseModel` into JSON; returns original obj if not a `BaseModel`. Args: obj: Input object to serialize. Returns: Serialized version of object. \"\"\" if isinstance ( obj , list ): return [ serialize_model ( o ) for o in obj ] elif isinstance ( obj , Dict ): return { k : serialize_model ( v ) for k , v in obj . items ()} if isinstance ( obj , BaseModel ): obj = obj . dict () return obj","title":"serialize_model()"},{"location":"rest/#prefect_databricks.rest.strip_kwargs","text":"Recursively drops keyword arguments if value is None, and serializes any pydantic.BaseModel types. Parameters: Name Type Description Default **kwargs Dict Input keyword arguments. {} Returns: Type Description Dict Stripped version of kwargs. Source code in prefect_databricks/rest.py 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 def strip_kwargs ( ** kwargs : Dict ) -> Dict : \"\"\" Recursively drops keyword arguments if value is None, and serializes any `pydantic.BaseModel` types. Args: **kwargs: Input keyword arguments. Returns: Stripped version of kwargs. \"\"\" stripped_dict = {} for k , v in kwargs . items (): v = serialize_model ( v ) if isinstance ( v , dict ): v = strip_kwargs ( ** v ) if v is not None : stripped_dict [ k ] = v return stripped_dict or {}","title":"strip_kwargs()"},{"location":"models/jobs/","text":"prefect_databricks.models.jobs AccessControlRequest See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1924 1925 1926 1927 1928 1929 1930 1931 1932 1933 class AccessControlRequest ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False __root__ : Union [ AccessControlRequestForUser , AccessControlRequestForGroup ] AccessControlRequestForGroup See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 class AccessControlRequestForGroup ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False group_name : Optional [ GroupName ] = None permission_level : Optional [ PermissionLevelForGroup ] = None AccessControlRequestForUser See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 class AccessControlRequestForUser ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False permission_level : Optional [ PermissionLevel ] = None user_name : Optional [ UserName ] = None AutoScale See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class AutoScale ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False max_workers : Optional [ int ] = Field ( None , description = ( \"The maximum number of workers to which the cluster can scale up when\" \" overloaded. max_workers must be strictly greater than min_workers.\" ), ) min_workers : Optional [ int ] = Field ( None , description = ( \"The minimum number of workers to which the cluster can scale down when\" \" underutilized. It is also the initial number of workers the cluster has\" \" after creation.\" ), ) AwsAttributes See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 class AwsAttributes ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False availability : Optional [ Literal [ \"SPOT\" , \"ON_DEMAND\" , \"SPOT_WITH_FALLBACK\" ]] = Field ( None , description = ( \"Availability type used for all subsequent nodes past the `first_on_demand`\" \" ones. **Note:** If `first_on_demand` is zero, this availability type is\" \" used for the entire cluster. \\n\\n `SPOT`: use spot instances. \\n `ON_DEMAND`:\" \" use on-demand instances. \\n `SPOT_WITH_FALLBACK`: preferably use spot\" \" instances, but fall back to on-demand instances if spot instances cannot\" \" be acquired (for example, if AWS spot prices are too high).\" ), ) ebs_volume_count : Optional [ int ] = Field ( None , description = ( \"The number of volumes launched for each instance. You can choose up to 10\" \" volumes. This feature is only enabled for supported node types. Legacy\" \" node types cannot specify custom EBS volumes. For node types with no\" \" instance store, at least one EBS volume needs to be specified; otherwise,\" \" cluster creation fails. \\n\\n These EBS volumes are mounted at `/ebs0`,\" \" `/ebs1`, and etc. Instance store volumes are mounted at `/local_disk0`,\" \" `/local_disk1`, and etc. \\n\\n If EBS volumes are attached, Databricks\" \" configures Spark to use only the EBS volumes for scratch storage because\" \" heterogeneously sized scratch devices can lead to inefficient disk\" \" utilization. If no EBS volumes are attached, Databricks configures Spark\" \" to use instance store volumes. \\n\\n If EBS volumes are specified, then the\" \" Spark configuration `spark.local.dir` is overridden.\" ), ) ebs_volume_iops : Optional [ int ] = Field ( None , description = ( \"The number of IOPS per EBS gp3 volume. \\n\\n This value must be between 3000\" \" and 16000. \\n\\n The value of IOPS and throughput is calculated based on AWS\" \" documentation to match the maximum performance of a gp2 volume with the\" \" same volume size. \\n\\n For more information, see the [EBS volume limit\" \" calculator](https://github.com/awslabs/aws-support-tools/tree/master/EBS/VolumeLimitCalculator).\" ), ) ebs_volume_size : Optional [ int ] = Field ( None , description = ( \"The size of each EBS volume (in GiB) launched for each instance. For\" \" general purpose SSD, this value must be within the range 100 - 4096 \\\\ .\" \" For throughput optimized HDD, this value must be within the range 500 -\" \" 4096 \\\\ . Custom EBS volumes cannot be specified for the legacy node types\" \" (_memory-optimized_ and _compute-optimized_).\" ), ) ebs_volume_throughput : Optional [ int ] = Field ( None , description = ( \"The throughput per EBS gp3 volume, in MiB per second. \\n\\n This value must\" \" be between 125 and 1000.\" ), ) ebs_volume_type : Optional [ Literal [ \"GENERAL_PURPOSE_SSD\" , \"THROUGHPUT_OPTIMIZED_HDD\" ] ] = Field ( None , description = ( \"The type of EBS volume that is launched with this\" \" cluster. \\n\\n `GENERAL_PURPOSE_SSD`: provision extra storage using AWS gp2\" \" EBS volumes. \\n `THROUGHPUT_OPTIMIZED_HDD`: provision extra storage using\" \" AWS st1 volumes.\" ), ) first_on_demand : Optional [ int ] = Field ( None , description = ( \"The first first_on_demand nodes of the cluster are placed on on-demand\" \" instances. If this value is greater than 0, the cluster driver node is\" \" placed on an on-demand instance. If this value is greater than or equal\" \" to the current cluster size, all nodes are placed on on-demand instances.\" \" If this value is less than the current cluster size, first_on_demand\" \" nodes are placed on on-demand instances and the remainder are placed on\" \" `availability` instances. This value does not affect cluster size and\" \" cannot be mutated over the lifetime of a cluster.\" ), ) instance_profile_arn : Optional [ str ] = Field ( None , description = ( \"Nodes for this cluster are only be placed on AWS instances with this\" \" instance profile. If omitted, nodes are placed on instances without an\" \" instance profile. The instance profile must have previously been added to\" \" the Databricks environment by an account administrator. \\n\\n This feature\" \" may only be available to certain customer plans.\" ), ) spot_bid_price_percent : Optional [ int ] = Field ( None , description = ( \"The max price for AWS spot instances, as a percentage of the corresponding\" \" instance type\u2019s on-demand price. For example, if this field is set to 50,\" \" and the cluster needs a new `i3.xlarge` spot instance, then the max price\" \" is half of the price of on-demand `i3.xlarge` instances. Similarly, if\" \" this field is set to 200, the max price is twice the price of on-demand\" \" `i3.xlarge` instances. If not specified, the default value is 100 \\\\ . When\" \" spot instances are requested for this cluster, only spot instances whose\" \" max price percentage matches this field is considered. For safety, we\" \" enforce this field to be no more than 10000.\" ), ) zone_id : Optional [ str ] = Field ( None , description = ( \"Identifier for the availability zone/datacenter in which the cluster\" \" resides. You have three options: \\n\\n **Specify an availability zone as a\" \" string**, for example: \u201cus-west-2a\u201d. The provided availability zone must\" \" be in the same region as the Databricks deployment. For example,\" \" \u201cus-west-2a\u201d is not a valid zone ID if the Databricks deployment resides\" \" in the \u201cus-east-1\u201d region. \\n\\n **Enable automatic availability zone\" \" selection (\u201cAuto-AZ\u201d)**, by setting the value \u201cauto\u201d. Databricks selects\" \" the AZ based on available IPs in the workspace subnets and retries in\" \" other availability zones if AWS returns insufficient capacity\" \" errors. \\n\\n **Do not specify a value**. If not specified, a default zone\" \" is used. \\n\\n The list of available zones as well as the default value can\" \" be found by using the [List\" \" zones](https://docs.databricks.com/dev-tools/api/latest/clusters.html#list-zones)\" \" API.\" ), ) CanManage Permission to manage the job. Source code in prefect_databricks/models/jobs.py 173 174 175 176 177 178 class CanManage ( Enum ): \"\"\" Permission to manage the job. \"\"\" canmanage = \"CAN_MANAGE\" CanManageRun Permission to run and/or manage runs for the job. Source code in prefect_databricks/models/jobs.py 181 182 183 184 185 186 class CanManageRun ( Enum ): \"\"\" Permission to run and/or manage runs for the job. \"\"\" canmanagerun = \"CAN_MANAGE_RUN\" CanView Permission to view the settings of the job. Source code in prefect_databricks/models/jobs.py 189 190 191 192 193 194 class CanView ( Enum ): \"\"\" Permission to view the settings of the job. \"\"\" canview = \"CAN_VIEW\" ClusterInstance See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 class ClusterInstance ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False cluster_id : Optional [ str ] = Field ( None , description = ( \"The canonical identifier for the cluster used by a run. This field is\" \" always available for runs on existing clusters. For runs on new clusters,\" \" it becomes available once the cluster is created. This value can be used\" \" to view logs by browsing to `/#setting/sparkui/$cluster_id/driver-logs`.\" \" The logs continue to be available after the run completes. \\n\\n The\" \" response won\u2019t include this field if the identifier is not available yet.\" ), example = \"0923-164208-meows279\" , ) spark_context_id : Optional [ str ] = Field ( None , description = ( \"The canonical identifier for the Spark context used by a run. This field\" \" is filled in once the run begins execution. This value can be used to\" \" view the Spark UI by browsing to\" \" `/#setting/sparkui/$cluster_id/$spark_context_id`. The Spark UI continues\" \" to be available after the run has completed. \\n\\n The response won\u2019t\" \" include this field if the identifier is not available yet.\" ), ) ClusterLogConf See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 class ClusterLogConf ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False dbfs : Optional [ DbfsStorageInfo ] = Field ( None , description = ( \"DBFS location of cluster log. Destination must be provided. For example,\" ' `{ \"dbfs\" : { \"destination\" : \"dbfs:/home/cluster_log\" } }`' ), ) s3 : Optional [ S3StorageInfo ] = Field ( None , description = ( \"S3 location of cluster log. `destination` and either `region` or\" ' `endpoint` must be provided. For example, `{ \"s3\": { \"destination\" :' ' \"s3://cluster_log_bucket/prefix\", \"region\" : \"us-west-2\" } }`' ), ) ClusterSpec See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 class ClusterSpec ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False existing_cluster_id : Optional [ str ] = Field ( None , description = ( \"If existing_cluster_id, the ID of an existing cluster that is used for all\" \" runs of this job. When running jobs on an existing cluster, you may need\" \" to manually restart the cluster if it stops responding. We suggest\" \" running jobs on new clusters for greater reliability.\" ), example = \"0923-164208-meows279\" , ) libraries : Optional [ List [ Library ]] = Field ( None , description = ( \"An optional list of libraries to be installed on the cluster that executes\" \" the job. The default value is an empty list.\" ), ) new_cluster : Optional [ NewCluster ] = Field ( None , description = ( \"If new_cluster, a description of a cluster that is created for each run.\" ), ) ClusterTag See source code for the fields' description. An object with key value pairs. The key length must be between 1 and 127 UTF-8 characters, inclusive. The value length must be less than or equal to 255 UTF-8 characters. For a list of all restrictions, see AWS Tag Restrictions: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#tag-restrictions Source code in prefect_databricks/models/jobs.py 231 232 233 234 235 236 237 238 239 240 241 242 243 class ClusterTag ( BaseModel ): \"\"\" See source code for the fields' description. An object with key value pairs. The key length must be between 1 and 127 UTF-8 characters, inclusive. The value length must be less than or equal to 255 UTF-8 characters. For a list of all restrictions, see AWS Tag Restrictions: <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#tag-restrictions> \"\"\" pass class Config : extra = Extra . allow allow_mutation = False CronSchedule See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 class CronSchedule ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False pause_status : Optional [ Literal [ \"PAUSED\" , \"UNPAUSED\" ]] = Field ( None , description = \"Indicate whether this schedule is paused or not.\" , example = \"PAUSED\" , ) quartz_cron_expression : str = Field ( ... , description = ( \"A Cron expression using Quartz syntax that describes the schedule for a\" \" job. See [Cron\" \" Trigger](http://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html)\" \" for details. This field is required.\" ), example = \"20 30 * * * ?\" , ) timezone_id : str = Field ( ... , description = ( \"A Java timezone ID. The schedule for a job is resolved with respect to\" \" this timezone. See [Java\" \" TimeZone](https://docs.oracle.com/javase/7/docs/api/java/util/TimeZone.html)\" \" for details. This field is required.\" ), example = \"Europe/London\" , ) DbfsStorageInfo See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 282 283 284 285 286 287 288 289 290 291 292 293 class DbfsStorageInfo ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False destination : Optional [ str ] = Field ( None , description = \"DBFS destination. Example: `dbfs:/my/path`\" ) DbtOutput See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 class DbtOutput ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False artifacts_headers : Optional [ Dict [ str , Any ]] = Field ( None , description = ( \"An optional map of headers to send when retrieving the artifact from the\" \" `artifacts_link`.\" ), ) artifacts_link : Optional [ str ] = Field ( None , description = ( \"A pre-signed URL to download the (compressed) dbt artifacts. This link is\" \" valid for a limited time (30 minutes). This information is only available\" \" after the run has finished.\" ), ) DbtTask See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 class DbtTask ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False commands : List = Field ( ... , description = ( \"A list of dbt commands to execute. All commands must start with `dbt`.\" \" This parameter must not be empty. A maximum of up to 10 commands can be\" \" provided.\" ), example = [ \"dbt deps\" , \"dbt seed\" , \"dbt run --models 123\" ], ) profiles_directory : Optional [ str ] = Field ( None , description = ( \"Optional (relative) path to the profiles directory. Can only be specified\" \" if no warehouse_id is specified. If no warehouse_id is specified and this\" \" folder is unset, the root directory is used.\" ), ) project_directory : Optional [ str ] = Field ( None , description = ( \"Optional (relative) path to the project directory, if no value is\" \" provided, the root of the git repository is used.\" ), ) schema_ : Optional [ str ] = Field ( None , alias = \"schema\" , description = ( \"Optional schema to write to. This parameter is only used when a\" \" warehouse_id is also provided. If not provided, the `default` schema is\" \" used.\" ), ) warehouse_id : Optional [ str ] = Field ( None , description = ( \"ID of the SQL warehouse to connect to. If provided, we automatically\" \" generate and provide the profile and connection details to dbt. It can be\" \" overridden on a per-command basis by using the `--profiles-dir` command\" \" line argument.\" ), example = \"30dade0507d960d1\" , ) FileStorageInfo See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 376 377 378 379 380 381 382 383 384 385 386 387 class FileStorageInfo ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False destination : Optional [ str ] = Field ( None , description = \"File destination. Example: `file:/my/file.sh`\" ) GitSnapshot See source code for the fields' description. Read-only state of the remote repository at the time the job was run. This field is only included on job runs. Source code in prefect_databricks/models/jobs.py 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 class GitSnapshot ( BaseModel ): \"\"\" See source code for the fields' description. Read-only state of the remote repository at the time the job was run. This field is only included on job runs. \"\"\" class Config : extra = Extra . allow allow_mutation = False used_commit : Optional [ str ] = Field ( None , description = ( \"Commit that was used to execute the run. If git_branch was specified, this\" \" points to the HEAD of the branch at the time of the run; if git_tag was\" \" specified, this points to the commit the tag points to.\" ), example = \"4506fdf41e9fa98090570a34df7a5bce163ff15f\" , ) GitSource See source code for the fields' description. This functionality is in Public Preview. An optional specification for a remote repository containing the notebooks used by this job's notebook tasks. Source code in prefect_databricks/models/jobs.py 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 class GitSource ( BaseModel ): \"\"\" See source code for the fields' description. This functionality is in Public Preview. An optional specification for a remote repository containing the notebooks used by this job's notebook tasks. \"\"\" class Config : extra = Extra . allow allow_mutation = False git_branch : Optional [ str ] = Field ( None , description = ( \"Name of the branch to be checked out and used by this job. This field\" \" cannot be specified in conjunction with git_tag or git_commit. \\n The\" \" maximum length is 255 characters.\" ), example = \"main\" , ) git_commit : Optional [ str ] = Field ( None , description = ( \"Commit to be checked out and used by this job. This field cannot be\" \" specified in conjunction with git_branch or git_tag. \\n The maximum length\" \" is 64 characters.\" ), example = \"e0056d01\" , ) git_provider : Optional [ Literal [ \"gitHub\" , \"bitbucketCloud\" , \"azureDevOpsServices\" , \"gitHubEnterprise\" , \"bitbucketServer\" , \"gitLab\" , \"gitLabEnterpriseEdition\" , \"awsCodeCommit\" , ] ] = Field ( None , description = ( \"Unique identifier of the service used to host the Git repository. The\" \" value is case insensitive.\" ), example = \"github\" , ) git_snapshot : Optional [ GitSnapshot ] = None git_tag : Optional [ str ] = Field ( None , description = ( \"Name of the tag to be checked out and used by this job. This field cannot\" \" be specified in conjunction with git_branch or git_commit. \\n The maximum\" \" length is 255 characters.\" ), example = \"release-1.0.0\" , ) git_url : Optional [ str ] = Field ( None , description = ( \"URL of the repository to be cloned by this job. \\n The maximum length is 300\" \" characters.\" ), example = \"https://github.com/databricks/databricks-cli\" , ) GitSource1 See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 class GitSource1 ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False __root__ : Union [ GitSource , Any , Any , Any ] = Field ( ... , description = ( \"This functionality is in Public Preview. \\n\\n An optional specification for\" \" a remote repository containing the notebooks used by this job's notebook\" \" tasks.\" ), example = { \"git_branch\" : \"main\" , \"git_provider\" : \"gitHub\" , \"git_url\" : \"https://github.com/databricks/databricks-cli\" , }, ) GroupName See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 class GroupName ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False __root__ : str = Field ( ... , description = ( \"Group name. There are two built-in groups: `users` for all users, and\" \" `admins` for administrators.\" ), example = \"users\" , ) InitScriptInfo See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 class InitScriptInfo ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False s3 : Optional [ S3StorageInfo ] = Field ( None , alias = \"S3\" , description = ( \"S3 location of init script. Destination and either region or endpoint must\" ' be provided. For example, `{ \"s3\": { \"destination\" :' ' \"s3://init_script_bucket/prefix\", \"region\" : \"us-west-2\" } }`' ), ) dbfs : Optional [ DbfsStorageInfo ] = Field ( None , description = ( \"DBFS location of init script. Destination must be provided. For example,\" ' `{ \"dbfs\" : { \"destination\" : \"dbfs:/home/init_script\" } }`' ), ) file : Optional [ FileStorageInfo ] = Field ( None , description = ( \"File location of init script. Destination must be provided. For example,\" ' `{ \"file\" : { \"destination\" : \"file:/my/local/file.sh\" } }`' ), ) IsOwner Perimssion that represents ownership of the job. Source code in prefect_databricks/models/jobs.py 525 526 527 528 529 530 class IsOwner ( Enum ): \"\"\" Perimssion that represents ownership of the job. \"\"\" isowner = \"IS_OWNER\" Job See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 2897 2898 2899 2900 2901 2902 2903 2904 2905 2906 2907 2908 2909 2910 2911 2912 2913 2914 2915 2916 2917 2918 2919 2920 2921 2922 2923 2924 2925 2926 2927 2928 2929 2930 2931 class Job ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False created_time : Optional [ int ] = Field ( None , description = ( \"The time at which this job was created in epoch milliseconds (milliseconds\" \" since 1/1/1970 UTC).\" ), example = 1601370337343 , ) creator_user_name : Optional [ str ] = Field ( None , description = ( \"The creator user name. This field won\u2019t be included in the response if the\" \" user has already been deleted.\" ), example = \"user.name@databricks.com\" , ) job_id : Optional [ int ] = Field ( None , description = \"The canonical identifier for this job.\" , example = 11223344 ) settings : Optional [ JobSettings ] = Field ( None , description = ( \"Settings for this job and all of its runs. These settings can be updated\" \" using the `resetJob` method.\" ), ) JobCluster See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 class JobCluster ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False job_cluster_key : str = Field ( ... , description = ( \"A unique name for the job cluster. This field is required and must be\" \" unique within the job. \\n `JobTaskSettings` may refer to this field to\" \" determine which cluster to launch for the task execution.\" ), example = \"auto_scaling_cluster\" , max_length = 100 , min_length = 1 , regex = \"^[ \\\\ w \\\\ -]+$\" , ) new_cluster : Optional [ NewCluster ] = None JobEmailNotifications See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 class JobEmailNotifications ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False no_alert_for_skipped_runs : Optional [ bool ] = Field ( None , description = ( \"If true, do not send email to recipients specified in `on_failure` if the\" \" run is skipped.\" ), example = False , ) on_failure : Optional [ List [ str ]] = Field ( None , description = ( \"A list of email addresses to be notified when a run unsuccessfully\" \" completes. A run is considered to have completed unsuccessfully if it\" \" ends with an `INTERNAL_ERROR` `life_cycle_state` or a `SKIPPED`,\" \" `FAILED`, or `TIMED_OUT` result_state. If this is not specified on job\" \" creation, reset, or update the list is empty, and notifications are not\" \" sent.\" ), example = [ \"user.name@databricks.com\" ], ) on_start : Optional [ List [ str ]] = Field ( None , description = ( \"A list of email addresses to be notified when a run begins. If not\" \" specified on job creation, reset, or update, the list is empty, and\" \" notifications are not sent.\" ), example = [ \"user.name@databricks.com\" ], ) on_success : Optional [ List [ str ]] = Field ( None , description = ( \"A list of email addresses to be notified when a run successfully\" \" completes. A run is considered to have completed successfully if it ends\" \" with a `TERMINATED` `life_cycle_state` and a `SUCCESSFUL` result_state.\" \" If not specified on job creation, reset, or update, the list is empty,\" \" and notifications are not sent.\" ), example = [ \"user.name@databricks.com\" ], ) JobSettings See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 2427 2428 2429 2430 2431 2432 2433 2434 2435 2436 2437 2438 2439 2440 2441 2442 2443 2444 2445 2446 2447 2448 2449 2450 2451 2452 2453 2454 2455 2456 2457 2458 2459 2460 2461 2462 2463 2464 2465 2466 2467 2468 2469 2470 2471 2472 2473 2474 2475 2476 2477 2478 2479 2480 2481 2482 2483 2484 2485 2486 2487 2488 2489 2490 2491 2492 2493 2494 2495 2496 2497 2498 2499 2500 2501 2502 2503 2504 2505 2506 2507 2508 2509 2510 2511 2512 2513 2514 2515 2516 2517 2518 2519 2520 2521 2522 2523 2524 2525 2526 2527 2528 2529 2530 2531 2532 2533 2534 2535 2536 2537 2538 2539 2540 2541 2542 2543 2544 2545 2546 2547 2548 2549 2550 2551 2552 2553 2554 2555 2556 2557 2558 2559 2560 2561 2562 2563 2564 2565 2566 2567 2568 2569 2570 2571 2572 2573 2574 2575 2576 2577 2578 2579 2580 2581 2582 2583 2584 2585 2586 2587 2588 2589 2590 2591 2592 2593 2594 2595 2596 class JobSettings ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False email_notifications : Optional [ JobEmailNotifications ] = Field ( None , description = ( \"An optional set of email addresses that is notified when runs of this job\" \" begin or complete as well as when this job is deleted. The default\" \" behavior is to not send any emails.\" ), ) format : Optional [ Literal [ \"SINGLE_TASK\" , \"MULTI_TASK\" ]] = Field ( None , description = ( \"Used to tell what is the format of the job. This field is ignored in\" \" Create/Update/Reset calls. When using the Jobs API 2.1 this value is\" ' always set to `\"MULTI_TASK\"`.' ), example = \"MULTI_TASK\" , ) git_source : Optional [ GitSource1 ] = Field ( None , description = ( \"This functionality is in Public Preview. \\n\\n An optional specification for\" \" a remote repository containing the notebooks used by this job's notebook\" \" tasks.\" ), example = { \"git_branch\" : \"main\" , \"git_provider\" : \"gitHub\" , \"git_url\" : \"https://github.com/databricks/databricks-cli\" , }, ) job_clusters : Optional [ List [ JobCluster ]] = Field ( None , description = ( \"A list of job cluster specifications that can be shared and reused by\" \" tasks of this job. Libraries cannot be declared in a shared job cluster.\" \" You must declare dependent libraries in task settings.\" ), example = [ { \"job_cluster_key\" : \"auto_scaling_cluster\" , \"new_cluster\" : { \"autoscale\" : { \"max_workers\" : 16 , \"min_workers\" : 2 }, \"aws_attributes\" : { \"availability\" : \"SPOT\" , \"zone_id\" : \"us-west-2a\" }, \"node_type_id\" : \"i3.xlarge\" , \"spark_conf\" : { \"spark.speculation\" : True }, \"spark_version\" : \"7.3.x-scala2.12\" , }, } ], max_items = 100 , ) max_concurrent_runs : Optional [ int ] = Field ( None , description = ( \"An optional maximum allowed number of concurrent runs of the job. \\n\\n Set\" \" this value if you want to be able to execute multiple runs of the same\" \" job concurrently. This is useful for example if you trigger your job on a\" \" frequent schedule and want to allow consecutive runs to overlap with each\" \" other, or if you want to trigger multiple runs which differ by their\" \" input parameters. \\n\\n This setting affects only new runs. For example,\" \" suppose the job\u2019s concurrency is 4 and there are 4 concurrent active\" \" runs. Then setting the concurrency to 3 won\u2019t kill any of the active\" \" runs. However, from then on, new runs are skipped unless there are fewer\" \" than 3 active runs. \\n\\n This value cannot exceed 1000 \\\\ . Setting this\" \" value to 0 causes all new runs to be skipped. The default behavior is to\" \" allow only 1 concurrent run.\" ), example = 10 , ) name : Optional [ str ] = Field ( \"Untitled\" , description = \"An optional name for the job.\" , example = \"A multitask job\" , ) schedule : Optional [ CronSchedule ] = Field ( None , description = ( \"An optional periodic schedule for this job. The default behavior is that\" \" the job only runs when triggered by clicking \u201cRun Now\u201d in the Jobs UI or\" \" sending an API request to `runNow`.\" ), ) tags : Optional [ Dict [ str , Any ]] = Field ( \" {} \" , description = ( \"A map of tags associated with the job. These are forwarded to the cluster\" \" as cluster tags for jobs clusters, and are subject to the same\" \" limitations as cluster tags. A maximum of 25 tags can be added to the\" \" job.\" ), example = { \"cost-center\" : \"engineering\" , \"team\" : \"jobs\" }, ) tasks : Optional [ List [ JobTaskSettings ]] = Field ( None , description = \"A list of task specifications to be executed by this job.\" , example = [ { \"depends_on\" : [], \"description\" : \"Extracts session data from events\" , \"existing_cluster_id\" : \"0923-164208-meows279\" , \"libraries\" : [{ \"jar\" : \"dbfs:/mnt/databricks/Sessionize.jar\" }], \"max_retries\" : 3 , \"min_retry_interval_millis\" : 2000 , \"retry_on_timeout\" : False , \"spark_jar_task\" : { \"main_class_name\" : \"com.databricks.Sessionize\" , \"parameters\" : [ \"--data\" , \"dbfs:/path/to/data.json\" ], }, \"task_key\" : \"Sessionize\" , \"timeout_seconds\" : 86400 , }, { \"depends_on\" : [], \"description\" : \"Ingests order data\" , \"job_cluster_key\" : \"auto_scaling_cluster\" , \"libraries\" : [{ \"jar\" : \"dbfs:/mnt/databricks/OrderIngest.jar\" }], \"max_retries\" : 3 , \"min_retry_interval_millis\" : 2000 , \"retry_on_timeout\" : False , \"spark_jar_task\" : { \"main_class_name\" : \"com.databricks.OrdersIngest\" , \"parameters\" : [ \"--data\" , \"dbfs:/path/to/order-data.json\" ], }, \"task_key\" : \"Orders_Ingest\" , \"timeout_seconds\" : 86400 , }, { \"depends_on\" : [ { \"task_key\" : \"Orders_Ingest\" }, { \"task_key\" : \"Sessionize\" }, ], \"description\" : \"Matches orders with user sessions\" , \"max_retries\" : 3 , \"min_retry_interval_millis\" : 2000 , \"new_cluster\" : { \"autoscale\" : { \"max_workers\" : 16 , \"min_workers\" : 2 }, \"aws_attributes\" : { \"availability\" : \"SPOT\" , \"zone_id\" : \"us-west-2a\" }, \"node_type_id\" : \"i3.xlarge\" , \"spark_conf\" : { \"spark.speculation\" : True }, \"spark_version\" : \"7.3.x-scala2.12\" , }, \"notebook_task\" : { \"base_parameters\" : { \"age\" : \"35\" , \"name\" : \"John Doe\" }, \"notebook_path\" : \"/Users/user.name@databricks.com/Match\" , \"source\" : \"WORKSPACE\" , }, \"retry_on_timeout\" : False , \"task_key\" : \"Match\" , \"timeout_seconds\" : 86400 , }, ], max_items = 100 , ) timeout_seconds : Optional [ int ] = Field ( None , description = ( \"An optional timeout applied to each run of this job. The default behavior\" \" is to have no timeout.\" ), example = 86400 , ) JobTaskSettings See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1994 1995 1996 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048 2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 2082 2083 2084 2085 2086 2087 2088 2089 2090 2091 2092 2093 2094 2095 2096 2097 2098 2099 2100 2101 2102 2103 2104 2105 2106 2107 2108 2109 2110 2111 2112 2113 2114 2115 2116 2117 2118 2119 2120 2121 2122 2123 2124 2125 2126 2127 2128 2129 2130 2131 class JobTaskSettings ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False dbt_task : Optional [ DbtTask ] = Field ( None , description = ( \"If dbt_task, indicates that this must execute a dbt task. It requires both\" \" Databricks SQL and the ability to use a Serverless SQL warehouse.\" ), ) depends_on : Optional [ TaskDependencies ] = None description : Optional [ TaskDescription ] = None email_notifications : Optional [ JobEmailNotifications ] = Field ( None , description = ( \"An optional set of email addresses that is notified when runs of this task\" \" begin or complete as well as when this task is deleted. The default\" \" behavior is to not send any emails.\" ), ) existing_cluster_id : Optional [ str ] = Field ( None , description = ( \"If existing_cluster_id, the ID of an existing cluster that is used for all\" \" runs of this task. When running tasks on an existing cluster, you may\" \" need to manually restart the cluster if it stops responding. We suggest\" \" running jobs on new clusters for greater reliability.\" ), example = \"0923-164208-meows279\" , ) job_cluster_key : Optional [ str ] = Field ( None , description = ( \"If job_cluster_key, this task is executed reusing the cluster specified in\" \" `job.settings.job_clusters`.\" ), max_length = 100 , min_length = 1 , regex = \"^[ \\\\ w \\\\ -]+$\" , ) libraries : Optional [ List [ Library ]] = Field ( None , description = ( \"An optional list of libraries to be installed on the cluster that executes\" \" the task. The default value is an empty list.\" ), ) max_retries : Optional [ int ] = Field ( None , description = ( \"An optional maximum number of times to retry an unsuccessful run. A run is\" \" considered to be unsuccessful if it completes with the `FAILED`\" \" result_state or `INTERNAL_ERROR` `life_cycle_state`. The value -1 means\" \" to retry indefinitely and the value 0 means to never retry. The default\" \" behavior is to never retry.\" ), example = 10 , ) min_retry_interval_millis : Optional [ int ] = Field ( None , description = ( \"An optional minimal interval in milliseconds between the start of the\" \" failed run and the subsequent retry run. The default behavior is that\" \" unsuccessful runs are immediately retried.\" ), example = 2000 , ) new_cluster : Optional [ NewCluster ] = Field ( None , description = ( \"If new_cluster, a description of a cluster that is created for each run.\" ), ) notebook_task : Optional [ NotebookTask ] = Field ( None , description = ( \"If notebook_task, indicates that this task must run a notebook. This field\" \" may not be specified in conjunction with spark_jar_task.\" ), ) pipeline_task : Optional [ PipelineTask ] = Field ( None , description = ( \"If pipeline_task, indicates that this task must execute a Pipeline.\" ), ) python_wheel_task : Optional [ PythonWheelTask ] = Field ( None , description = ( \"If python_wheel_task, indicates that this job must execute a PythonWheel.\" ), ) retry_on_timeout : Optional [ bool ] = Field ( None , description = ( \"An optional policy to specify whether to retry a task when it times out.\" \" The default behavior is to not retry on timeout.\" ), example = True , ) spark_jar_task : Optional [ SparkJarTask ] = Field ( None , description = \"If spark_jar_task, indicates that this task must run a JAR.\" ) spark_python_task : Optional [ SparkPythonTask ] = Field ( None , description = ( \"If spark_python_task, indicates that this task must run a Python file.\" ), ) spark_submit_task : Optional [ SparkSubmitTask ] = Field ( None , description = ( \"If spark_submit_task, indicates that this task must be launched by the\" \" spark submit script.\" ), ) sql_task : Optional [ SqlTask ] = Field ( None , description = ( \"If sql_task, indicates that this job must execute a SQL task. It requires\" \" both Databricks SQL and a Serverless SQL warehouse.\" ), ) task_key : TaskKey timeout_seconds : Optional [ int ] = Field ( None , description = ( \"An optional timeout applied to each run of this job task. The default\" \" behavior is to have no timeout.\" ), example = 86400 , ) Library See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 class Library ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False cran : Optional [ RCranLibrary ] = Field ( None , description = \"If cran, specification of a CRAN library to be installed.\" ) egg : Optional [ str ] = Field ( None , description = ( \"If egg, URI of the egg to be installed. DBFS and S3 URIs are supported.\" ' For example: `{ \"egg\": \"dbfs:/my/egg\" }` or `{ \"egg\":' ' \"s3://my-bucket/egg\" }`. If S3 is used, make sure the cluster has read' \" access on the library. You may need to launch the cluster with an\" \" instance profile to access the S3 URI.\" ), example = \"dbfs:/my/egg\" , ) jar : Optional [ str ] = Field ( None , description = ( \"If jar, URI of the JAR to be installed. DBFS and S3 URIs are supported.\" ' For example: `{ \"jar\": \"dbfs:/mnt/databricks/library.jar\" }` or `{ \"jar\":' ' \"s3://my-bucket/library.jar\" }`. If S3 is used, make sure the cluster has' \" read access on the library. You may need to launch the cluster with an\" \" instance profile to access the S3 URI.\" ), example = \"dbfs:/my-jar.jar\" , ) maven : Optional [ MavenLibrary ] = Field ( None , description = ( \"If maven, specification of a Maven library to be installed. For example:\" ' `{ \"coordinates\": \"org.jsoup:jsoup:1.7.2\" }`' ), ) pypi : Optional [ PythonPyPiLibrary ] = Field ( None , description = ( \"If pypi, specification of a PyPI library to be installed. Specifying the\" \" `repo` field is optional and if not specified, the default pip index is\" ' used. For example: `{ \"package\": \"simplejson\", \"repo\":' ' \"https://my-repo.com\" }`' ), ) whl : Optional [ str ] = Field ( None , description = ( \"If whl, URI of the wheel or zipped wheels to be installed. DBFS and S3\" ' URIs are supported. For example: `{ \"whl\": \"dbfs:/my/whl\" }` or `{ \"whl\":' ' \"s3://my-bucket/whl\" }`. If S3 is used, make sure the cluster has read' \" access on the library. You may need to launch the cluster with an\" \" instance profile to access the S3 URI. Also the wheel file name needs to\" \" use the [correct\" \" convention](https://www.python.org/dev/peps/pep-0427/#file-format). If\" \" zipped wheels are to be installed, the file name suffix should be\" \" `.wheelhouse.zip`.\" ), example = \"dbfs:/my/whl\" , ) MavenLibrary See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 class MavenLibrary ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False coordinates : str = Field ( ... , description = ( \"Gradle-style Maven coordinates. For example: `org.jsoup:jsoup:1.7.2`. This\" \" field is required.\" ), example = \"org.jsoup:jsoup:1.7.2\" , ) exclusions : Optional [ List [ str ]] = Field ( None , description = ( 'List of dependences to exclude. For example: `[\"slf4j:slf4j\",' ' \"*:hadoop-client\"]`. \\n\\n Maven dependency exclusions:' \" <https://maven.apache.org/guides/introduction/introduction-to-optional-and-excludes-dependencies.html>.\" ), example = [ \"slf4j:slf4j\" , \"*:hadoop-client\" ], ) repo : Optional [ str ] = Field ( None , description = ( \"Maven repo to install the Maven package from. If omitted, both Maven\" \" Central Repository and Spark Packages are searched.\" ), example = \"https://my-repo.com\" , ) NewCluster See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 class NewCluster ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False autoscale : Optional [ AutoScale ] = Field ( None , description = ( \"If autoscale, the required parameters to automatically scale clusters up\" \" and down based on load.\" ), ) aws_attributes : Optional [ AwsAttributes ] = Field ( None , description = ( \"Attributes related to clusters running on Amazon Web Services. If not\" \" specified at cluster creation, a set of default values is used.\" ), ) cluster_log_conf : Optional [ ClusterLogConf ] = Field ( None , description = ( \"The configuration for delivering Spark logs to a long-term storage\" \" destination. Only one destination can be specified for one cluster. If\" \" the conf is given, the logs are delivered to the destination every `5\" \" mins`. The destination of driver logs is\" \" `<destination>/<cluster-id>/driver`, while the destination of executor\" \" logs is `<destination>/<cluster-id>/executor`.\" ), ) custom_tags : Optional [ ClusterTag ] = Field ( None , description = ( \"An object containing a set of tags for cluster resources. Databricks tags\" \" all cluster resources (such as AWS instances and EBS volumes) with these\" \" tags in addition to default_tags. \\n\\n **Note**: \\n\\n * Tags are not\" \" supported on legacy node types such as compute-optimized and\" \" memory-optimized \\n * Databricks allows at most 45 custom tags\" ), ) driver_instance_pool_id : Optional [ str ] = Field ( None , description = ( \"The optional ID of the instance pool to use for the driver node. You must\" \" also specify `instance_pool_id`. Refer to [Instance Pools\" \" API](https://docs.databricks.com/dev-tools/api/latest/instance-pools.html)\" \" for details.\" ), ) driver_node_type_id : Optional [ str ] = Field ( None , description = ( \"The node type of the Spark driver. This field is optional; if unset, the\" \" driver node type is set as the same value as `node_type_id` defined\" \" above.\" ), ) enable_elastic_disk : Optional [ bool ] = Field ( None , description = ( \"Autoscaling Local Storage: when enabled, this cluster dynamically acquires\" \" additional disk space when its Spark workers are running low on disk\" \" space. This feature requires specific AWS permissions to function\" \" correctly - refer to [Autoscaling local\" \" storage](https://docs.databricks.com/clusters/configure.html#autoscaling-local-storage)\" \" for details.\" ), ) init_scripts : Optional [ List [ InitScriptInfo ]] = Field ( None , description = ( \"The configuration for storing init scripts. Any number of scripts can be\" \" specified. The scripts are executed sequentially in the order provided.\" \" If `cluster_log_conf` is specified, init script logs are sent to\" \" `<destination>/<cluster-id>/init_scripts`.\" ), ) instance_pool_id : Optional [ str ] = Field ( None , description = ( \"The optional ID of the instance pool to use for cluster nodes. If\" \" `driver_instance_pool_id` is present, `instance_pool_id` is used for\" \" worker nodes only. Otherwise, it is used for both the driver node and\" \" worker nodes. Refer to [Instance Pools\" \" API](https://docs.databricks.com/dev-tools/api/latest/instance-pools.html)\" \" for details.\" ), ) node_type_id : Optional [ str ] = Field ( None , description = ( \"This field encodes, through a single value, the resources available to\" \" each of the Spark nodes in this cluster. For example, the Spark nodes can\" \" be provisioned and optimized for memory or compute intensive workloads A\" \" list of available node types can be retrieved by using the [List node\" \" types](https://docs.databricks.com/dev-tools/api/latest/clusters.html#list-node-types)\" \" API call. This field is required, unless `instance_pool_id` is specified.\" ), ) num_workers : Optional [ int ] = Field ( None , description = ( \"If num_workers, number of worker nodes that this cluster must have. A\" \" cluster has one Spark driver and num_workers executors for a total of\" \" num_workers + 1 Spark nodes. When reading the properties of a cluster,\" \" this field reflects the desired number of workers rather than the actual\" \" current number of workers. For example, if a cluster is resized from 5 to\" \" 10 workers, this field immediately updates to reflect the target size of\" \" 10 workers, whereas the workers listed in `spark_info` gradually increase\" \" from 5 to 10 as the new nodes are provisioned.\" ), ) policy_id : Optional [ str ] = Field ( None , description = ( \"A [cluster\" \" policy](https://docs.databricks.com/dev-tools/api/latest/policies.html) ID.\" ), ) spark_conf : Optional [ SparkConfPair ] = Field ( None , description = ( \"An object containing a set of optional, user-specified Spark configuration\" \" key-value pairs. You can also pass in a string of extra JVM options to\" \" the driver and the executors via `spark.driver.extraJavaOptions` and\" \" `spark.executor.extraJavaOptions` respectively. \\n\\n Example Spark confs:\" ' `{\"spark.speculation\": true, \"spark.streaming.ui.retainedBatches\": 5}` or' ' `{\"spark.driver.extraJavaOptions\": \"-verbose:gc -XX:+PrintGCDetails\"}`' ), ) spark_env_vars : Optional [ SparkEnvPair ] = Field ( None , description = ( \"An object containing a set of optional, user-specified environment\" \" variable key-value pairs. Key-value pair of the form (X,Y) are exported\" \" as is (for example, `export X='Y'`) while launching the driver and\" \" workers. \\n\\n To specify an additional set of `SPARK_DAEMON_JAVA_OPTS`, we\" \" recommend appending them to `$SPARK_DAEMON_JAVA_OPTS` as shown in the\" \" following example. This ensures that all default databricks managed\" \" environmental variables are included as well. \\n\\n Example Spark\" ' environment variables: `{\"SPARK_WORKER_MEMORY\": \"28000m\",' ' \"SPARK_LOCAL_DIRS\": \"/local_disk0\"}` or `{\"SPARK_DAEMON_JAVA_OPTS\":' ' \"$SPARK_DAEMON_JAVA_OPTS -Dspark.shuffle.service.enabled=true\"}`' ), ) spark_version : str = Field ( ... , description = ( \"The Spark version of the cluster. A list of available Spark versions can\" \" be retrieved by using the [Runtime\" \" versions](https://docs.databricks.com/dev-tools/api/latest/clusters.html#runtime-versions)\" \" API call. This field is required.\" ), ) ssh_public_keys : Optional [ List [ str ]] = Field ( None , description = ( \"SSH public key contents that are added to each Spark node in this cluster.\" \" The corresponding private keys can be used to login with the user name\" \" `ubuntu` on port `2200`. Up to 10 keys can be specified.\" ), ) NotebookOutput See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 class NotebookOutput ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False result : Optional [ str ] = Field ( None , description = ( \"The value passed to\" \" [dbutils.notebook.exit()](https://docs.databricks.com/notebooks/notebook-workflows.html#notebook-workflows-exit).\" \" Databricks restricts this API to return the first 5 MB of the value. For\" \" a larger result, your job can store the results in a cloud storage\" \" service. This field is absent if `dbutils.notebook.exit()` was never\" \" called.\" ), example = \"An arbitrary string passed by calling dbutils.notebook.exit(...)\" , ) truncated : Optional [ bool ] = Field ( None , description = \"Whether or not the result was truncated.\" , example = False ) NotebookTask See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 class NotebookTask ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False base_parameters : Optional [ Dict [ str , Any ]] = Field ( None , description = ( \"Base parameters to be used for each run of this job. If the run is\" \" initiated by a call to\" \" [`run-now`](https://docs.databricks.com/dev-tools/api/latest/jobs.html#operation/JobsRunNow)\" \" with parameters specified, the two parameters maps are merged. If the\" \" same key is specified in `base_parameters` and in `run-now`, the value\" \" from `run-now` is used. \\n\\n Use [Task parameter\" \" variables](https://docs.databricks.com/jobs.html#parameter-variables) to\" \" set parameters containing information about job runs. \\n\\n If the notebook\" \" takes a parameter that is not specified in the job\u2019s `base_parameters` or\" \" the `run-now` override parameters, the default value from the notebook is\" \" used. \\n\\n Retrieve these parameters in a notebook using\" \" [dbutils.widgets.get](https://docs.databricks.com/dev-tools/databricks-utils.html#dbutils-widgets).\" ), example = { \"age\" : 35 , \"name\" : \"John Doe\" }, ) notebook_path : str = Field ( ... , description = ( \"The path of the notebook to be run in the Databricks workspace or remote\" \" repository. For notebooks stored in the Databricks workspace, the path\" \" must be absolute and begin with a slash. For notebooks stored in a remote\" \" repository, the path must be relative. This field is required.\" ), example = \"/Users/user.name@databricks.com/notebook_to_run\" , ) source : Optional [ Literal [ \"WORKSPACE\" , \"GIT\" ]] = Field ( None , description = ( \"Optional location type of the notebook. When set to `WORKSPACE`, the\" \" notebook will be retrieved from the local Databricks workspace. When set\" \" to `GIT`, the notebook will be retrieved from a Git repository defined in\" \" `git_source`. If the value is empty, the task will use `GIT` if\" \" `git_source` is defined and `WORKSPACE` otherwise.\" ), example = \"WORKSPACE\" , ) PermissionLevel See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 696 697 698 699 700 701 702 703 704 705 706 707 class PermissionLevel ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False __root__ : Union [ CanManage , CanManageRun , CanView , IsOwner ] = Field ( ... , description = \"Permission level to grant.\" ) PermissionLevelForGroup See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 710 711 712 713 714 715 716 717 718 719 720 721 class PermissionLevelForGroup ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False __root__ : Union [ CanManage , CanManageRun , CanView ] = Field ( ... , description = \"Permission level to grant.\" ) PipelineParams See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 855 856 857 858 859 860 861 862 863 864 865 866 class PipelineParams ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False full_refresh : Optional [ bool ] = Field ( None , description = \"If true, triggers a full refresh on the delta live table.\" ) PipelineTask See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 class PipelineTask ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False full_refresh : Optional [ bool ] = Field ( False , description = ( \"If true, a full refresh will be triggered on the delta live table.\" ), ) pipeline_id : Optional [ str ] = Field ( None , description = \"The full name of the pipeline task to execute.\" , example = \"a12cd3e4-0ab1-1abc-1a2b-1a2bcd3e4fg5\" , ) PythonPyPiLibrary See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 class PythonPyPiLibrary ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False package : str = Field ( ... , description = ( \"The name of the PyPI package to install. An optional exact version\" \" specification is also supported. Examples: `simplejson` and\" \" `simplejson==3.8.0`. This field is required.\" ), example = \"simplejson==3.8.0\" , ) repo : Optional [ str ] = Field ( None , description = ( \"The repository where the package can be found. If not specified, the\" \" default pip index is used.\" ), example = \"https://my-repo.com\" , ) PythonWheelTask See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 class PythonWheelTask ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False entry_point : Optional [ str ] = Field ( None , description = ( \"Named entry point to use, if it does not exist in the metadata of the\" \" package it executes the function from the package directly using\" \" `$packageName.$entryPoint()`\" ), ) named_parameters : Optional [ Dict [ str , Any ]] = Field ( None , description = ( \"Command-line parameters passed to Python wheel task in the form of\" ' `[\"--name=task\", \"--data=dbfs:/path/to/data.json\"]`. Leave it empty if' \" `parameters` is not null.\" ), example = { \"data\" : \"dbfs:/path/to/data.json\" , \"name\" : \"task\" }, ) package_name : Optional [ str ] = Field ( None , description = \"Name of the package to execute\" ) parameters : Optional [ List [ str ]] = Field ( None , description = ( \"Command-line parameters passed to Python wheel task. Leave it empty if\" \" `named_parameters` is not null.\" ), example = [ \"--name=task\" , \"one\" , \"two\" ], ) RCranLibrary See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 class RCranLibrary ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False package : str = Field ( ... , description = \"The name of the CRAN package to install. This field is required.\" , example = \"geojson\" , ) repo : Optional [ str ] = Field ( None , description = ( \"The repository where the package can be found. If not specified, the\" \" default CRAN repo is used.\" ), example = \"https://my-repo.com\" , ) RepairHistoryItem See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 class RepairHistoryItem ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False end_time : Optional [ int ] = Field ( None , description = \"The end time of the (repaired) run.\" , example = 1625060863413 ) id : Optional [ int ] = Field ( None , description = ( \"The ID of the repair. Only returned for the items that represent a repair\" \" in `repair_history`.\" ), example = 734650698524280 , ) start_time : Optional [ int ] = Field ( None , description = \"The start time of the (repaired) run.\" , example = 1625060460483 ) state : Optional [ RunState ] = None task_run_ids : Optional [ List [ int ]] = Field ( None , description = ( \"The run IDs of the task runs that ran as part of this repair history item.\" ), example = [ 1106460542112844 , 988297789683452 ], ) type : Optional [ Literal [ \"ORIGINAL\" , \"REPAIR\" ]] = Field ( None , description = ( \"The repair history item type. Indicates whether a run is the original run\" \" or a repair run.\" ), ) Run See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 2599 2600 2601 2602 2603 2604 2605 2606 2607 2608 2609 2610 2611 2612 2613 2614 2615 2616 2617 2618 2619 2620 2621 2622 2623 2624 2625 2626 2627 2628 2629 2630 2631 2632 2633 2634 2635 2636 2637 2638 2639 2640 2641 2642 2643 2644 2645 2646 2647 2648 2649 2650 2651 2652 2653 2654 2655 2656 2657 2658 2659 2660 2661 2662 2663 2664 2665 2666 2667 2668 2669 2670 2671 2672 2673 2674 2675 2676 2677 2678 2679 2680 2681 2682 2683 2684 2685 2686 2687 2688 2689 2690 2691 2692 2693 2694 2695 2696 2697 2698 2699 2700 2701 2702 2703 2704 2705 2706 2707 2708 2709 2710 2711 2712 2713 2714 2715 2716 2717 2718 2719 2720 2721 2722 2723 2724 2725 2726 2727 2728 2729 2730 2731 2732 2733 2734 2735 2736 2737 2738 2739 2740 2741 2742 2743 2744 2745 2746 2747 2748 2749 2750 2751 2752 2753 2754 2755 2756 2757 2758 2759 2760 2761 2762 2763 2764 2765 2766 2767 2768 2769 2770 2771 2772 2773 2774 2775 2776 2777 2778 2779 2780 2781 2782 2783 2784 2785 2786 2787 2788 2789 2790 2791 2792 2793 2794 2795 2796 2797 2798 2799 2800 2801 2802 2803 2804 2805 2806 2807 2808 2809 2810 2811 2812 2813 2814 2815 2816 2817 2818 2819 2820 2821 2822 2823 2824 2825 2826 2827 2828 2829 2830 2831 2832 2833 2834 2835 2836 2837 2838 2839 2840 2841 2842 2843 2844 2845 2846 2847 2848 2849 2850 2851 2852 2853 2854 2855 2856 2857 2858 2859 2860 2861 2862 2863 2864 2865 2866 2867 2868 2869 2870 2871 2872 2873 2874 2875 2876 2877 2878 2879 2880 2881 2882 2883 2884 2885 2886 2887 2888 2889 2890 2891 2892 2893 2894 class Run ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False attempt_number : Optional [ int ] = Field ( None , description = ( \"The sequence number of this run attempt for a triggered job run. The\" \" initial attempt of a run has an attempt_number of 0 \\\\ . If the initial run\" \" attempt fails, and the job has a retry policy (`max_retries` \\\\ > 0),\" \" subsequent runs are created with an `original_attempt_run_id` of the\" \" original attempt\u2019s ID and an incrementing `attempt_number`. Runs are\" \" retried only until they succeed, and the maximum `attempt_number` is the\" \" same as the `max_retries` value for the job.\" ), example = 0 , ) cleanup_duration : Optional [ int ] = Field ( None , description = ( \"The time in milliseconds it took to terminate the cluster and clean up any\" \" associated artifacts. The total duration of the run is the sum of the\" \" setup_duration, the execution_duration, and the cleanup_duration.\" ), example = 0 , ) cluster_instance : Optional [ ClusterInstance ] = Field ( None , description = ( \"The cluster used for this run. If the run is specified to use a new\" \" cluster, this field is set once the Jobs service has requested a cluster\" \" for the run.\" ), ) cluster_spec : Optional [ ClusterSpec ] = Field ( None , description = ( \"A snapshot of the job\u2019s cluster specification when this run was created.\" ), ) creator_user_name : Optional [ str ] = Field ( None , description = ( \"The creator user name. This field won\u2019t be included in the response if the\" \" user has already been deleted.\" ), example = \"user.name@databricks.com\" , ) end_time : Optional [ int ] = Field ( None , description = ( \"The time at which this run ended in epoch milliseconds (milliseconds since\" \" 1/1/1970 UTC). This field is set to 0 if the job is still running.\" ), example = 1625060863413 , ) execution_duration : Optional [ int ] = Field ( None , description = ( \"The time in milliseconds it took to execute the commands in the JAR or\" \" notebook until they completed, failed, timed out, were cancelled, or\" \" encountered an unexpected error.\" ), example = 0 , ) git_source : Optional [ GitSource1 ] = Field ( None , description = ( \"This functionality is in Public Preview. \\n\\n An optional specification for\" \" a remote repository containing the notebooks used by this job's notebook\" \" tasks.\" ), example = { \"git_branch\" : \"main\" , \"git_provider\" : \"gitHub\" , \"git_url\" : \"https://github.com/databricks/databricks-cli\" , }, ) job_clusters : Optional [ List [ JobCluster ]] = Field ( None , description = ( \"A list of job cluster specifications that can be shared and reused by\" \" tasks of this job. Libraries cannot be declared in a shared job cluster.\" \" You must declare dependent libraries in task settings.\" ), example = [ { \"job_cluster_key\" : \"auto_scaling_cluster\" , \"new_cluster\" : { \"autoscale\" : { \"max_workers\" : 16 , \"min_workers\" : 2 }, \"aws_attributes\" : { \"availability\" : \"SPOT\" , \"zone_id\" : \"us-west-2a\" }, \"node_type_id\" : \"i3.xlarge\" , \"spark_conf\" : { \"spark.speculation\" : True }, \"spark_version\" : \"7.3.x-scala2.12\" , }, } ], max_items = 100 , ) job_id : Optional [ int ] = Field ( None , description = \"The canonical identifier of the job that contains this run.\" , example = 11223344 , ) number_in_job : Optional [ int ] = Field ( None , deprecated = True , description = ( \"A unique identifier for this job run. This is set to the same value as\" \" `run_id`.\" ), example = 455644833 , ) original_attempt_run_id : Optional [ int ] = Field ( None , description = ( \"If this run is a retry of a prior run attempt, this field contains the\" \" run_id of the original attempt; otherwise, it is the same as the run_id.\" ), example = 455644833 , ) overriding_parameters : Optional [ RunParameters ] = Field ( None , description = \"The parameters used for this run.\" ) run_id : Optional [ int ] = Field ( None , description = ( \"The canonical identifier of the run. This ID is unique across all runs of\" \" all jobs.\" ), example = 455644833 , ) run_name : Optional [ str ] = Field ( \"Untitled\" , description = ( \"An optional name for the run. The maximum allowed length is 4096 bytes in\" \" UTF-8 encoding.\" ), example = \"A multitask job run\" , ) run_page_url : Optional [ str ] = Field ( None , description = \"The URL to the detail page of the run.\" , example = \"https://my-workspace.cloud.databricks.com/#job/11223344/run/123\" , ) run_type : Optional [ RunType ] = None schedule : Optional [ CronSchedule ] = Field ( None , description = ( \"The cron schedule that triggered this run if it was triggered by the\" \" periodic scheduler.\" ), ) setup_duration : Optional [ int ] = Field ( None , description = ( \"The time it took to set up the cluster in milliseconds. For runs that run\" \" on new clusters this is the cluster creation time, for runs that run on\" \" existing clusters this time should be very short.\" ), example = 0 , ) start_time : Optional [ int ] = Field ( None , description = ( \"The time at which this run was started in epoch milliseconds (milliseconds\" \" since 1/1/1970 UTC). This may not be the time when the job task starts\" \" executing, for example, if the job is scheduled to run on a new cluster,\" \" this is the time the cluster creation call is issued.\" ), example = 1625060460483 , ) state : Optional [ RunState ] = Field ( None , description = \"The result and lifecycle states of the run.\" ) tasks : Optional [ List [ RunTask ]] = Field ( None , description = ( \"The list of tasks performed by the run. Each task has its own `run_id`\" \" which you can use to call `JobsGetOutput` to retrieve the run resutls.\" ), example = [ { \"attempt_number\" : 0 , \"cleanup_duration\" : 0 , \"cluster_instance\" : { \"cluster_id\" : \"0923-164208-meows279\" , \"spark_context_id\" : \"4348585301701786933\" , }, \"description\" : \"Ingests order data\" , \"end_time\" : 1629989930171 , \"execution_duration\" : 0 , \"job_cluster_key\" : \"auto_scaling_cluster\" , \"libraries\" : [{ \"jar\" : \"dbfs:/mnt/databricks/OrderIngest.jar\" }], \"run_id\" : 2112892 , \"run_page_url\" : ( \"https://my-workspace.cloud.databricks.com/#job/39832/run/20\" ), \"setup_duration\" : 0 , \"spark_jar_task\" : { \"main_class_name\" : \"com.databricks.OrdersIngest\" , \"run_as_repl\" : True , }, \"start_time\" : 1629989929660 , \"state\" : { \"life_cycle_state\" : \"INTERNAL_ERROR\" , \"result_state\" : \"FAILED\" , \"state_message\" : ( \"Library installation failed for library due to user error.\" \" Error messages: \\n 'Manage' permissions are required to install\" \" libraries on a cluster\" ), \"user_cancelled_or_timedout\" : False , }, \"task_key\" : \"Orders_Ingest\" , }, { \"attempt_number\" : 0 , \"cleanup_duration\" : 0 , \"cluster_instance\" : { \"cluster_id\" : \"0923-164208-meows279\" }, \"depends_on\" : [ { \"task_key\" : \"Orders_Ingest\" }, { \"task_key\" : \"Sessionize\" }, ], \"description\" : \"Matches orders with user sessions\" , \"end_time\" : 1629989930238 , \"execution_duration\" : 0 , \"new_cluster\" : { \"autoscale\" : { \"max_workers\" : 16 , \"min_workers\" : 2 }, \"aws_attributes\" : { \"availability\" : \"SPOT\" , \"zone_id\" : \"us-west-2a\" }, \"node_type_id\" : \"i3.xlarge\" , \"spark_conf\" : { \"spark.speculation\" : True }, \"spark_version\" : \"7.3.x-scala2.12\" , }, \"notebook_task\" : { \"notebook_path\" : \"/Users/user.name@databricks.com/Match\" , \"source\" : \"WORKSPACE\" , }, \"run_id\" : 2112897 , \"run_page_url\" : ( \"https://my-workspace.cloud.databricks.com/#job/39832/run/21\" ), \"setup_duration\" : 0 , \"start_time\" : 0 , \"state\" : { \"life_cycle_state\" : \"SKIPPED\" , \"state_message\" : \"An upstream task failed.\" , \"user_cancelled_or_timedout\" : False , }, \"task_key\" : \"Match\" , }, { \"attempt_number\" : 0 , \"cleanup_duration\" : 0 , \"cluster_instance\" : { \"cluster_id\" : \"0923-164208-meows279\" , \"spark_context_id\" : \"4348585301701786933\" , }, \"description\" : \"Extracts session data from events\" , \"end_time\" : 1629989930144 , \"execution_duration\" : 0 , \"existing_cluster_id\" : \"0923-164208-meows279\" , \"libraries\" : [{ \"jar\" : \"dbfs:/mnt/databricks/Sessionize.jar\" }], \"run_id\" : 2112902 , \"run_page_url\" : ( \"https://my-workspace.cloud.databricks.com/#job/39832/run/22\" ), \"setup_duration\" : 0 , \"spark_jar_task\" : { \"main_class_name\" : \"com.databricks.Sessionize\" , \"run_as_repl\" : True , }, \"start_time\" : 1629989929668 , \"state\" : { \"life_cycle_state\" : \"INTERNAL_ERROR\" , \"result_state\" : \"FAILED\" , \"state_message\" : ( \"Library installation failed for library due to user error.\" \" Error messages: \\n 'Manage' permissions are required to install\" \" libraries on a cluster\" ), \"user_cancelled_or_timedout\" : False , }, \"task_key\" : \"Sessionize\" , }, ], max_items = 100 , ) trigger : Optional [ TriggerType ] = Field ( None , description = \"The type of trigger that fired this run.\" ) RunLifeCycleState * `PENDING` : The run has been triggered . If there is not already an active run of the same job , the cluster and execution context are being prepared . If there is already an active run of the same job , the run immediately transitions into the `SKIPPED` state without preparing any resources . RUNNING : The task of this run is being executed. TERMINATING : The task of this run has completed, and the cluster and execution context are being cleaned up. TERMINATED : The task of this run has completed, and the cluster and execution context have been cleaned up. This state is terminal. SKIPPED : This run was aborted because a previous run of the same job was already active. This state is terminal. INTERNAL_ERROR : An exceptional state that indicates a failure in the Jobs service, such as network failure over a long period. If a run on a new cluster ends in the INTERNAL_ERROR state, the Jobs service terminates the cluster as soon as possible. This state is terminal. Source code in prefect_databricks/models/jobs.py 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 class RunLifeCycleState ( Enum ): \"\"\" * `PENDING`: The run has been triggered. If there is not already an active run of the same job, the cluster and execution context are being prepared. If there is already an active run of the same job, the run immediately transitions into the `SKIPPED` state without preparing any resources. * `RUNNING`: The task of this run is being executed. * `TERMINATING`: The task of this run has completed, and the cluster and execution context are being cleaned up. * `TERMINATED`: The task of this run has completed, and the cluster and execution context have been cleaned up. This state is terminal. * `SKIPPED`: This run was aborted because a previous run of the same job was already active. This state is terminal. * `INTERNAL_ERROR`: An exceptional state that indicates a failure in the Jobs service, such as network failure over a long period. If a run on a new cluster ends in the `INTERNAL_ERROR` state, the Jobs service terminates the cluster as soon as possible. This state is terminal. \"\"\" pending = \"PENDING\" running = \"RUNNING\" terminating = \"TERMINATING\" terminated = \"TERMINATED\" skipped = \"SKIPPED\" internalerror = \"INTERNAL_ERROR\" RunParameters See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 class RunParameters ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False dbt_commands : Optional [ List ] = Field ( None , description = ( \"An array of commands to execute for jobs with the dbt task, for example\" ' `\"dbt_commands\": [\"dbt deps\", \"dbt seed\", \"dbt run\"]`' ), example = [ \"dbt deps\" , \"dbt seed\" , \"dbt run\" ], ) jar_params : Optional [ List [ str ]] = Field ( None , description = ( \"A list of parameters for jobs with Spark JAR tasks, for example\" ' `\"jar_params\": [\"john doe\", \"35\"]`. The parameters are used to invoke the' \" main function of the main class specified in the Spark JAR task. If not\" \" specified upon `run-now`, it defaults to an empty list. jar_params cannot\" \" be specified in conjunction with notebook_params. The JSON representation\" ' of this field (for example `{\"jar_params\":[\"john doe\",\"35\"]}`) cannot' \" exceed 10,000 bytes. \\n\\n Use [Task parameter\" \" variables](https://docs.databricks.com/jobs.html#parameter-variables) to\" \" set parameters containing information about job runs.\" ), example = [ \"john\" , \"doe\" , \"35\" ], ) notebook_params : Optional [ Dict [ str , Any ]] = Field ( None , description = ( \"A map from keys to values for jobs with notebook task, for example\" ' `\"notebook_params\": {\"name\": \"john doe\", \"age\": \"35\"}`. The map is passed' \" to the notebook and is accessible through the\" \" [dbutils.widgets.get](https://docs.databricks.com/dev-tools/databricks-utils.html#dbutils-widgets)\" \" function. \\n\\n If not specified upon `run-now`, the triggered run uses the\" \" job\u2019s base parameters. \\n\\n notebook_params cannot be specified in\" \" conjunction with jar_params. \\n\\n Use [Task parameter\" \" variables](https://docs.databricks.com/jobs.html#parameter-variables) to\" \" set parameters containing information about job runs. \\n\\n The JSON\" \" representation of this field (for example\" ' `{\"notebook_params\":{\"name\":\"john doe\",\"age\":\"35\"}}`) cannot exceed' \" 10,000 bytes.\" ), example = { \"age\" : \"35\" , \"name\" : \"john doe\" }, ) pipeline_params : Optional [ PipelineParams ] = None python_named_params : Optional [ Dict [ str , Any ]] = Field ( None , description = ( \"A map from keys to values for jobs with Python wheel task, for example\" ' `\"python_named_params\": {\"name\": \"task\", \"data\":' ' \"dbfs:/path/to/data.json\"}`.' ), example = { \"data\" : \"dbfs:/path/to/data.json\" , \"name\" : \"task\" }, ) python_params : Optional [ List [ str ]] = Field ( None , description = ( \"A list of parameters for jobs with Python tasks, for example\" ' `\"python_params\": [\"john doe\", \"35\"]`. The parameters are passed to' \" Python file as command-line parameters. If specified upon `run-now`, it\" \" would overwrite the parameters specified in job setting. The JSON\" ' representation of this field (for example `{\"python_params\":[\"john' ' doe\",\"35\"]}`) cannot exceed 10,000 bytes. \\n\\n Use [Task parameter' \" variables](https://docs.databricks.com/jobs.html#parameter-variables) to\" \" set parameters containing information about job\" \" runs. \\n\\n Important \\n\\n These parameters accept only Latin characters\" \" (ASCII character set). Using non-ASCII characters returns an error.\" \" Examples of invalid, non-ASCII characters are Chinese, Japanese kanjis,\" \" and emojis.\" ), example = [ \"john doe\" , \"35\" ], ) spark_submit_params : Optional [ List [ str ]] = Field ( None , description = ( \"A list of parameters for jobs with spark submit task, for example\" ' `\"spark_submit_params\": [\"--class\",' ' \"org.apache.spark.examples.SparkPi\"]`. The parameters are passed to' \" spark-submit script as command-line parameters. If specified upon\" \" `run-now`, it would overwrite the parameters specified in job setting.\" \" The JSON representation of this field (for example\" ' `{\"python_params\":[\"john doe\",\"35\"]}`) cannot exceed 10,000 bytes. \\n\\n Use' \" [Task parameter\" \" variables](https://docs.databricks.com/jobs.html#parameter-variables) to\" \" set parameters containing information about job\" \" runs. \\n\\n Important \\n\\n These parameters accept only Latin characters\" \" (ASCII character set). Using non-ASCII characters returns an error.\" \" Examples of invalid, non-ASCII characters are Chinese, Japanese kanjis,\" \" and emojis.\" ), example = [ \"--class\" , \"org.apache.spark.examples.SparkPi\" ], ) sql_params : Optional [ Dict [ str , Any ]] = Field ( None , description = ( 'A map from keys to values for SQL tasks, for example `\"sql_params\":' ' {\"name\": \"john doe\", \"age\": \"35\"}`. The SQL alert task does not support' \" custom parameters.\" ), example = { \"age\" : \"35\" , \"name\" : \"john doe\" }, ) RunResultState * `SUCCESS` : The task completed successfully . FAILED : The task completed with an error. TIMEDOUT : The run was stopped after reaching the timeout. CANCELED : The run was canceled at user request. Source code in prefect_databricks/models/jobs.py 978 979 980 981 982 983 984 985 986 987 988 989 class RunResultState ( Enum ): \"\"\" * `SUCCESS`: The task completed successfully. * `FAILED`: The task completed with an error. * `TIMEDOUT`: The run was stopped after reaching the timeout. * `CANCELED`: The run was canceled at user request. \"\"\" success = \"SUCCESS\" failed = \"FAILED\" timedout = \"TIMEDOUT\" canceled = \"CANCELED\" RunState See source code for the fields' description. The result and lifecycle state of the run. Source code in prefect_databricks/models/jobs.py 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 class RunState ( BaseModel ): \"\"\" See source code for the fields' description. The result and lifecycle state of the run. \"\"\" class Config : extra = Extra . allow allow_mutation = False life_cycle_state : Optional [ RunLifeCycleState ] = Field ( None , description = ( \"A description of a run\u2019s current location in the run lifecycle. This field\" \" is always available in the response.\" ), ) result_state : Optional [ RunResultState ] = None state_message : Optional [ str ] = Field ( None , description = ( \"A descriptive message for the current state. This field is unstructured,\" \" and its exact format is subject to change.\" ), example = \"\" , ) user_cancelled_or_timedout : Optional [ bool ] = Field ( None , description = ( \"Whether a run was canceled manually by a user or by the scheduler because\" \" the run timed out.\" ), example = False , ) RunSubmitTaskSettings See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 2134 2135 2136 2137 2138 2139 2140 2141 2142 2143 2144 2145 2146 2147 2148 2149 2150 2151 2152 2153 2154 2155 2156 2157 2158 2159 2160 2161 2162 2163 2164 2165 2166 2167 2168 2169 2170 2171 2172 2173 2174 2175 2176 2177 2178 2179 2180 2181 2182 2183 2184 2185 2186 2187 2188 2189 2190 2191 2192 2193 2194 2195 2196 2197 2198 2199 2200 2201 2202 2203 2204 2205 2206 2207 2208 2209 2210 2211 2212 2213 2214 2215 2216 2217 class RunSubmitTaskSettings ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False depends_on : Optional [ TaskDependencies ] = None existing_cluster_id : Optional [ str ] = Field ( None , description = ( \"If existing_cluster_id, the ID of an existing cluster that is used for all\" \" runs of this task. When running tasks on an existing cluster, you may\" \" need to manually restart the cluster if it stops responding. We suggest\" \" running jobs on new clusters for greater reliability.\" ), example = \"0923-164208-meows279\" , ) libraries : Optional [ List [ Library ]] = Field ( None , description = ( \"An optional list of libraries to be installed on the cluster that executes\" \" the task. The default value is an empty list.\" ), ) new_cluster : Optional [ NewCluster ] = Field ( None , description = ( \"If new_cluster, a description of a cluster that is created for each run.\" ), ) notebook_task : Optional [ NotebookTask ] = Field ( None , description = ( \"If notebook_task, indicates that this task must run a notebook. This field\" \" may not be specified in conjunction with spark_jar_task.\" ), ) pipeline_task : Optional [ PipelineTask ] = Field ( None , description = ( \"If pipeline_task, indicates that this task must execute a Pipeline.\" ), ) python_wheel_task : Optional [ PythonWheelTask ] = Field ( None , description = ( \"If python_wheel_task, indicates that this job must execute a PythonWheel.\" ), ) spark_jar_task : Optional [ SparkJarTask ] = Field ( None , description = \"If spark_jar_task, indicates that this task must run a JAR.\" ) spark_python_task : Optional [ SparkPythonTask ] = Field ( None , description = ( \"If spark_python_task, indicates that this task must run a Python file.\" ), ) spark_submit_task : Optional [ SparkSubmitTask ] = Field ( None , description = ( \"If spark_submit_task, indicates that this task must be launched by the\" \" spark submit script.\" ), ) sql_task : Optional [ SqlTask ] = Field ( None , description = ( \"If sql_task, indicates that this job must execute a SQL task. It requires\" \" both Databricks SQL and a Serverless SQL warehouse.\" ), ) task_key : TaskKey timeout_seconds : Optional [ int ] = Field ( None , description = ( \"An optional timeout applied to each run of this job task. The default\" \" behavior is to have no timeout.\" ), example = 86400 , ) RunTask See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 2220 2221 2222 2223 2224 2225 2226 2227 2228 2229 2230 2231 2232 2233 2234 2235 2236 2237 2238 2239 2240 2241 2242 2243 2244 2245 2246 2247 2248 2249 2250 2251 2252 2253 2254 2255 2256 2257 2258 2259 2260 2261 2262 2263 2264 2265 2266 2267 2268 2269 2270 2271 2272 2273 2274 2275 2276 2277 2278 2279 2280 2281 2282 2283 2284 2285 2286 2287 2288 2289 2290 2291 2292 2293 2294 2295 2296 2297 2298 2299 2300 2301 2302 2303 2304 2305 2306 2307 2308 2309 2310 2311 2312 2313 2314 2315 2316 2317 2318 2319 2320 2321 2322 2323 2324 2325 2326 2327 2328 2329 2330 2331 2332 2333 2334 2335 2336 2337 2338 2339 2340 2341 2342 2343 2344 2345 2346 2347 2348 2349 2350 2351 2352 2353 2354 2355 2356 2357 2358 2359 2360 2361 2362 2363 2364 2365 2366 2367 2368 2369 2370 2371 2372 2373 2374 2375 2376 2377 2378 2379 2380 2381 2382 2383 2384 2385 2386 2387 class RunTask ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False attempt_number : Optional [ int ] = Field ( None , description = ( \"The sequence number of this run attempt for a triggered job run. The\" \" initial attempt of a run has an attempt_number of 0 \\\\ . If the initial run\" \" attempt fails, and the job has a retry policy (`max_retries` \\\\ > 0),\" \" subsequent runs are created with an `original_attempt_run_id` of the\" \" original attempt\u2019s ID and an incrementing `attempt_number`. Runs are\" \" retried only until they succeed, and the maximum `attempt_number` is the\" \" same as the `max_retries` value for the job.\" ), example = 0 , ) cleanup_duration : Optional [ int ] = Field ( None , description = ( \"The time in milliseconds it took to terminate the cluster and clean up any\" \" associated artifacts. The total duration of the run is the sum of the\" \" setup_duration, the execution_duration, and the cleanup_duration.\" ), example = 0 , ) cluster_instance : Optional [ ClusterInstance ] = Field ( None , description = ( \"The cluster used for this run. If the run is specified to use a new\" \" cluster, this field is set once the Jobs service has requested a cluster\" \" for the run.\" ), ) dbt_task : Optional [ DbtTask ] = Field ( None , description = ( \"If dbt_task, indicates that this must execute a dbt task. It requires both\" \" Databricks SQL and the ability to use a Serverless SQL warehouse.\" ), ) depends_on : Optional [ TaskDependencies ] = None description : Optional [ TaskDescription ] = None end_time : Optional [ int ] = Field ( None , description = ( \"The time at which this run ended in epoch milliseconds (milliseconds since\" \" 1/1/1970 UTC). This field is set to 0 if the job is still running.\" ), example = 1625060863413 , ) execution_duration : Optional [ int ] = Field ( None , description = ( \"The time in milliseconds it took to execute the commands in the JAR or\" \" notebook until they completed, failed, timed out, were cancelled, or\" \" encountered an unexpected error.\" ), example = 0 , ) existing_cluster_id : Optional [ str ] = Field ( None , description = ( \"If existing_cluster_id, the ID of an existing cluster that is used for all\" \" runs of this job. When running jobs on an existing cluster, you may need\" \" to manually restart the cluster if it stops responding. We suggest\" \" running jobs on new clusters for greater reliability.\" ), ) git_source : Optional [ GitSource1 ] = Field ( None , description = ( \"This functionality is in Public Preview. \\n\\n An optional specification for\" \" a remote repository containing the notebooks used by this job's notebook\" \" tasks.\" ), example = { \"git_branch\" : \"main\" , \"git_provider\" : \"gitHub\" , \"git_url\" : \"https://github.com/databricks/databricks-cli\" , }, ) libraries : Optional [ List [ Library ]] = Field ( None , description = ( \"An optional list of libraries to be installed on the cluster that executes\" \" the job. The default value is an empty list.\" ), ) new_cluster : Optional [ NewCluster ] = Field ( None , description = ( \"If new_cluster, a description of a cluster that is created for each run.\" ), ) notebook_task : Optional [ NotebookTask ] = Field ( None , description = ( \"If notebook_task, indicates that this job must run a notebook. This field\" \" may not be specified in conjunction with spark_jar_task.\" ), ) pipeline_task : Optional [ PipelineTask ] = Field ( None , description = ( \"If pipeline_task, indicates that this job must execute a Pipeline.\" ), ) python_wheel_task : Optional [ PythonWheelTask ] = Field ( None , description = ( \"If python_wheel_task, indicates that this job must execute a PythonWheel.\" ), ) run_id : Optional [ int ] = Field ( None , description = \"The ID of the task run.\" , example = 99887766 ) setup_duration : Optional [ int ] = Field ( None , description = ( \"The time it took to set up the cluster in milliseconds. For runs that run\" \" on new clusters this is the cluster creation time, for runs that run on\" \" existing clusters this time should be very short.\" ), example = 0 , ) spark_jar_task : Optional [ SparkJarTask ] = Field ( None , description = \"If spark_jar_task, indicates that this job must run a JAR.\" ) spark_python_task : Optional [ SparkPythonTask ] = Field ( None , description = ( \"If spark_python_task, indicates that this job must run a Python file.\" ), ) spark_submit_task : Optional [ SparkSubmitTask ] = Field ( None , description = ( \"If spark_submit_task, indicates that this job must be launched by the\" \" spark submit script.\" ), ) sql_task : Optional [ SqlTask ] = Field ( None , description = ( \"If sql_task, indicates that this job must execute a SQL task. It requires\" \" both Databricks SQL and a Serverless SQL warehouse.\" ), ) start_time : Optional [ int ] = Field ( None , description = ( \"The time at which this run was started in epoch milliseconds (milliseconds\" \" since 1/1/1970 UTC). This may not be the time when the job task starts\" \" executing, for example, if the job is scheduled to run on a new cluster,\" \" this is the time the cluster creation call is issued.\" ), example = 1625060460483 , ) state : Optional [ RunState ] = Field ( None , description = \"The result and lifecycle states of the run.\" ) task_key : Optional [ TaskKey ] = None RunType The type of the run. JOB_RUN - Normal job run. A run created with Run now . WORKFLOW_RUN - Workflow run. A run created with dbutils.notebook.run . SUBMIT_RUN - Submit run. A run created with Run now . Source code in prefect_databricks/models/jobs.py 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 class RunType ( Enum ): \"\"\" The type of the run. * `JOB_RUN` \\- Normal job run. A run created with [Run now](https://docs.databricks.com/dev-tools/api/latest/jobs.html#operation/JobsRunNow). * `WORKFLOW_RUN` \\- Workflow run. A run created with [dbutils.notebook.run](https://docs.databricks.com/dev-tools/databricks-utils.html#dbutils-workflow). * `SUBMIT_RUN` \\- Submit run. A run created with [Run now](https://docs.databricks.com/dev-tools/api/latest/jobs.html#operation/JobsRunNow). \"\"\" jobrun = \"JOB_RUN\" workflowrun = \"WORKFLOW_RUN\" submitrun = \"SUBMIT_RUN\" S3StorageInfo See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 class S3StorageInfo ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False canned_acl : Optional [ str ] = Field ( None , description = ( \"(Optional) Set canned access control list. For example:\" \" `bucket-owner-full-control`. If canned_acl is set, the cluster instance\" \" profile must have `s3:PutObjectAcl` permission on the destination bucket\" \" and prefix. The full list of possible canned ACLs can be found at\" \" <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl>.\" \" By default only the object owner gets full control. If you are using\" \" cross account role for writing data, you may want to set\" \" `bucket-owner-full-control` to make bucket owner able to read the logs.\" ), ) destination : Optional [ str ] = Field ( None , description = ( \"S3 destination. For example: `s3://my-bucket/some-prefix` You must\" \" configure the cluster with an instance profile and the instance profile\" \" must have write access to the destination. You _cannot_ use AWS keys.\" ), ) enable_encryption : Optional [ bool ] = Field ( None , description = \"(Optional)Enable server side encryption, `false` by default.\" ) encryption_type : Optional [ str ] = Field ( None , description = ( \"(Optional) The encryption type, it could be `sse-s3` or `sse-kms`. It is\" \" used only when encryption is enabled and the default type is `sse-s3`.\" ), ) endpoint : Optional [ str ] = Field ( None , description = ( \"S3 endpoint. For example: `https://s3-us-west-2.amazonaws.com`. Either\" \" region or endpoint must be set. If both are set, endpoint is used.\" ), ) kms_key : Optional [ str ] = Field ( None , description = ( \"(Optional) KMS key used if encryption is enabled and encryption type is\" \" set to `sse-kms`.\" ), ) region : Optional [ str ] = Field ( None , description = ( \"S3 region. For example: `us-west-2`. Either region or endpoint must be\" \" set. If both are set, endpoint is used.\" ), ) SparkConfPair See source code for the fields' description. An arbitrary object where the object key is a configuration propery name and the value is a configuration property value. Source code in prefect_databricks/models/jobs.py 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 class SparkConfPair ( BaseModel ): \"\"\" See source code for the fields' description. An arbitrary object where the object key is a configuration propery name and the value is a configuration property value. \"\"\" pass class Config : extra = Extra . allow allow_mutation = False SparkEnvPair See source code for the fields' description. An arbitrary object where the object key is an environment variable name and the value is an environment variable value. Source code in prefect_databricks/models/jobs.py 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 class SparkEnvPair ( BaseModel ): \"\"\" See source code for the fields' description. An arbitrary object where the object key is an environment variable name and the value is an environment variable value. \"\"\" pass class Config : extra = Extra . allow allow_mutation = False SparkJarTask See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 class SparkJarTask ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False jar_uri : Optional [ str ] = Field ( None , deprecated = True , description = ( \"Deprecated since 04/2016 \\\\ . Provide a `jar` through the `libraries` field\" \" instead. For an example, see\" \" [Create](https://docs.databricks.com/dev-tools/api/latest/jobs.html#operation/JobsCreate).\" ), ) main_class_name : Optional [ str ] = Field ( None , description = ( \"The full name of the class containing the main method to be executed. This\" \" class must be contained in a JAR provided as a library. \\n\\n The code must\" \" use `SparkContext.getOrCreate` to obtain a Spark context; otherwise, runs\" \" of the job fail.\" ), example = \"com.databricks.ComputeModels\" , ) parameters : Optional [ List [ str ]] = Field ( None , description = ( \"Parameters passed to the main method. \\n\\n Use [Task parameter\" \" variables](https://docs.databricks.com/jobs.html#parameter-variables) to\" \" set parameters containing information about job runs.\" ), example = [ \"--data\" , \"dbfs:/path/to/data.json\" ], ) SparkPythonTask See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 class SparkPythonTask ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False parameters : Optional [ List [ str ]] = Field ( None , description = ( \"Command line parameters passed to the Python file. \\n\\n Use [Task parameter\" \" variables](https://docs.databricks.com/jobs.html#parameter-variables) to\" \" set parameters containing information about job runs.\" ), example = [ \"--data\" , \"dbfs:/path/to/data.json\" ], ) python_file : str = Field ( ... , description = ( \"The Python file to be executed. Cloud file URIs (such as dbfs:/, s3:/,\" \" adls:/, gcs:/) and workspace paths are supported. For python files stored\" \" in the Databricks workspace, the path must be absolute and begin with\" \" `/Repos`. This field is required.\" ), example = \"dbfs:/path/to/file.py\" , ) SparkSubmitTask See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 class SparkSubmitTask ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False parameters : Optional [ List [ str ]] = Field ( None , description = ( \"Command-line parameters passed to spark submit. \\n\\n Use [Task parameter\" \" variables](https://docs.databricks.com/jobs.html#parameter-variables) to\" \" set parameters containing information about job runs.\" ), example = [ \"--class\" , \"org.apache.spark.examples.SparkPi\" , \"dbfs:/path/to/examples.jar\" , \"10\" , ], ) SqlAlertOutput See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 1793 1794 1795 1796 1797 class SqlAlertOutput ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False output_link : Optional [ str ] = Field ( None , description = \"The link to find the output results.\" ) query_text : Optional [ str ] = Field ( None , description = ( \"The text of the SQL query. Can Run permission of the SQL query associated\" \" with the SQL alert is required to view this field.\" ), ) sql_statements : Optional [ SqlStatementOutput ] = Field ( None , description = \"Information about SQL statements executed in the run.\" ) warehouse_id : Optional [ str ] = Field ( None , description = \"The canonical identifier of the SQL warehouse.\" ) SqlDashboardOutput See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 2390 2391 2392 2393 2394 2395 2396 2397 2398 2399 2400 2401 2402 2403 2404 class SqlDashboardOutput ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False widgets : Optional [ SqlDashboardWidgetOutput ] = Field ( None , description = ( \"Widgets executed in the run. Only SQL query based widgets are listed.\" ), ) SqlDashboardWidgetOutput See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 class SqlDashboardWidgetOutput ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False end_time : Optional [ int ] = Field ( None , description = ( \"Time (in epoch milliseconds) when execution of the SQL widget ends.\" ), ) error : Optional [ SqlOutputError ] = Field ( None , description = \"The information about the error when execution fails.\" ) output_link : Optional [ str ] = Field ( None , description = \"The link to find the output results.\" ) start_time : Optional [ int ] = Field ( None , description = ( \"Time (in epoch milliseconds) when execution of the SQL widget starts.\" ), ) status : Optional [ Literal [ \"PENDING\" , \"RUNNING\" , \"SUCCESS\" , \"FAILED\" , \"CANCELLED\" ] ] = Field ( None , description = \"The execution status of the SQL widget.\" ) widget_id : Optional [ str ] = Field ( None , description = \"The canonical identifier of the SQL widget.\" ) widget_title : Optional [ str ] = Field ( None , description = \"The title of the SQL widget.\" ) SqlOutput See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 2407 2408 2409 2410 2411 2412 2413 2414 2415 2416 2417 2418 2419 2420 2421 2422 2423 2424 class SqlOutput ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False alert_output : Optional [ SqlAlertOutput ] = Field ( None , description = \"The output of a SQL alert task, if available.\" ) dashboard_output : Optional [ SqlDashboardOutput ] = Field ( None , description = \"The output of a SQL dashboard task, if available.\" ) query_output : Optional [ SqlQueryOutput ] = Field ( None , description = \"The output of a SQL query task, if available.\" ) SqlOutputError See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 class SqlOutputError ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False message : Optional [ str ] = Field ( None , description = \"The error message when execution fails.\" ) SqlQueryOutput See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 class SqlQueryOutput ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False output_link : Optional [ str ] = Field ( None , description = \"The link to find the output results.\" ) query_text : Optional [ str ] = Field ( None , description = ( \"The text of the SQL query. Can Run permission of the SQL query is required\" \" to view this field.\" ), ) sql_statements : Optional [ SqlStatementOutput ] = Field ( None , description = \"Information about SQL statements executed in the run.\" ) warehouse_id : Optional [ str ] = Field ( None , description = \"The canonical identifier of the SQL warehouse.\" ) SqlStatementOutput See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 class SqlStatementOutput ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False lookup_key : Optional [ str ] = Field ( None , description = \"A key that can be used to look up query details.\" ) SqlTask See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1865 1866 1867 1868 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900 class SqlTask ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False alert : Optional [ SqlTaskAlert ] = Field ( None , description = \"If alert, indicates that this job must refresh a SQL alert.\" ) dashboard : Optional [ SqlTaskDashboard ] = Field ( None , description = ( \"If dashboard, indicates that this job must refresh a SQL dashboard.\" ), ) parameters : Optional [ Dict [ str , Any ]] = Field ( None , description = ( \"Parameters to be used for each run of this job. The SQL alert task does\" \" not support custom parameters.\" ), example = { \"age\" : 35 , \"name\" : \"John Doe\" }, ) query : Optional [ SqlTaskQuery ] = Field ( None , description = \"If query, indicates that this job must execute a SQL query.\" ) warehouse_id : str = Field ( ... , description = ( \"The canonical identifier of the SQL warehouse. Only serverless warehouse\" \" is supported.\" ), ) SqlTaskAlert See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 class SqlTaskAlert ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False alert_id : str = Field ( ... , description = \"The canonical identifier of the SQL alert.\" ) SqlTaskDashboard See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 class SqlTaskDashboard ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False dashboard_id : str = Field ( ... , description = \"The canonical identifier of the SQL dashboard.\" ) SqlTaskQuery See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 class SqlTaskQuery ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False query_id : str = Field ( ... , description = \"The canonical identifier of the SQL query.\" ) TaskDependencies See source code for the fields' description. An optional array of objects specifying the dependency graph of the task. All tasks specified in this field must complete successfully before executing this task. The key is task_key , and the value is the name assigned to the dependent task. This field is required when a job consists of more than one task. Source code in prefect_databricks/models/jobs.py 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 class TaskDependencies ( BaseModel ): \"\"\" See source code for the fields' description. An optional array of objects specifying the dependency graph of the task. All tasks specified in this field must complete successfully before executing this task. The key is `task_key`, and the value is the name assigned to the dependent task. This field is required when a job consists of more than one task. \"\"\" class Config : extra = Extra . allow allow_mutation = False __root__ : List [ TaskDependency ] = Field ( ... , description = ( \"An optional array of objects specifying the dependency graph of the task.\" \" All tasks specified in this field must complete successfully before\" \" executing this task. \\n The key is `task_key`, and the value is the name\" \" assigned to the dependent task. \\n This field is required when a job\" \" consists of more than one task.\" ), example = [{ \"task_key\" : \"Previous_Task_Key\" }, { \"task_key\" : \"Other_Task_Key\" }], ) TaskDependency See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 class TaskDependency ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False task_key : Optional [ str ] = None TaskDescription See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 class TaskDescription ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False __root__ : str = Field ( ... , description = ( \"An optional description for this task. \\n The maximum length is 4096 bytes.\" ), example = \"This is the description for this task.\" , max_length = 4096 , ) TaskKey See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 class TaskKey ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False __root__ : str = Field ( ... , description = ( \"A unique name for the task. This field is used to refer to this task from\" \" other tasks. \\n This field is required and must be unique within its parent\" \" job. \\n On Update or Reset, this field is used to reference the tasks to be\" \" updated or reset. \\n The maximum length is 100 characters.\" ), example = \"Task_Key\" , max_length = 100 , min_length = 1 , regex = \"^[ \\\\ w \\\\ -]+$\" , ) TriggerType * `PERIODIC` : Schedules that periodically trigger runs , such as a cron scheduler . ONE_TIME : One time triggers that fire a single run. This occurs you triggered a single run on demand through the UI or the API. RETRY : Indicates a run that is triggered as a retry of a previously failed run. This occurs when you request to re-run the job in case of failures. Source code in prefect_databricks/models/jobs.py 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 class TriggerType ( Enum ): \"\"\" * `PERIODIC`: Schedules that periodically trigger runs, such as a cron scheduler. * `ONE_TIME`: One time triggers that fire a single run. This occurs you triggered a single run on demand through the UI or the API. * `RETRY`: Indicates a run that is triggered as a retry of a previously failed run. This occurs when you request to re-run the job in case of failures. \"\"\" periodic = \"PERIODIC\" onetime = \"ONE_TIME\" retry = \"RETRY\" UserName See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 class UserName ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False __root__ : str = Field ( ... , description = \"Email address for the user.\" , example = \"jsmith@example.com\" ) ViewItem See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 1921 class ViewItem ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False content : Optional [ str ] = Field ( None , description = \"Content of the view.\" ) name : Optional [ str ] = Field ( None , description = ( \"Name of the view item. In the case of code view, it would be the\" \" notebook\u2019s name. In the case of dashboard view, it would be the\" \" dashboard\u2019s name.\" ), ) type : Optional [ ViewType ] = Field ( None , description = \"Type of the view item.\" ) ViewType * `NOTEBOOK` : Notebook view item . DASHBOARD : Dashboard view item. Source code in prefect_databricks/models/jobs.py 1402 1403 1404 1405 1406 1407 1408 1409 class ViewType ( Enum ): \"\"\" * `NOTEBOOK`: Notebook view item. * `DASHBOARD`: Dashboard view item. \"\"\" notebook = \"NOTEBOOK\" dashboard = \"DASHBOARD\"","title":"Jobs"},{"location":"models/jobs/#prefect_databricks.models.jobs","text":"","title":"jobs"},{"location":"models/jobs/#prefect_databricks.models.jobs.AccessControlRequest","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1924 1925 1926 1927 1928 1929 1930 1931 1932 1933 class AccessControlRequest ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False __root__ : Union [ AccessControlRequestForUser , AccessControlRequestForGroup ]","title":"AccessControlRequest"},{"location":"models/jobs/#prefect_databricks.models.jobs.AccessControlRequestForGroup","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 class AccessControlRequestForGroup ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False group_name : Optional [ GroupName ] = None permission_level : Optional [ PermissionLevelForGroup ] = None","title":"AccessControlRequestForGroup"},{"location":"models/jobs/#prefect_databricks.models.jobs.AccessControlRequestForUser","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 class AccessControlRequestForUser ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False permission_level : Optional [ PermissionLevel ] = None user_name : Optional [ UserName ] = None","title":"AccessControlRequestForUser"},{"location":"models/jobs/#prefect_databricks.models.jobs.AutoScale","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class AutoScale ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False max_workers : Optional [ int ] = Field ( None , description = ( \"The maximum number of workers to which the cluster can scale up when\" \" overloaded. max_workers must be strictly greater than min_workers.\" ), ) min_workers : Optional [ int ] = Field ( None , description = ( \"The minimum number of workers to which the cluster can scale down when\" \" underutilized. It is also the initial number of workers the cluster has\" \" after creation.\" ), )","title":"AutoScale"},{"location":"models/jobs/#prefect_databricks.models.jobs.AwsAttributes","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 class AwsAttributes ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False availability : Optional [ Literal [ \"SPOT\" , \"ON_DEMAND\" , \"SPOT_WITH_FALLBACK\" ]] = Field ( None , description = ( \"Availability type used for all subsequent nodes past the `first_on_demand`\" \" ones. **Note:** If `first_on_demand` is zero, this availability type is\" \" used for the entire cluster. \\n\\n `SPOT`: use spot instances. \\n `ON_DEMAND`:\" \" use on-demand instances. \\n `SPOT_WITH_FALLBACK`: preferably use spot\" \" instances, but fall back to on-demand instances if spot instances cannot\" \" be acquired (for example, if AWS spot prices are too high).\" ), ) ebs_volume_count : Optional [ int ] = Field ( None , description = ( \"The number of volumes launched for each instance. You can choose up to 10\" \" volumes. This feature is only enabled for supported node types. Legacy\" \" node types cannot specify custom EBS volumes. For node types with no\" \" instance store, at least one EBS volume needs to be specified; otherwise,\" \" cluster creation fails. \\n\\n These EBS volumes are mounted at `/ebs0`,\" \" `/ebs1`, and etc. Instance store volumes are mounted at `/local_disk0`,\" \" `/local_disk1`, and etc. \\n\\n If EBS volumes are attached, Databricks\" \" configures Spark to use only the EBS volumes for scratch storage because\" \" heterogeneously sized scratch devices can lead to inefficient disk\" \" utilization. If no EBS volumes are attached, Databricks configures Spark\" \" to use instance store volumes. \\n\\n If EBS volumes are specified, then the\" \" Spark configuration `spark.local.dir` is overridden.\" ), ) ebs_volume_iops : Optional [ int ] = Field ( None , description = ( \"The number of IOPS per EBS gp3 volume. \\n\\n This value must be between 3000\" \" and 16000. \\n\\n The value of IOPS and throughput is calculated based on AWS\" \" documentation to match the maximum performance of a gp2 volume with the\" \" same volume size. \\n\\n For more information, see the [EBS volume limit\" \" calculator](https://github.com/awslabs/aws-support-tools/tree/master/EBS/VolumeLimitCalculator).\" ), ) ebs_volume_size : Optional [ int ] = Field ( None , description = ( \"The size of each EBS volume (in GiB) launched for each instance. For\" \" general purpose SSD, this value must be within the range 100 - 4096 \\\\ .\" \" For throughput optimized HDD, this value must be within the range 500 -\" \" 4096 \\\\ . Custom EBS volumes cannot be specified for the legacy node types\" \" (_memory-optimized_ and _compute-optimized_).\" ), ) ebs_volume_throughput : Optional [ int ] = Field ( None , description = ( \"The throughput per EBS gp3 volume, in MiB per second. \\n\\n This value must\" \" be between 125 and 1000.\" ), ) ebs_volume_type : Optional [ Literal [ \"GENERAL_PURPOSE_SSD\" , \"THROUGHPUT_OPTIMIZED_HDD\" ] ] = Field ( None , description = ( \"The type of EBS volume that is launched with this\" \" cluster. \\n\\n `GENERAL_PURPOSE_SSD`: provision extra storage using AWS gp2\" \" EBS volumes. \\n `THROUGHPUT_OPTIMIZED_HDD`: provision extra storage using\" \" AWS st1 volumes.\" ), ) first_on_demand : Optional [ int ] = Field ( None , description = ( \"The first first_on_demand nodes of the cluster are placed on on-demand\" \" instances. If this value is greater than 0, the cluster driver node is\" \" placed on an on-demand instance. If this value is greater than or equal\" \" to the current cluster size, all nodes are placed on on-demand instances.\" \" If this value is less than the current cluster size, first_on_demand\" \" nodes are placed on on-demand instances and the remainder are placed on\" \" `availability` instances. This value does not affect cluster size and\" \" cannot be mutated over the lifetime of a cluster.\" ), ) instance_profile_arn : Optional [ str ] = Field ( None , description = ( \"Nodes for this cluster are only be placed on AWS instances with this\" \" instance profile. If omitted, nodes are placed on instances without an\" \" instance profile. The instance profile must have previously been added to\" \" the Databricks environment by an account administrator. \\n\\n This feature\" \" may only be available to certain customer plans.\" ), ) spot_bid_price_percent : Optional [ int ] = Field ( None , description = ( \"The max price for AWS spot instances, as a percentage of the corresponding\" \" instance type\u2019s on-demand price. For example, if this field is set to 50,\" \" and the cluster needs a new `i3.xlarge` spot instance, then the max price\" \" is half of the price of on-demand `i3.xlarge` instances. Similarly, if\" \" this field is set to 200, the max price is twice the price of on-demand\" \" `i3.xlarge` instances. If not specified, the default value is 100 \\\\ . When\" \" spot instances are requested for this cluster, only spot instances whose\" \" max price percentage matches this field is considered. For safety, we\" \" enforce this field to be no more than 10000.\" ), ) zone_id : Optional [ str ] = Field ( None , description = ( \"Identifier for the availability zone/datacenter in which the cluster\" \" resides. You have three options: \\n\\n **Specify an availability zone as a\" \" string**, for example: \u201cus-west-2a\u201d. The provided availability zone must\" \" be in the same region as the Databricks deployment. For example,\" \" \u201cus-west-2a\u201d is not a valid zone ID if the Databricks deployment resides\" \" in the \u201cus-east-1\u201d region. \\n\\n **Enable automatic availability zone\" \" selection (\u201cAuto-AZ\u201d)**, by setting the value \u201cauto\u201d. Databricks selects\" \" the AZ based on available IPs in the workspace subnets and retries in\" \" other availability zones if AWS returns insufficient capacity\" \" errors. \\n\\n **Do not specify a value**. If not specified, a default zone\" \" is used. \\n\\n The list of available zones as well as the default value can\" \" be found by using the [List\" \" zones](https://docs.databricks.com/dev-tools/api/latest/clusters.html#list-zones)\" \" API.\" ), )","title":"AwsAttributes"},{"location":"models/jobs/#prefect_databricks.models.jobs.CanManage","text":"Permission to manage the job. Source code in prefect_databricks/models/jobs.py 173 174 175 176 177 178 class CanManage ( Enum ): \"\"\" Permission to manage the job. \"\"\" canmanage = \"CAN_MANAGE\"","title":"CanManage"},{"location":"models/jobs/#prefect_databricks.models.jobs.CanManageRun","text":"Permission to run and/or manage runs for the job. Source code in prefect_databricks/models/jobs.py 181 182 183 184 185 186 class CanManageRun ( Enum ): \"\"\" Permission to run and/or manage runs for the job. \"\"\" canmanagerun = \"CAN_MANAGE_RUN\"","title":"CanManageRun"},{"location":"models/jobs/#prefect_databricks.models.jobs.CanView","text":"Permission to view the settings of the job. Source code in prefect_databricks/models/jobs.py 189 190 191 192 193 194 class CanView ( Enum ): \"\"\" Permission to view the settings of the job. \"\"\" canview = \"CAN_VIEW\"","title":"CanView"},{"location":"models/jobs/#prefect_databricks.models.jobs.ClusterInstance","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 class ClusterInstance ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False cluster_id : Optional [ str ] = Field ( None , description = ( \"The canonical identifier for the cluster used by a run. This field is\" \" always available for runs on existing clusters. For runs on new clusters,\" \" it becomes available once the cluster is created. This value can be used\" \" to view logs by browsing to `/#setting/sparkui/$cluster_id/driver-logs`.\" \" The logs continue to be available after the run completes. \\n\\n The\" \" response won\u2019t include this field if the identifier is not available yet.\" ), example = \"0923-164208-meows279\" , ) spark_context_id : Optional [ str ] = Field ( None , description = ( \"The canonical identifier for the Spark context used by a run. This field\" \" is filled in once the run begins execution. This value can be used to\" \" view the Spark UI by browsing to\" \" `/#setting/sparkui/$cluster_id/$spark_context_id`. The Spark UI continues\" \" to be available after the run has completed. \\n\\n The response won\u2019t\" \" include this field if the identifier is not available yet.\" ), )","title":"ClusterInstance"},{"location":"models/jobs/#prefect_databricks.models.jobs.ClusterLogConf","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 class ClusterLogConf ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False dbfs : Optional [ DbfsStorageInfo ] = Field ( None , description = ( \"DBFS location of cluster log. Destination must be provided. For example,\" ' `{ \"dbfs\" : { \"destination\" : \"dbfs:/home/cluster_log\" } }`' ), ) s3 : Optional [ S3StorageInfo ] = Field ( None , description = ( \"S3 location of cluster log. `destination` and either `region` or\" ' `endpoint` must be provided. For example, `{ \"s3\": { \"destination\" :' ' \"s3://cluster_log_bucket/prefix\", \"region\" : \"us-west-2\" } }`' ), )","title":"ClusterLogConf"},{"location":"models/jobs/#prefect_databricks.models.jobs.ClusterSpec","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 class ClusterSpec ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False existing_cluster_id : Optional [ str ] = Field ( None , description = ( \"If existing_cluster_id, the ID of an existing cluster that is used for all\" \" runs of this job. When running jobs on an existing cluster, you may need\" \" to manually restart the cluster if it stops responding. We suggest\" \" running jobs on new clusters for greater reliability.\" ), example = \"0923-164208-meows279\" , ) libraries : Optional [ List [ Library ]] = Field ( None , description = ( \"An optional list of libraries to be installed on the cluster that executes\" \" the job. The default value is an empty list.\" ), ) new_cluster : Optional [ NewCluster ] = Field ( None , description = ( \"If new_cluster, a description of a cluster that is created for each run.\" ), )","title":"ClusterSpec"},{"location":"models/jobs/#prefect_databricks.models.jobs.ClusterTag","text":"See source code for the fields' description. An object with key value pairs. The key length must be between 1 and 127 UTF-8 characters, inclusive. The value length must be less than or equal to 255 UTF-8 characters. For a list of all restrictions, see AWS Tag Restrictions: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#tag-restrictions Source code in prefect_databricks/models/jobs.py 231 232 233 234 235 236 237 238 239 240 241 242 243 class ClusterTag ( BaseModel ): \"\"\" See source code for the fields' description. An object with key value pairs. The key length must be between 1 and 127 UTF-8 characters, inclusive. The value length must be less than or equal to 255 UTF-8 characters. For a list of all restrictions, see AWS Tag Restrictions: <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#tag-restrictions> \"\"\" pass class Config : extra = Extra . allow allow_mutation = False","title":"ClusterTag"},{"location":"models/jobs/#prefect_databricks.models.jobs.CronSchedule","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 class CronSchedule ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False pause_status : Optional [ Literal [ \"PAUSED\" , \"UNPAUSED\" ]] = Field ( None , description = \"Indicate whether this schedule is paused or not.\" , example = \"PAUSED\" , ) quartz_cron_expression : str = Field ( ... , description = ( \"A Cron expression using Quartz syntax that describes the schedule for a\" \" job. See [Cron\" \" Trigger](http://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html)\" \" for details. This field is required.\" ), example = \"20 30 * * * ?\" , ) timezone_id : str = Field ( ... , description = ( \"A Java timezone ID. The schedule for a job is resolved with respect to\" \" this timezone. See [Java\" \" TimeZone](https://docs.oracle.com/javase/7/docs/api/java/util/TimeZone.html)\" \" for details. This field is required.\" ), example = \"Europe/London\" , )","title":"CronSchedule"},{"location":"models/jobs/#prefect_databricks.models.jobs.DbfsStorageInfo","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 282 283 284 285 286 287 288 289 290 291 292 293 class DbfsStorageInfo ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False destination : Optional [ str ] = Field ( None , description = \"DBFS destination. Example: `dbfs:/my/path`\" )","title":"DbfsStorageInfo"},{"location":"models/jobs/#prefect_databricks.models.jobs.DbtOutput","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 class DbtOutput ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False artifacts_headers : Optional [ Dict [ str , Any ]] = Field ( None , description = ( \"An optional map of headers to send when retrieving the artifact from the\" \" `artifacts_link`.\" ), ) artifacts_link : Optional [ str ] = Field ( None , description = ( \"A pre-signed URL to download the (compressed) dbt artifacts. This link is\" \" valid for a limited time (30 minutes). This information is only available\" \" after the run has finished.\" ), )","title":"DbtOutput"},{"location":"models/jobs/#prefect_databricks.models.jobs.DbtTask","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 class DbtTask ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False commands : List = Field ( ... , description = ( \"A list of dbt commands to execute. All commands must start with `dbt`.\" \" This parameter must not be empty. A maximum of up to 10 commands can be\" \" provided.\" ), example = [ \"dbt deps\" , \"dbt seed\" , \"dbt run --models 123\" ], ) profiles_directory : Optional [ str ] = Field ( None , description = ( \"Optional (relative) path to the profiles directory. Can only be specified\" \" if no warehouse_id is specified. If no warehouse_id is specified and this\" \" folder is unset, the root directory is used.\" ), ) project_directory : Optional [ str ] = Field ( None , description = ( \"Optional (relative) path to the project directory, if no value is\" \" provided, the root of the git repository is used.\" ), ) schema_ : Optional [ str ] = Field ( None , alias = \"schema\" , description = ( \"Optional schema to write to. This parameter is only used when a\" \" warehouse_id is also provided. If not provided, the `default` schema is\" \" used.\" ), ) warehouse_id : Optional [ str ] = Field ( None , description = ( \"ID of the SQL warehouse to connect to. If provided, we automatically\" \" generate and provide the profile and connection details to dbt. It can be\" \" overridden on a per-command basis by using the `--profiles-dir` command\" \" line argument.\" ), example = \"30dade0507d960d1\" , )","title":"DbtTask"},{"location":"models/jobs/#prefect_databricks.models.jobs.FileStorageInfo","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 376 377 378 379 380 381 382 383 384 385 386 387 class FileStorageInfo ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False destination : Optional [ str ] = Field ( None , description = \"File destination. Example: `file:/my/file.sh`\" )","title":"FileStorageInfo"},{"location":"models/jobs/#prefect_databricks.models.jobs.GitSnapshot","text":"See source code for the fields' description. Read-only state of the remote repository at the time the job was run. This field is only included on job runs. Source code in prefect_databricks/models/jobs.py 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 class GitSnapshot ( BaseModel ): \"\"\" See source code for the fields' description. Read-only state of the remote repository at the time the job was run. This field is only included on job runs. \"\"\" class Config : extra = Extra . allow allow_mutation = False used_commit : Optional [ str ] = Field ( None , description = ( \"Commit that was used to execute the run. If git_branch was specified, this\" \" points to the HEAD of the branch at the time of the run; if git_tag was\" \" specified, this points to the commit the tag points to.\" ), example = \"4506fdf41e9fa98090570a34df7a5bce163ff15f\" , )","title":"GitSnapshot"},{"location":"models/jobs/#prefect_databricks.models.jobs.GitSource","text":"See source code for the fields' description. This functionality is in Public Preview. An optional specification for a remote repository containing the notebooks used by this job's notebook tasks. Source code in prefect_databricks/models/jobs.py 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 class GitSource ( BaseModel ): \"\"\" See source code for the fields' description. This functionality is in Public Preview. An optional specification for a remote repository containing the notebooks used by this job's notebook tasks. \"\"\" class Config : extra = Extra . allow allow_mutation = False git_branch : Optional [ str ] = Field ( None , description = ( \"Name of the branch to be checked out and used by this job. This field\" \" cannot be specified in conjunction with git_tag or git_commit. \\n The\" \" maximum length is 255 characters.\" ), example = \"main\" , ) git_commit : Optional [ str ] = Field ( None , description = ( \"Commit to be checked out and used by this job. This field cannot be\" \" specified in conjunction with git_branch or git_tag. \\n The maximum length\" \" is 64 characters.\" ), example = \"e0056d01\" , ) git_provider : Optional [ Literal [ \"gitHub\" , \"bitbucketCloud\" , \"azureDevOpsServices\" , \"gitHubEnterprise\" , \"bitbucketServer\" , \"gitLab\" , \"gitLabEnterpriseEdition\" , \"awsCodeCommit\" , ] ] = Field ( None , description = ( \"Unique identifier of the service used to host the Git repository. The\" \" value is case insensitive.\" ), example = \"github\" , ) git_snapshot : Optional [ GitSnapshot ] = None git_tag : Optional [ str ] = Field ( None , description = ( \"Name of the tag to be checked out and used by this job. This field cannot\" \" be specified in conjunction with git_branch or git_commit. \\n The maximum\" \" length is 255 characters.\" ), example = \"release-1.0.0\" , ) git_url : Optional [ str ] = Field ( None , description = ( \"URL of the repository to be cloned by this job. \\n The maximum length is 300\" \" characters.\" ), example = \"https://github.com/databricks/databricks-cli\" , )","title":"GitSource"},{"location":"models/jobs/#prefect_databricks.models.jobs.GitSource1","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 class GitSource1 ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False __root__ : Union [ GitSource , Any , Any , Any ] = Field ( ... , description = ( \"This functionality is in Public Preview. \\n\\n An optional specification for\" \" a remote repository containing the notebooks used by this job's notebook\" \" tasks.\" ), example = { \"git_branch\" : \"main\" , \"git_provider\" : \"gitHub\" , \"git_url\" : \"https://github.com/databricks/databricks-cli\" , }, )","title":"GitSource1"},{"location":"models/jobs/#prefect_databricks.models.jobs.GroupName","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 class GroupName ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False __root__ : str = Field ( ... , description = ( \"Group name. There are two built-in groups: `users` for all users, and\" \" `admins` for administrators.\" ), example = \"users\" , )","title":"GroupName"},{"location":"models/jobs/#prefect_databricks.models.jobs.InitScriptInfo","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 class InitScriptInfo ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False s3 : Optional [ S3StorageInfo ] = Field ( None , alias = \"S3\" , description = ( \"S3 location of init script. Destination and either region or endpoint must\" ' be provided. For example, `{ \"s3\": { \"destination\" :' ' \"s3://init_script_bucket/prefix\", \"region\" : \"us-west-2\" } }`' ), ) dbfs : Optional [ DbfsStorageInfo ] = Field ( None , description = ( \"DBFS location of init script. Destination must be provided. For example,\" ' `{ \"dbfs\" : { \"destination\" : \"dbfs:/home/init_script\" } }`' ), ) file : Optional [ FileStorageInfo ] = Field ( None , description = ( \"File location of init script. Destination must be provided. For example,\" ' `{ \"file\" : { \"destination\" : \"file:/my/local/file.sh\" } }`' ), )","title":"InitScriptInfo"},{"location":"models/jobs/#prefect_databricks.models.jobs.IsOwner","text":"Perimssion that represents ownership of the job. Source code in prefect_databricks/models/jobs.py 525 526 527 528 529 530 class IsOwner ( Enum ): \"\"\" Perimssion that represents ownership of the job. \"\"\" isowner = \"IS_OWNER\"","title":"IsOwner"},{"location":"models/jobs/#prefect_databricks.models.jobs.Job","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 2897 2898 2899 2900 2901 2902 2903 2904 2905 2906 2907 2908 2909 2910 2911 2912 2913 2914 2915 2916 2917 2918 2919 2920 2921 2922 2923 2924 2925 2926 2927 2928 2929 2930 2931 class Job ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False created_time : Optional [ int ] = Field ( None , description = ( \"The time at which this job was created in epoch milliseconds (milliseconds\" \" since 1/1/1970 UTC).\" ), example = 1601370337343 , ) creator_user_name : Optional [ str ] = Field ( None , description = ( \"The creator user name. This field won\u2019t be included in the response if the\" \" user has already been deleted.\" ), example = \"user.name@databricks.com\" , ) job_id : Optional [ int ] = Field ( None , description = \"The canonical identifier for this job.\" , example = 11223344 ) settings : Optional [ JobSettings ] = Field ( None , description = ( \"Settings for this job and all of its runs. These settings can be updated\" \" using the `resetJob` method.\" ), )","title":"Job"},{"location":"models/jobs/#prefect_databricks.models.jobs.JobCluster","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 class JobCluster ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False job_cluster_key : str = Field ( ... , description = ( \"A unique name for the job cluster. This field is required and must be\" \" unique within the job. \\n `JobTaskSettings` may refer to this field to\" \" determine which cluster to launch for the task execution.\" ), example = \"auto_scaling_cluster\" , max_length = 100 , min_length = 1 , regex = \"^[ \\\\ w \\\\ -]+$\" , ) new_cluster : Optional [ NewCluster ] = None","title":"JobCluster"},{"location":"models/jobs/#prefect_databricks.models.jobs.JobEmailNotifications","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 class JobEmailNotifications ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False no_alert_for_skipped_runs : Optional [ bool ] = Field ( None , description = ( \"If true, do not send email to recipients specified in `on_failure` if the\" \" run is skipped.\" ), example = False , ) on_failure : Optional [ List [ str ]] = Field ( None , description = ( \"A list of email addresses to be notified when a run unsuccessfully\" \" completes. A run is considered to have completed unsuccessfully if it\" \" ends with an `INTERNAL_ERROR` `life_cycle_state` or a `SKIPPED`,\" \" `FAILED`, or `TIMED_OUT` result_state. If this is not specified on job\" \" creation, reset, or update the list is empty, and notifications are not\" \" sent.\" ), example = [ \"user.name@databricks.com\" ], ) on_start : Optional [ List [ str ]] = Field ( None , description = ( \"A list of email addresses to be notified when a run begins. If not\" \" specified on job creation, reset, or update, the list is empty, and\" \" notifications are not sent.\" ), example = [ \"user.name@databricks.com\" ], ) on_success : Optional [ List [ str ]] = Field ( None , description = ( \"A list of email addresses to be notified when a run successfully\" \" completes. A run is considered to have completed successfully if it ends\" \" with a `TERMINATED` `life_cycle_state` and a `SUCCESSFUL` result_state.\" \" If not specified on job creation, reset, or update, the list is empty,\" \" and notifications are not sent.\" ), example = [ \"user.name@databricks.com\" ], )","title":"JobEmailNotifications"},{"location":"models/jobs/#prefect_databricks.models.jobs.JobSettings","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 2427 2428 2429 2430 2431 2432 2433 2434 2435 2436 2437 2438 2439 2440 2441 2442 2443 2444 2445 2446 2447 2448 2449 2450 2451 2452 2453 2454 2455 2456 2457 2458 2459 2460 2461 2462 2463 2464 2465 2466 2467 2468 2469 2470 2471 2472 2473 2474 2475 2476 2477 2478 2479 2480 2481 2482 2483 2484 2485 2486 2487 2488 2489 2490 2491 2492 2493 2494 2495 2496 2497 2498 2499 2500 2501 2502 2503 2504 2505 2506 2507 2508 2509 2510 2511 2512 2513 2514 2515 2516 2517 2518 2519 2520 2521 2522 2523 2524 2525 2526 2527 2528 2529 2530 2531 2532 2533 2534 2535 2536 2537 2538 2539 2540 2541 2542 2543 2544 2545 2546 2547 2548 2549 2550 2551 2552 2553 2554 2555 2556 2557 2558 2559 2560 2561 2562 2563 2564 2565 2566 2567 2568 2569 2570 2571 2572 2573 2574 2575 2576 2577 2578 2579 2580 2581 2582 2583 2584 2585 2586 2587 2588 2589 2590 2591 2592 2593 2594 2595 2596 class JobSettings ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False email_notifications : Optional [ JobEmailNotifications ] = Field ( None , description = ( \"An optional set of email addresses that is notified when runs of this job\" \" begin or complete as well as when this job is deleted. The default\" \" behavior is to not send any emails.\" ), ) format : Optional [ Literal [ \"SINGLE_TASK\" , \"MULTI_TASK\" ]] = Field ( None , description = ( \"Used to tell what is the format of the job. This field is ignored in\" \" Create/Update/Reset calls. When using the Jobs API 2.1 this value is\" ' always set to `\"MULTI_TASK\"`.' ), example = \"MULTI_TASK\" , ) git_source : Optional [ GitSource1 ] = Field ( None , description = ( \"This functionality is in Public Preview. \\n\\n An optional specification for\" \" a remote repository containing the notebooks used by this job's notebook\" \" tasks.\" ), example = { \"git_branch\" : \"main\" , \"git_provider\" : \"gitHub\" , \"git_url\" : \"https://github.com/databricks/databricks-cli\" , }, ) job_clusters : Optional [ List [ JobCluster ]] = Field ( None , description = ( \"A list of job cluster specifications that can be shared and reused by\" \" tasks of this job. Libraries cannot be declared in a shared job cluster.\" \" You must declare dependent libraries in task settings.\" ), example = [ { \"job_cluster_key\" : \"auto_scaling_cluster\" , \"new_cluster\" : { \"autoscale\" : { \"max_workers\" : 16 , \"min_workers\" : 2 }, \"aws_attributes\" : { \"availability\" : \"SPOT\" , \"zone_id\" : \"us-west-2a\" }, \"node_type_id\" : \"i3.xlarge\" , \"spark_conf\" : { \"spark.speculation\" : True }, \"spark_version\" : \"7.3.x-scala2.12\" , }, } ], max_items = 100 , ) max_concurrent_runs : Optional [ int ] = Field ( None , description = ( \"An optional maximum allowed number of concurrent runs of the job. \\n\\n Set\" \" this value if you want to be able to execute multiple runs of the same\" \" job concurrently. This is useful for example if you trigger your job on a\" \" frequent schedule and want to allow consecutive runs to overlap with each\" \" other, or if you want to trigger multiple runs which differ by their\" \" input parameters. \\n\\n This setting affects only new runs. For example,\" \" suppose the job\u2019s concurrency is 4 and there are 4 concurrent active\" \" runs. Then setting the concurrency to 3 won\u2019t kill any of the active\" \" runs. However, from then on, new runs are skipped unless there are fewer\" \" than 3 active runs. \\n\\n This value cannot exceed 1000 \\\\ . Setting this\" \" value to 0 causes all new runs to be skipped. The default behavior is to\" \" allow only 1 concurrent run.\" ), example = 10 , ) name : Optional [ str ] = Field ( \"Untitled\" , description = \"An optional name for the job.\" , example = \"A multitask job\" , ) schedule : Optional [ CronSchedule ] = Field ( None , description = ( \"An optional periodic schedule for this job. The default behavior is that\" \" the job only runs when triggered by clicking \u201cRun Now\u201d in the Jobs UI or\" \" sending an API request to `runNow`.\" ), ) tags : Optional [ Dict [ str , Any ]] = Field ( \" {} \" , description = ( \"A map of tags associated with the job. These are forwarded to the cluster\" \" as cluster tags for jobs clusters, and are subject to the same\" \" limitations as cluster tags. A maximum of 25 tags can be added to the\" \" job.\" ), example = { \"cost-center\" : \"engineering\" , \"team\" : \"jobs\" }, ) tasks : Optional [ List [ JobTaskSettings ]] = Field ( None , description = \"A list of task specifications to be executed by this job.\" , example = [ { \"depends_on\" : [], \"description\" : \"Extracts session data from events\" , \"existing_cluster_id\" : \"0923-164208-meows279\" , \"libraries\" : [{ \"jar\" : \"dbfs:/mnt/databricks/Sessionize.jar\" }], \"max_retries\" : 3 , \"min_retry_interval_millis\" : 2000 , \"retry_on_timeout\" : False , \"spark_jar_task\" : { \"main_class_name\" : \"com.databricks.Sessionize\" , \"parameters\" : [ \"--data\" , \"dbfs:/path/to/data.json\" ], }, \"task_key\" : \"Sessionize\" , \"timeout_seconds\" : 86400 , }, { \"depends_on\" : [], \"description\" : \"Ingests order data\" , \"job_cluster_key\" : \"auto_scaling_cluster\" , \"libraries\" : [{ \"jar\" : \"dbfs:/mnt/databricks/OrderIngest.jar\" }], \"max_retries\" : 3 , \"min_retry_interval_millis\" : 2000 , \"retry_on_timeout\" : False , \"spark_jar_task\" : { \"main_class_name\" : \"com.databricks.OrdersIngest\" , \"parameters\" : [ \"--data\" , \"dbfs:/path/to/order-data.json\" ], }, \"task_key\" : \"Orders_Ingest\" , \"timeout_seconds\" : 86400 , }, { \"depends_on\" : [ { \"task_key\" : \"Orders_Ingest\" }, { \"task_key\" : \"Sessionize\" }, ], \"description\" : \"Matches orders with user sessions\" , \"max_retries\" : 3 , \"min_retry_interval_millis\" : 2000 , \"new_cluster\" : { \"autoscale\" : { \"max_workers\" : 16 , \"min_workers\" : 2 }, \"aws_attributes\" : { \"availability\" : \"SPOT\" , \"zone_id\" : \"us-west-2a\" }, \"node_type_id\" : \"i3.xlarge\" , \"spark_conf\" : { \"spark.speculation\" : True }, \"spark_version\" : \"7.3.x-scala2.12\" , }, \"notebook_task\" : { \"base_parameters\" : { \"age\" : \"35\" , \"name\" : \"John Doe\" }, \"notebook_path\" : \"/Users/user.name@databricks.com/Match\" , \"source\" : \"WORKSPACE\" , }, \"retry_on_timeout\" : False , \"task_key\" : \"Match\" , \"timeout_seconds\" : 86400 , }, ], max_items = 100 , ) timeout_seconds : Optional [ int ] = Field ( None , description = ( \"An optional timeout applied to each run of this job. The default behavior\" \" is to have no timeout.\" ), example = 86400 , )","title":"JobSettings"},{"location":"models/jobs/#prefect_databricks.models.jobs.JobTaskSettings","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1994 1995 1996 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048 2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 2082 2083 2084 2085 2086 2087 2088 2089 2090 2091 2092 2093 2094 2095 2096 2097 2098 2099 2100 2101 2102 2103 2104 2105 2106 2107 2108 2109 2110 2111 2112 2113 2114 2115 2116 2117 2118 2119 2120 2121 2122 2123 2124 2125 2126 2127 2128 2129 2130 2131 class JobTaskSettings ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False dbt_task : Optional [ DbtTask ] = Field ( None , description = ( \"If dbt_task, indicates that this must execute a dbt task. It requires both\" \" Databricks SQL and the ability to use a Serverless SQL warehouse.\" ), ) depends_on : Optional [ TaskDependencies ] = None description : Optional [ TaskDescription ] = None email_notifications : Optional [ JobEmailNotifications ] = Field ( None , description = ( \"An optional set of email addresses that is notified when runs of this task\" \" begin or complete as well as when this task is deleted. The default\" \" behavior is to not send any emails.\" ), ) existing_cluster_id : Optional [ str ] = Field ( None , description = ( \"If existing_cluster_id, the ID of an existing cluster that is used for all\" \" runs of this task. When running tasks on an existing cluster, you may\" \" need to manually restart the cluster if it stops responding. We suggest\" \" running jobs on new clusters for greater reliability.\" ), example = \"0923-164208-meows279\" , ) job_cluster_key : Optional [ str ] = Field ( None , description = ( \"If job_cluster_key, this task is executed reusing the cluster specified in\" \" `job.settings.job_clusters`.\" ), max_length = 100 , min_length = 1 , regex = \"^[ \\\\ w \\\\ -]+$\" , ) libraries : Optional [ List [ Library ]] = Field ( None , description = ( \"An optional list of libraries to be installed on the cluster that executes\" \" the task. The default value is an empty list.\" ), ) max_retries : Optional [ int ] = Field ( None , description = ( \"An optional maximum number of times to retry an unsuccessful run. A run is\" \" considered to be unsuccessful if it completes with the `FAILED`\" \" result_state or `INTERNAL_ERROR` `life_cycle_state`. The value -1 means\" \" to retry indefinitely and the value 0 means to never retry. The default\" \" behavior is to never retry.\" ), example = 10 , ) min_retry_interval_millis : Optional [ int ] = Field ( None , description = ( \"An optional minimal interval in milliseconds between the start of the\" \" failed run and the subsequent retry run. The default behavior is that\" \" unsuccessful runs are immediately retried.\" ), example = 2000 , ) new_cluster : Optional [ NewCluster ] = Field ( None , description = ( \"If new_cluster, a description of a cluster that is created for each run.\" ), ) notebook_task : Optional [ NotebookTask ] = Field ( None , description = ( \"If notebook_task, indicates that this task must run a notebook. This field\" \" may not be specified in conjunction with spark_jar_task.\" ), ) pipeline_task : Optional [ PipelineTask ] = Field ( None , description = ( \"If pipeline_task, indicates that this task must execute a Pipeline.\" ), ) python_wheel_task : Optional [ PythonWheelTask ] = Field ( None , description = ( \"If python_wheel_task, indicates that this job must execute a PythonWheel.\" ), ) retry_on_timeout : Optional [ bool ] = Field ( None , description = ( \"An optional policy to specify whether to retry a task when it times out.\" \" The default behavior is to not retry on timeout.\" ), example = True , ) spark_jar_task : Optional [ SparkJarTask ] = Field ( None , description = \"If spark_jar_task, indicates that this task must run a JAR.\" ) spark_python_task : Optional [ SparkPythonTask ] = Field ( None , description = ( \"If spark_python_task, indicates that this task must run a Python file.\" ), ) spark_submit_task : Optional [ SparkSubmitTask ] = Field ( None , description = ( \"If spark_submit_task, indicates that this task must be launched by the\" \" spark submit script.\" ), ) sql_task : Optional [ SqlTask ] = Field ( None , description = ( \"If sql_task, indicates that this job must execute a SQL task. It requires\" \" both Databricks SQL and a Serverless SQL warehouse.\" ), ) task_key : TaskKey timeout_seconds : Optional [ int ] = Field ( None , description = ( \"An optional timeout applied to each run of this job task. The default\" \" behavior is to have no timeout.\" ), example = 86400 , )","title":"JobTaskSettings"},{"location":"models/jobs/#prefect_databricks.models.jobs.Library","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 class Library ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False cran : Optional [ RCranLibrary ] = Field ( None , description = \"If cran, specification of a CRAN library to be installed.\" ) egg : Optional [ str ] = Field ( None , description = ( \"If egg, URI of the egg to be installed. DBFS and S3 URIs are supported.\" ' For example: `{ \"egg\": \"dbfs:/my/egg\" }` or `{ \"egg\":' ' \"s3://my-bucket/egg\" }`. If S3 is used, make sure the cluster has read' \" access on the library. You may need to launch the cluster with an\" \" instance profile to access the S3 URI.\" ), example = \"dbfs:/my/egg\" , ) jar : Optional [ str ] = Field ( None , description = ( \"If jar, URI of the JAR to be installed. DBFS and S3 URIs are supported.\" ' For example: `{ \"jar\": \"dbfs:/mnt/databricks/library.jar\" }` or `{ \"jar\":' ' \"s3://my-bucket/library.jar\" }`. If S3 is used, make sure the cluster has' \" read access on the library. You may need to launch the cluster with an\" \" instance profile to access the S3 URI.\" ), example = \"dbfs:/my-jar.jar\" , ) maven : Optional [ MavenLibrary ] = Field ( None , description = ( \"If maven, specification of a Maven library to be installed. For example:\" ' `{ \"coordinates\": \"org.jsoup:jsoup:1.7.2\" }`' ), ) pypi : Optional [ PythonPyPiLibrary ] = Field ( None , description = ( \"If pypi, specification of a PyPI library to be installed. Specifying the\" \" `repo` field is optional and if not specified, the default pip index is\" ' used. For example: `{ \"package\": \"simplejson\", \"repo\":' ' \"https://my-repo.com\" }`' ), ) whl : Optional [ str ] = Field ( None , description = ( \"If whl, URI of the wheel or zipped wheels to be installed. DBFS and S3\" ' URIs are supported. For example: `{ \"whl\": \"dbfs:/my/whl\" }` or `{ \"whl\":' ' \"s3://my-bucket/whl\" }`. If S3 is used, make sure the cluster has read' \" access on the library. You may need to launch the cluster with an\" \" instance profile to access the S3 URI. Also the wheel file name needs to\" \" use the [correct\" \" convention](https://www.python.org/dev/peps/pep-0427/#file-format). If\" \" zipped wheels are to be installed, the file name suffix should be\" \" `.wheelhouse.zip`.\" ), example = \"dbfs:/my/whl\" , )","title":"Library"},{"location":"models/jobs/#prefect_databricks.models.jobs.MavenLibrary","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 class MavenLibrary ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False coordinates : str = Field ( ... , description = ( \"Gradle-style Maven coordinates. For example: `org.jsoup:jsoup:1.7.2`. This\" \" field is required.\" ), example = \"org.jsoup:jsoup:1.7.2\" , ) exclusions : Optional [ List [ str ]] = Field ( None , description = ( 'List of dependences to exclude. For example: `[\"slf4j:slf4j\",' ' \"*:hadoop-client\"]`. \\n\\n Maven dependency exclusions:' \" <https://maven.apache.org/guides/introduction/introduction-to-optional-and-excludes-dependencies.html>.\" ), example = [ \"slf4j:slf4j\" , \"*:hadoop-client\" ], ) repo : Optional [ str ] = Field ( None , description = ( \"Maven repo to install the Maven package from. If omitted, both Maven\" \" Central Repository and Spark Packages are searched.\" ), example = \"https://my-repo.com\" , )","title":"MavenLibrary"},{"location":"models/jobs/#prefect_databricks.models.jobs.NewCluster","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 class NewCluster ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False autoscale : Optional [ AutoScale ] = Field ( None , description = ( \"If autoscale, the required parameters to automatically scale clusters up\" \" and down based on load.\" ), ) aws_attributes : Optional [ AwsAttributes ] = Field ( None , description = ( \"Attributes related to clusters running on Amazon Web Services. If not\" \" specified at cluster creation, a set of default values is used.\" ), ) cluster_log_conf : Optional [ ClusterLogConf ] = Field ( None , description = ( \"The configuration for delivering Spark logs to a long-term storage\" \" destination. Only one destination can be specified for one cluster. If\" \" the conf is given, the logs are delivered to the destination every `5\" \" mins`. The destination of driver logs is\" \" `<destination>/<cluster-id>/driver`, while the destination of executor\" \" logs is `<destination>/<cluster-id>/executor`.\" ), ) custom_tags : Optional [ ClusterTag ] = Field ( None , description = ( \"An object containing a set of tags for cluster resources. Databricks tags\" \" all cluster resources (such as AWS instances and EBS volumes) with these\" \" tags in addition to default_tags. \\n\\n **Note**: \\n\\n * Tags are not\" \" supported on legacy node types such as compute-optimized and\" \" memory-optimized \\n * Databricks allows at most 45 custom tags\" ), ) driver_instance_pool_id : Optional [ str ] = Field ( None , description = ( \"The optional ID of the instance pool to use for the driver node. You must\" \" also specify `instance_pool_id`. Refer to [Instance Pools\" \" API](https://docs.databricks.com/dev-tools/api/latest/instance-pools.html)\" \" for details.\" ), ) driver_node_type_id : Optional [ str ] = Field ( None , description = ( \"The node type of the Spark driver. This field is optional; if unset, the\" \" driver node type is set as the same value as `node_type_id` defined\" \" above.\" ), ) enable_elastic_disk : Optional [ bool ] = Field ( None , description = ( \"Autoscaling Local Storage: when enabled, this cluster dynamically acquires\" \" additional disk space when its Spark workers are running low on disk\" \" space. This feature requires specific AWS permissions to function\" \" correctly - refer to [Autoscaling local\" \" storage](https://docs.databricks.com/clusters/configure.html#autoscaling-local-storage)\" \" for details.\" ), ) init_scripts : Optional [ List [ InitScriptInfo ]] = Field ( None , description = ( \"The configuration for storing init scripts. Any number of scripts can be\" \" specified. The scripts are executed sequentially in the order provided.\" \" If `cluster_log_conf` is specified, init script logs are sent to\" \" `<destination>/<cluster-id>/init_scripts`.\" ), ) instance_pool_id : Optional [ str ] = Field ( None , description = ( \"The optional ID of the instance pool to use for cluster nodes. If\" \" `driver_instance_pool_id` is present, `instance_pool_id` is used for\" \" worker nodes only. Otherwise, it is used for both the driver node and\" \" worker nodes. Refer to [Instance Pools\" \" API](https://docs.databricks.com/dev-tools/api/latest/instance-pools.html)\" \" for details.\" ), ) node_type_id : Optional [ str ] = Field ( None , description = ( \"This field encodes, through a single value, the resources available to\" \" each of the Spark nodes in this cluster. For example, the Spark nodes can\" \" be provisioned and optimized for memory or compute intensive workloads A\" \" list of available node types can be retrieved by using the [List node\" \" types](https://docs.databricks.com/dev-tools/api/latest/clusters.html#list-node-types)\" \" API call. This field is required, unless `instance_pool_id` is specified.\" ), ) num_workers : Optional [ int ] = Field ( None , description = ( \"If num_workers, number of worker nodes that this cluster must have. A\" \" cluster has one Spark driver and num_workers executors for a total of\" \" num_workers + 1 Spark nodes. When reading the properties of a cluster,\" \" this field reflects the desired number of workers rather than the actual\" \" current number of workers. For example, if a cluster is resized from 5 to\" \" 10 workers, this field immediately updates to reflect the target size of\" \" 10 workers, whereas the workers listed in `spark_info` gradually increase\" \" from 5 to 10 as the new nodes are provisioned.\" ), ) policy_id : Optional [ str ] = Field ( None , description = ( \"A [cluster\" \" policy](https://docs.databricks.com/dev-tools/api/latest/policies.html) ID.\" ), ) spark_conf : Optional [ SparkConfPair ] = Field ( None , description = ( \"An object containing a set of optional, user-specified Spark configuration\" \" key-value pairs. You can also pass in a string of extra JVM options to\" \" the driver and the executors via `spark.driver.extraJavaOptions` and\" \" `spark.executor.extraJavaOptions` respectively. \\n\\n Example Spark confs:\" ' `{\"spark.speculation\": true, \"spark.streaming.ui.retainedBatches\": 5}` or' ' `{\"spark.driver.extraJavaOptions\": \"-verbose:gc -XX:+PrintGCDetails\"}`' ), ) spark_env_vars : Optional [ SparkEnvPair ] = Field ( None , description = ( \"An object containing a set of optional, user-specified environment\" \" variable key-value pairs. Key-value pair of the form (X,Y) are exported\" \" as is (for example, `export X='Y'`) while launching the driver and\" \" workers. \\n\\n To specify an additional set of `SPARK_DAEMON_JAVA_OPTS`, we\" \" recommend appending them to `$SPARK_DAEMON_JAVA_OPTS` as shown in the\" \" following example. This ensures that all default databricks managed\" \" environmental variables are included as well. \\n\\n Example Spark\" ' environment variables: `{\"SPARK_WORKER_MEMORY\": \"28000m\",' ' \"SPARK_LOCAL_DIRS\": \"/local_disk0\"}` or `{\"SPARK_DAEMON_JAVA_OPTS\":' ' \"$SPARK_DAEMON_JAVA_OPTS -Dspark.shuffle.service.enabled=true\"}`' ), ) spark_version : str = Field ( ... , description = ( \"The Spark version of the cluster. A list of available Spark versions can\" \" be retrieved by using the [Runtime\" \" versions](https://docs.databricks.com/dev-tools/api/latest/clusters.html#runtime-versions)\" \" API call. This field is required.\" ), ) ssh_public_keys : Optional [ List [ str ]] = Field ( None , description = ( \"SSH public key contents that are added to each Spark node in this cluster.\" \" The corresponding private keys can be used to login with the user name\" \" `ubuntu` on port `2200`. Up to 10 keys can be specified.\" ), )","title":"NewCluster"},{"location":"models/jobs/#prefect_databricks.models.jobs.NotebookOutput","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 class NotebookOutput ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False result : Optional [ str ] = Field ( None , description = ( \"The value passed to\" \" [dbutils.notebook.exit()](https://docs.databricks.com/notebooks/notebook-workflows.html#notebook-workflows-exit).\" \" Databricks restricts this API to return the first 5 MB of the value. For\" \" a larger result, your job can store the results in a cloud storage\" \" service. This field is absent if `dbutils.notebook.exit()` was never\" \" called.\" ), example = \"An arbitrary string passed by calling dbutils.notebook.exit(...)\" , ) truncated : Optional [ bool ] = Field ( None , description = \"Whether or not the result was truncated.\" , example = False )","title":"NotebookOutput"},{"location":"models/jobs/#prefect_databricks.models.jobs.NotebookTask","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 class NotebookTask ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False base_parameters : Optional [ Dict [ str , Any ]] = Field ( None , description = ( \"Base parameters to be used for each run of this job. If the run is\" \" initiated by a call to\" \" [`run-now`](https://docs.databricks.com/dev-tools/api/latest/jobs.html#operation/JobsRunNow)\" \" with parameters specified, the two parameters maps are merged. If the\" \" same key is specified in `base_parameters` and in `run-now`, the value\" \" from `run-now` is used. \\n\\n Use [Task parameter\" \" variables](https://docs.databricks.com/jobs.html#parameter-variables) to\" \" set parameters containing information about job runs. \\n\\n If the notebook\" \" takes a parameter that is not specified in the job\u2019s `base_parameters` or\" \" the `run-now` override parameters, the default value from the notebook is\" \" used. \\n\\n Retrieve these parameters in a notebook using\" \" [dbutils.widgets.get](https://docs.databricks.com/dev-tools/databricks-utils.html#dbutils-widgets).\" ), example = { \"age\" : 35 , \"name\" : \"John Doe\" }, ) notebook_path : str = Field ( ... , description = ( \"The path of the notebook to be run in the Databricks workspace or remote\" \" repository. For notebooks stored in the Databricks workspace, the path\" \" must be absolute and begin with a slash. For notebooks stored in a remote\" \" repository, the path must be relative. This field is required.\" ), example = \"/Users/user.name@databricks.com/notebook_to_run\" , ) source : Optional [ Literal [ \"WORKSPACE\" , \"GIT\" ]] = Field ( None , description = ( \"Optional location type of the notebook. When set to `WORKSPACE`, the\" \" notebook will be retrieved from the local Databricks workspace. When set\" \" to `GIT`, the notebook will be retrieved from a Git repository defined in\" \" `git_source`. If the value is empty, the task will use `GIT` if\" \" `git_source` is defined and `WORKSPACE` otherwise.\" ), example = \"WORKSPACE\" , )","title":"NotebookTask"},{"location":"models/jobs/#prefect_databricks.models.jobs.PermissionLevel","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 696 697 698 699 700 701 702 703 704 705 706 707 class PermissionLevel ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False __root__ : Union [ CanManage , CanManageRun , CanView , IsOwner ] = Field ( ... , description = \"Permission level to grant.\" )","title":"PermissionLevel"},{"location":"models/jobs/#prefect_databricks.models.jobs.PermissionLevelForGroup","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 710 711 712 713 714 715 716 717 718 719 720 721 class PermissionLevelForGroup ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False __root__ : Union [ CanManage , CanManageRun , CanView ] = Field ( ... , description = \"Permission level to grant.\" )","title":"PermissionLevelForGroup"},{"location":"models/jobs/#prefect_databricks.models.jobs.PipelineParams","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 855 856 857 858 859 860 861 862 863 864 865 866 class PipelineParams ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False full_refresh : Optional [ bool ] = Field ( None , description = \"If true, triggers a full refresh on the delta live table.\" )","title":"PipelineParams"},{"location":"models/jobs/#prefect_databricks.models.jobs.PipelineTask","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 class PipelineTask ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False full_refresh : Optional [ bool ] = Field ( False , description = ( \"If true, a full refresh will be triggered on the delta live table.\" ), ) pipeline_id : Optional [ str ] = Field ( None , description = \"The full name of the pipeline task to execute.\" , example = \"a12cd3e4-0ab1-1abc-1a2b-1a2bcd3e4fg5\" , )","title":"PipelineTask"},{"location":"models/jobs/#prefect_databricks.models.jobs.PythonPyPiLibrary","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 class PythonPyPiLibrary ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False package : str = Field ( ... , description = ( \"The name of the PyPI package to install. An optional exact version\" \" specification is also supported. Examples: `simplejson` and\" \" `simplejson==3.8.0`. This field is required.\" ), example = \"simplejson==3.8.0\" , ) repo : Optional [ str ] = Field ( None , description = ( \"The repository where the package can be found. If not specified, the\" \" default pip index is used.\" ), example = \"https://my-repo.com\" , )","title":"PythonPyPiLibrary"},{"location":"models/jobs/#prefect_databricks.models.jobs.PythonWheelTask","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 class PythonWheelTask ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False entry_point : Optional [ str ] = Field ( None , description = ( \"Named entry point to use, if it does not exist in the metadata of the\" \" package it executes the function from the package directly using\" \" `$packageName.$entryPoint()`\" ), ) named_parameters : Optional [ Dict [ str , Any ]] = Field ( None , description = ( \"Command-line parameters passed to Python wheel task in the form of\" ' `[\"--name=task\", \"--data=dbfs:/path/to/data.json\"]`. Leave it empty if' \" `parameters` is not null.\" ), example = { \"data\" : \"dbfs:/path/to/data.json\" , \"name\" : \"task\" }, ) package_name : Optional [ str ] = Field ( None , description = \"Name of the package to execute\" ) parameters : Optional [ List [ str ]] = Field ( None , description = ( \"Command-line parameters passed to Python wheel task. Leave it empty if\" \" `named_parameters` is not null.\" ), example = [ \"--name=task\" , \"one\" , \"two\" ], )","title":"PythonWheelTask"},{"location":"models/jobs/#prefect_databricks.models.jobs.RCranLibrary","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 class RCranLibrary ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False package : str = Field ( ... , description = \"The name of the CRAN package to install. This field is required.\" , example = \"geojson\" , ) repo : Optional [ str ] = Field ( None , description = ( \"The repository where the package can be found. If not specified, the\" \" default CRAN repo is used.\" ), example = \"https://my-repo.com\" , )","title":"RCranLibrary"},{"location":"models/jobs/#prefect_databricks.models.jobs.RepairHistoryItem","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 class RepairHistoryItem ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False end_time : Optional [ int ] = Field ( None , description = \"The end time of the (repaired) run.\" , example = 1625060863413 ) id : Optional [ int ] = Field ( None , description = ( \"The ID of the repair. Only returned for the items that represent a repair\" \" in `repair_history`.\" ), example = 734650698524280 , ) start_time : Optional [ int ] = Field ( None , description = \"The start time of the (repaired) run.\" , example = 1625060460483 ) state : Optional [ RunState ] = None task_run_ids : Optional [ List [ int ]] = Field ( None , description = ( \"The run IDs of the task runs that ran as part of this repair history item.\" ), example = [ 1106460542112844 , 988297789683452 ], ) type : Optional [ Literal [ \"ORIGINAL\" , \"REPAIR\" ]] = Field ( None , description = ( \"The repair history item type. Indicates whether a run is the original run\" \" or a repair run.\" ), )","title":"RepairHistoryItem"},{"location":"models/jobs/#prefect_databricks.models.jobs.Run","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 2599 2600 2601 2602 2603 2604 2605 2606 2607 2608 2609 2610 2611 2612 2613 2614 2615 2616 2617 2618 2619 2620 2621 2622 2623 2624 2625 2626 2627 2628 2629 2630 2631 2632 2633 2634 2635 2636 2637 2638 2639 2640 2641 2642 2643 2644 2645 2646 2647 2648 2649 2650 2651 2652 2653 2654 2655 2656 2657 2658 2659 2660 2661 2662 2663 2664 2665 2666 2667 2668 2669 2670 2671 2672 2673 2674 2675 2676 2677 2678 2679 2680 2681 2682 2683 2684 2685 2686 2687 2688 2689 2690 2691 2692 2693 2694 2695 2696 2697 2698 2699 2700 2701 2702 2703 2704 2705 2706 2707 2708 2709 2710 2711 2712 2713 2714 2715 2716 2717 2718 2719 2720 2721 2722 2723 2724 2725 2726 2727 2728 2729 2730 2731 2732 2733 2734 2735 2736 2737 2738 2739 2740 2741 2742 2743 2744 2745 2746 2747 2748 2749 2750 2751 2752 2753 2754 2755 2756 2757 2758 2759 2760 2761 2762 2763 2764 2765 2766 2767 2768 2769 2770 2771 2772 2773 2774 2775 2776 2777 2778 2779 2780 2781 2782 2783 2784 2785 2786 2787 2788 2789 2790 2791 2792 2793 2794 2795 2796 2797 2798 2799 2800 2801 2802 2803 2804 2805 2806 2807 2808 2809 2810 2811 2812 2813 2814 2815 2816 2817 2818 2819 2820 2821 2822 2823 2824 2825 2826 2827 2828 2829 2830 2831 2832 2833 2834 2835 2836 2837 2838 2839 2840 2841 2842 2843 2844 2845 2846 2847 2848 2849 2850 2851 2852 2853 2854 2855 2856 2857 2858 2859 2860 2861 2862 2863 2864 2865 2866 2867 2868 2869 2870 2871 2872 2873 2874 2875 2876 2877 2878 2879 2880 2881 2882 2883 2884 2885 2886 2887 2888 2889 2890 2891 2892 2893 2894 class Run ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False attempt_number : Optional [ int ] = Field ( None , description = ( \"The sequence number of this run attempt for a triggered job run. The\" \" initial attempt of a run has an attempt_number of 0 \\\\ . If the initial run\" \" attempt fails, and the job has a retry policy (`max_retries` \\\\ > 0),\" \" subsequent runs are created with an `original_attempt_run_id` of the\" \" original attempt\u2019s ID and an incrementing `attempt_number`. Runs are\" \" retried only until they succeed, and the maximum `attempt_number` is the\" \" same as the `max_retries` value for the job.\" ), example = 0 , ) cleanup_duration : Optional [ int ] = Field ( None , description = ( \"The time in milliseconds it took to terminate the cluster and clean up any\" \" associated artifacts. The total duration of the run is the sum of the\" \" setup_duration, the execution_duration, and the cleanup_duration.\" ), example = 0 , ) cluster_instance : Optional [ ClusterInstance ] = Field ( None , description = ( \"The cluster used for this run. If the run is specified to use a new\" \" cluster, this field is set once the Jobs service has requested a cluster\" \" for the run.\" ), ) cluster_spec : Optional [ ClusterSpec ] = Field ( None , description = ( \"A snapshot of the job\u2019s cluster specification when this run was created.\" ), ) creator_user_name : Optional [ str ] = Field ( None , description = ( \"The creator user name. This field won\u2019t be included in the response if the\" \" user has already been deleted.\" ), example = \"user.name@databricks.com\" , ) end_time : Optional [ int ] = Field ( None , description = ( \"The time at which this run ended in epoch milliseconds (milliseconds since\" \" 1/1/1970 UTC). This field is set to 0 if the job is still running.\" ), example = 1625060863413 , ) execution_duration : Optional [ int ] = Field ( None , description = ( \"The time in milliseconds it took to execute the commands in the JAR or\" \" notebook until they completed, failed, timed out, were cancelled, or\" \" encountered an unexpected error.\" ), example = 0 , ) git_source : Optional [ GitSource1 ] = Field ( None , description = ( \"This functionality is in Public Preview. \\n\\n An optional specification for\" \" a remote repository containing the notebooks used by this job's notebook\" \" tasks.\" ), example = { \"git_branch\" : \"main\" , \"git_provider\" : \"gitHub\" , \"git_url\" : \"https://github.com/databricks/databricks-cli\" , }, ) job_clusters : Optional [ List [ JobCluster ]] = Field ( None , description = ( \"A list of job cluster specifications that can be shared and reused by\" \" tasks of this job. Libraries cannot be declared in a shared job cluster.\" \" You must declare dependent libraries in task settings.\" ), example = [ { \"job_cluster_key\" : \"auto_scaling_cluster\" , \"new_cluster\" : { \"autoscale\" : { \"max_workers\" : 16 , \"min_workers\" : 2 }, \"aws_attributes\" : { \"availability\" : \"SPOT\" , \"zone_id\" : \"us-west-2a\" }, \"node_type_id\" : \"i3.xlarge\" , \"spark_conf\" : { \"spark.speculation\" : True }, \"spark_version\" : \"7.3.x-scala2.12\" , }, } ], max_items = 100 , ) job_id : Optional [ int ] = Field ( None , description = \"The canonical identifier of the job that contains this run.\" , example = 11223344 , ) number_in_job : Optional [ int ] = Field ( None , deprecated = True , description = ( \"A unique identifier for this job run. This is set to the same value as\" \" `run_id`.\" ), example = 455644833 , ) original_attempt_run_id : Optional [ int ] = Field ( None , description = ( \"If this run is a retry of a prior run attempt, this field contains the\" \" run_id of the original attempt; otherwise, it is the same as the run_id.\" ), example = 455644833 , ) overriding_parameters : Optional [ RunParameters ] = Field ( None , description = \"The parameters used for this run.\" ) run_id : Optional [ int ] = Field ( None , description = ( \"The canonical identifier of the run. This ID is unique across all runs of\" \" all jobs.\" ), example = 455644833 , ) run_name : Optional [ str ] = Field ( \"Untitled\" , description = ( \"An optional name for the run. The maximum allowed length is 4096 bytes in\" \" UTF-8 encoding.\" ), example = \"A multitask job run\" , ) run_page_url : Optional [ str ] = Field ( None , description = \"The URL to the detail page of the run.\" , example = \"https://my-workspace.cloud.databricks.com/#job/11223344/run/123\" , ) run_type : Optional [ RunType ] = None schedule : Optional [ CronSchedule ] = Field ( None , description = ( \"The cron schedule that triggered this run if it was triggered by the\" \" periodic scheduler.\" ), ) setup_duration : Optional [ int ] = Field ( None , description = ( \"The time it took to set up the cluster in milliseconds. For runs that run\" \" on new clusters this is the cluster creation time, for runs that run on\" \" existing clusters this time should be very short.\" ), example = 0 , ) start_time : Optional [ int ] = Field ( None , description = ( \"The time at which this run was started in epoch milliseconds (milliseconds\" \" since 1/1/1970 UTC). This may not be the time when the job task starts\" \" executing, for example, if the job is scheduled to run on a new cluster,\" \" this is the time the cluster creation call is issued.\" ), example = 1625060460483 , ) state : Optional [ RunState ] = Field ( None , description = \"The result and lifecycle states of the run.\" ) tasks : Optional [ List [ RunTask ]] = Field ( None , description = ( \"The list of tasks performed by the run. Each task has its own `run_id`\" \" which you can use to call `JobsGetOutput` to retrieve the run resutls.\" ), example = [ { \"attempt_number\" : 0 , \"cleanup_duration\" : 0 , \"cluster_instance\" : { \"cluster_id\" : \"0923-164208-meows279\" , \"spark_context_id\" : \"4348585301701786933\" , }, \"description\" : \"Ingests order data\" , \"end_time\" : 1629989930171 , \"execution_duration\" : 0 , \"job_cluster_key\" : \"auto_scaling_cluster\" , \"libraries\" : [{ \"jar\" : \"dbfs:/mnt/databricks/OrderIngest.jar\" }], \"run_id\" : 2112892 , \"run_page_url\" : ( \"https://my-workspace.cloud.databricks.com/#job/39832/run/20\" ), \"setup_duration\" : 0 , \"spark_jar_task\" : { \"main_class_name\" : \"com.databricks.OrdersIngest\" , \"run_as_repl\" : True , }, \"start_time\" : 1629989929660 , \"state\" : { \"life_cycle_state\" : \"INTERNAL_ERROR\" , \"result_state\" : \"FAILED\" , \"state_message\" : ( \"Library installation failed for library due to user error.\" \" Error messages: \\n 'Manage' permissions are required to install\" \" libraries on a cluster\" ), \"user_cancelled_or_timedout\" : False , }, \"task_key\" : \"Orders_Ingest\" , }, { \"attempt_number\" : 0 , \"cleanup_duration\" : 0 , \"cluster_instance\" : { \"cluster_id\" : \"0923-164208-meows279\" }, \"depends_on\" : [ { \"task_key\" : \"Orders_Ingest\" }, { \"task_key\" : \"Sessionize\" }, ], \"description\" : \"Matches orders with user sessions\" , \"end_time\" : 1629989930238 , \"execution_duration\" : 0 , \"new_cluster\" : { \"autoscale\" : { \"max_workers\" : 16 , \"min_workers\" : 2 }, \"aws_attributes\" : { \"availability\" : \"SPOT\" , \"zone_id\" : \"us-west-2a\" }, \"node_type_id\" : \"i3.xlarge\" , \"spark_conf\" : { \"spark.speculation\" : True }, \"spark_version\" : \"7.3.x-scala2.12\" , }, \"notebook_task\" : { \"notebook_path\" : \"/Users/user.name@databricks.com/Match\" , \"source\" : \"WORKSPACE\" , }, \"run_id\" : 2112897 , \"run_page_url\" : ( \"https://my-workspace.cloud.databricks.com/#job/39832/run/21\" ), \"setup_duration\" : 0 , \"start_time\" : 0 , \"state\" : { \"life_cycle_state\" : \"SKIPPED\" , \"state_message\" : \"An upstream task failed.\" , \"user_cancelled_or_timedout\" : False , }, \"task_key\" : \"Match\" , }, { \"attempt_number\" : 0 , \"cleanup_duration\" : 0 , \"cluster_instance\" : { \"cluster_id\" : \"0923-164208-meows279\" , \"spark_context_id\" : \"4348585301701786933\" , }, \"description\" : \"Extracts session data from events\" , \"end_time\" : 1629989930144 , \"execution_duration\" : 0 , \"existing_cluster_id\" : \"0923-164208-meows279\" , \"libraries\" : [{ \"jar\" : \"dbfs:/mnt/databricks/Sessionize.jar\" }], \"run_id\" : 2112902 , \"run_page_url\" : ( \"https://my-workspace.cloud.databricks.com/#job/39832/run/22\" ), \"setup_duration\" : 0 , \"spark_jar_task\" : { \"main_class_name\" : \"com.databricks.Sessionize\" , \"run_as_repl\" : True , }, \"start_time\" : 1629989929668 , \"state\" : { \"life_cycle_state\" : \"INTERNAL_ERROR\" , \"result_state\" : \"FAILED\" , \"state_message\" : ( \"Library installation failed for library due to user error.\" \" Error messages: \\n 'Manage' permissions are required to install\" \" libraries on a cluster\" ), \"user_cancelled_or_timedout\" : False , }, \"task_key\" : \"Sessionize\" , }, ], max_items = 100 , ) trigger : Optional [ TriggerType ] = Field ( None , description = \"The type of trigger that fired this run.\" )","title":"Run"},{"location":"models/jobs/#prefect_databricks.models.jobs.RunLifeCycleState","text":"* `PENDING` : The run has been triggered . If there is not already an active run of the same job , the cluster and execution context are being prepared . If there is already an active run of the same job , the run immediately transitions into the `SKIPPED` state without preparing any resources . RUNNING : The task of this run is being executed. TERMINATING : The task of this run has completed, and the cluster and execution context are being cleaned up. TERMINATED : The task of this run has completed, and the cluster and execution context have been cleaned up. This state is terminal. SKIPPED : This run was aborted because a previous run of the same job was already active. This state is terminal. INTERNAL_ERROR : An exceptional state that indicates a failure in the Jobs service, such as network failure over a long period. If a run on a new cluster ends in the INTERNAL_ERROR state, the Jobs service terminates the cluster as soon as possible. This state is terminal. Source code in prefect_databricks/models/jobs.py 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 class RunLifeCycleState ( Enum ): \"\"\" * `PENDING`: The run has been triggered. If there is not already an active run of the same job, the cluster and execution context are being prepared. If there is already an active run of the same job, the run immediately transitions into the `SKIPPED` state without preparing any resources. * `RUNNING`: The task of this run is being executed. * `TERMINATING`: The task of this run has completed, and the cluster and execution context are being cleaned up. * `TERMINATED`: The task of this run has completed, and the cluster and execution context have been cleaned up. This state is terminal. * `SKIPPED`: This run was aborted because a previous run of the same job was already active. This state is terminal. * `INTERNAL_ERROR`: An exceptional state that indicates a failure in the Jobs service, such as network failure over a long period. If a run on a new cluster ends in the `INTERNAL_ERROR` state, the Jobs service terminates the cluster as soon as possible. This state is terminal. \"\"\" pending = \"PENDING\" running = \"RUNNING\" terminating = \"TERMINATING\" terminated = \"TERMINATED\" skipped = \"SKIPPED\" internalerror = \"INTERNAL_ERROR\"","title":"RunLifeCycleState"},{"location":"models/jobs/#prefect_databricks.models.jobs.RunParameters","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 class RunParameters ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False dbt_commands : Optional [ List ] = Field ( None , description = ( \"An array of commands to execute for jobs with the dbt task, for example\" ' `\"dbt_commands\": [\"dbt deps\", \"dbt seed\", \"dbt run\"]`' ), example = [ \"dbt deps\" , \"dbt seed\" , \"dbt run\" ], ) jar_params : Optional [ List [ str ]] = Field ( None , description = ( \"A list of parameters for jobs with Spark JAR tasks, for example\" ' `\"jar_params\": [\"john doe\", \"35\"]`. The parameters are used to invoke the' \" main function of the main class specified in the Spark JAR task. If not\" \" specified upon `run-now`, it defaults to an empty list. jar_params cannot\" \" be specified in conjunction with notebook_params. The JSON representation\" ' of this field (for example `{\"jar_params\":[\"john doe\",\"35\"]}`) cannot' \" exceed 10,000 bytes. \\n\\n Use [Task parameter\" \" variables](https://docs.databricks.com/jobs.html#parameter-variables) to\" \" set parameters containing information about job runs.\" ), example = [ \"john\" , \"doe\" , \"35\" ], ) notebook_params : Optional [ Dict [ str , Any ]] = Field ( None , description = ( \"A map from keys to values for jobs with notebook task, for example\" ' `\"notebook_params\": {\"name\": \"john doe\", \"age\": \"35\"}`. The map is passed' \" to the notebook and is accessible through the\" \" [dbutils.widgets.get](https://docs.databricks.com/dev-tools/databricks-utils.html#dbutils-widgets)\" \" function. \\n\\n If not specified upon `run-now`, the triggered run uses the\" \" job\u2019s base parameters. \\n\\n notebook_params cannot be specified in\" \" conjunction with jar_params. \\n\\n Use [Task parameter\" \" variables](https://docs.databricks.com/jobs.html#parameter-variables) to\" \" set parameters containing information about job runs. \\n\\n The JSON\" \" representation of this field (for example\" ' `{\"notebook_params\":{\"name\":\"john doe\",\"age\":\"35\"}}`) cannot exceed' \" 10,000 bytes.\" ), example = { \"age\" : \"35\" , \"name\" : \"john doe\" }, ) pipeline_params : Optional [ PipelineParams ] = None python_named_params : Optional [ Dict [ str , Any ]] = Field ( None , description = ( \"A map from keys to values for jobs with Python wheel task, for example\" ' `\"python_named_params\": {\"name\": \"task\", \"data\":' ' \"dbfs:/path/to/data.json\"}`.' ), example = { \"data\" : \"dbfs:/path/to/data.json\" , \"name\" : \"task\" }, ) python_params : Optional [ List [ str ]] = Field ( None , description = ( \"A list of parameters for jobs with Python tasks, for example\" ' `\"python_params\": [\"john doe\", \"35\"]`. The parameters are passed to' \" Python file as command-line parameters. If specified upon `run-now`, it\" \" would overwrite the parameters specified in job setting. The JSON\" ' representation of this field (for example `{\"python_params\":[\"john' ' doe\",\"35\"]}`) cannot exceed 10,000 bytes. \\n\\n Use [Task parameter' \" variables](https://docs.databricks.com/jobs.html#parameter-variables) to\" \" set parameters containing information about job\" \" runs. \\n\\n Important \\n\\n These parameters accept only Latin characters\" \" (ASCII character set). Using non-ASCII characters returns an error.\" \" Examples of invalid, non-ASCII characters are Chinese, Japanese kanjis,\" \" and emojis.\" ), example = [ \"john doe\" , \"35\" ], ) spark_submit_params : Optional [ List [ str ]] = Field ( None , description = ( \"A list of parameters for jobs with spark submit task, for example\" ' `\"spark_submit_params\": [\"--class\",' ' \"org.apache.spark.examples.SparkPi\"]`. The parameters are passed to' \" spark-submit script as command-line parameters. If specified upon\" \" `run-now`, it would overwrite the parameters specified in job setting.\" \" The JSON representation of this field (for example\" ' `{\"python_params\":[\"john doe\",\"35\"]}`) cannot exceed 10,000 bytes. \\n\\n Use' \" [Task parameter\" \" variables](https://docs.databricks.com/jobs.html#parameter-variables) to\" \" set parameters containing information about job\" \" runs. \\n\\n Important \\n\\n These parameters accept only Latin characters\" \" (ASCII character set). Using non-ASCII characters returns an error.\" \" Examples of invalid, non-ASCII characters are Chinese, Japanese kanjis,\" \" and emojis.\" ), example = [ \"--class\" , \"org.apache.spark.examples.SparkPi\" ], ) sql_params : Optional [ Dict [ str , Any ]] = Field ( None , description = ( 'A map from keys to values for SQL tasks, for example `\"sql_params\":' ' {\"name\": \"john doe\", \"age\": \"35\"}`. The SQL alert task does not support' \" custom parameters.\" ), example = { \"age\" : \"35\" , \"name\" : \"john doe\" }, )","title":"RunParameters"},{"location":"models/jobs/#prefect_databricks.models.jobs.RunResultState","text":"* `SUCCESS` : The task completed successfully . FAILED : The task completed with an error. TIMEDOUT : The run was stopped after reaching the timeout. CANCELED : The run was canceled at user request. Source code in prefect_databricks/models/jobs.py 978 979 980 981 982 983 984 985 986 987 988 989 class RunResultState ( Enum ): \"\"\" * `SUCCESS`: The task completed successfully. * `FAILED`: The task completed with an error. * `TIMEDOUT`: The run was stopped after reaching the timeout. * `CANCELED`: The run was canceled at user request. \"\"\" success = \"SUCCESS\" failed = \"FAILED\" timedout = \"TIMEDOUT\" canceled = \"CANCELED\"","title":"RunResultState"},{"location":"models/jobs/#prefect_databricks.models.jobs.RunState","text":"See source code for the fields' description. The result and lifecycle state of the run. Source code in prefect_databricks/models/jobs.py 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 class RunState ( BaseModel ): \"\"\" See source code for the fields' description. The result and lifecycle state of the run. \"\"\" class Config : extra = Extra . allow allow_mutation = False life_cycle_state : Optional [ RunLifeCycleState ] = Field ( None , description = ( \"A description of a run\u2019s current location in the run lifecycle. This field\" \" is always available in the response.\" ), ) result_state : Optional [ RunResultState ] = None state_message : Optional [ str ] = Field ( None , description = ( \"A descriptive message for the current state. This field is unstructured,\" \" and its exact format is subject to change.\" ), example = \"\" , ) user_cancelled_or_timedout : Optional [ bool ] = Field ( None , description = ( \"Whether a run was canceled manually by a user or by the scheduler because\" \" the run timed out.\" ), example = False , )","title":"RunState"},{"location":"models/jobs/#prefect_databricks.models.jobs.RunSubmitTaskSettings","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 2134 2135 2136 2137 2138 2139 2140 2141 2142 2143 2144 2145 2146 2147 2148 2149 2150 2151 2152 2153 2154 2155 2156 2157 2158 2159 2160 2161 2162 2163 2164 2165 2166 2167 2168 2169 2170 2171 2172 2173 2174 2175 2176 2177 2178 2179 2180 2181 2182 2183 2184 2185 2186 2187 2188 2189 2190 2191 2192 2193 2194 2195 2196 2197 2198 2199 2200 2201 2202 2203 2204 2205 2206 2207 2208 2209 2210 2211 2212 2213 2214 2215 2216 2217 class RunSubmitTaskSettings ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False depends_on : Optional [ TaskDependencies ] = None existing_cluster_id : Optional [ str ] = Field ( None , description = ( \"If existing_cluster_id, the ID of an existing cluster that is used for all\" \" runs of this task. When running tasks on an existing cluster, you may\" \" need to manually restart the cluster if it stops responding. We suggest\" \" running jobs on new clusters for greater reliability.\" ), example = \"0923-164208-meows279\" , ) libraries : Optional [ List [ Library ]] = Field ( None , description = ( \"An optional list of libraries to be installed on the cluster that executes\" \" the task. The default value is an empty list.\" ), ) new_cluster : Optional [ NewCluster ] = Field ( None , description = ( \"If new_cluster, a description of a cluster that is created for each run.\" ), ) notebook_task : Optional [ NotebookTask ] = Field ( None , description = ( \"If notebook_task, indicates that this task must run a notebook. This field\" \" may not be specified in conjunction with spark_jar_task.\" ), ) pipeline_task : Optional [ PipelineTask ] = Field ( None , description = ( \"If pipeline_task, indicates that this task must execute a Pipeline.\" ), ) python_wheel_task : Optional [ PythonWheelTask ] = Field ( None , description = ( \"If python_wheel_task, indicates that this job must execute a PythonWheel.\" ), ) spark_jar_task : Optional [ SparkJarTask ] = Field ( None , description = \"If spark_jar_task, indicates that this task must run a JAR.\" ) spark_python_task : Optional [ SparkPythonTask ] = Field ( None , description = ( \"If spark_python_task, indicates that this task must run a Python file.\" ), ) spark_submit_task : Optional [ SparkSubmitTask ] = Field ( None , description = ( \"If spark_submit_task, indicates that this task must be launched by the\" \" spark submit script.\" ), ) sql_task : Optional [ SqlTask ] = Field ( None , description = ( \"If sql_task, indicates that this job must execute a SQL task. It requires\" \" both Databricks SQL and a Serverless SQL warehouse.\" ), ) task_key : TaskKey timeout_seconds : Optional [ int ] = Field ( None , description = ( \"An optional timeout applied to each run of this job task. The default\" \" behavior is to have no timeout.\" ), example = 86400 , )","title":"RunSubmitTaskSettings"},{"location":"models/jobs/#prefect_databricks.models.jobs.RunTask","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 2220 2221 2222 2223 2224 2225 2226 2227 2228 2229 2230 2231 2232 2233 2234 2235 2236 2237 2238 2239 2240 2241 2242 2243 2244 2245 2246 2247 2248 2249 2250 2251 2252 2253 2254 2255 2256 2257 2258 2259 2260 2261 2262 2263 2264 2265 2266 2267 2268 2269 2270 2271 2272 2273 2274 2275 2276 2277 2278 2279 2280 2281 2282 2283 2284 2285 2286 2287 2288 2289 2290 2291 2292 2293 2294 2295 2296 2297 2298 2299 2300 2301 2302 2303 2304 2305 2306 2307 2308 2309 2310 2311 2312 2313 2314 2315 2316 2317 2318 2319 2320 2321 2322 2323 2324 2325 2326 2327 2328 2329 2330 2331 2332 2333 2334 2335 2336 2337 2338 2339 2340 2341 2342 2343 2344 2345 2346 2347 2348 2349 2350 2351 2352 2353 2354 2355 2356 2357 2358 2359 2360 2361 2362 2363 2364 2365 2366 2367 2368 2369 2370 2371 2372 2373 2374 2375 2376 2377 2378 2379 2380 2381 2382 2383 2384 2385 2386 2387 class RunTask ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False attempt_number : Optional [ int ] = Field ( None , description = ( \"The sequence number of this run attempt for a triggered job run. The\" \" initial attempt of a run has an attempt_number of 0 \\\\ . If the initial run\" \" attempt fails, and the job has a retry policy (`max_retries` \\\\ > 0),\" \" subsequent runs are created with an `original_attempt_run_id` of the\" \" original attempt\u2019s ID and an incrementing `attempt_number`. Runs are\" \" retried only until they succeed, and the maximum `attempt_number` is the\" \" same as the `max_retries` value for the job.\" ), example = 0 , ) cleanup_duration : Optional [ int ] = Field ( None , description = ( \"The time in milliseconds it took to terminate the cluster and clean up any\" \" associated artifacts. The total duration of the run is the sum of the\" \" setup_duration, the execution_duration, and the cleanup_duration.\" ), example = 0 , ) cluster_instance : Optional [ ClusterInstance ] = Field ( None , description = ( \"The cluster used for this run. If the run is specified to use a new\" \" cluster, this field is set once the Jobs service has requested a cluster\" \" for the run.\" ), ) dbt_task : Optional [ DbtTask ] = Field ( None , description = ( \"If dbt_task, indicates that this must execute a dbt task. It requires both\" \" Databricks SQL and the ability to use a Serverless SQL warehouse.\" ), ) depends_on : Optional [ TaskDependencies ] = None description : Optional [ TaskDescription ] = None end_time : Optional [ int ] = Field ( None , description = ( \"The time at which this run ended in epoch milliseconds (milliseconds since\" \" 1/1/1970 UTC). This field is set to 0 if the job is still running.\" ), example = 1625060863413 , ) execution_duration : Optional [ int ] = Field ( None , description = ( \"The time in milliseconds it took to execute the commands in the JAR or\" \" notebook until they completed, failed, timed out, were cancelled, or\" \" encountered an unexpected error.\" ), example = 0 , ) existing_cluster_id : Optional [ str ] = Field ( None , description = ( \"If existing_cluster_id, the ID of an existing cluster that is used for all\" \" runs of this job. When running jobs on an existing cluster, you may need\" \" to manually restart the cluster if it stops responding. We suggest\" \" running jobs on new clusters for greater reliability.\" ), ) git_source : Optional [ GitSource1 ] = Field ( None , description = ( \"This functionality is in Public Preview. \\n\\n An optional specification for\" \" a remote repository containing the notebooks used by this job's notebook\" \" tasks.\" ), example = { \"git_branch\" : \"main\" , \"git_provider\" : \"gitHub\" , \"git_url\" : \"https://github.com/databricks/databricks-cli\" , }, ) libraries : Optional [ List [ Library ]] = Field ( None , description = ( \"An optional list of libraries to be installed on the cluster that executes\" \" the job. The default value is an empty list.\" ), ) new_cluster : Optional [ NewCluster ] = Field ( None , description = ( \"If new_cluster, a description of a cluster that is created for each run.\" ), ) notebook_task : Optional [ NotebookTask ] = Field ( None , description = ( \"If notebook_task, indicates that this job must run a notebook. This field\" \" may not be specified in conjunction with spark_jar_task.\" ), ) pipeline_task : Optional [ PipelineTask ] = Field ( None , description = ( \"If pipeline_task, indicates that this job must execute a Pipeline.\" ), ) python_wheel_task : Optional [ PythonWheelTask ] = Field ( None , description = ( \"If python_wheel_task, indicates that this job must execute a PythonWheel.\" ), ) run_id : Optional [ int ] = Field ( None , description = \"The ID of the task run.\" , example = 99887766 ) setup_duration : Optional [ int ] = Field ( None , description = ( \"The time it took to set up the cluster in milliseconds. For runs that run\" \" on new clusters this is the cluster creation time, for runs that run on\" \" existing clusters this time should be very short.\" ), example = 0 , ) spark_jar_task : Optional [ SparkJarTask ] = Field ( None , description = \"If spark_jar_task, indicates that this job must run a JAR.\" ) spark_python_task : Optional [ SparkPythonTask ] = Field ( None , description = ( \"If spark_python_task, indicates that this job must run a Python file.\" ), ) spark_submit_task : Optional [ SparkSubmitTask ] = Field ( None , description = ( \"If spark_submit_task, indicates that this job must be launched by the\" \" spark submit script.\" ), ) sql_task : Optional [ SqlTask ] = Field ( None , description = ( \"If sql_task, indicates that this job must execute a SQL task. It requires\" \" both Databricks SQL and a Serverless SQL warehouse.\" ), ) start_time : Optional [ int ] = Field ( None , description = ( \"The time at which this run was started in epoch milliseconds (milliseconds\" \" since 1/1/1970 UTC). This may not be the time when the job task starts\" \" executing, for example, if the job is scheduled to run on a new cluster,\" \" this is the time the cluster creation call is issued.\" ), example = 1625060460483 , ) state : Optional [ RunState ] = Field ( None , description = \"The result and lifecycle states of the run.\" ) task_key : Optional [ TaskKey ] = None","title":"RunTask"},{"location":"models/jobs/#prefect_databricks.models.jobs.RunType","text":"The type of the run. JOB_RUN - Normal job run. A run created with Run now . WORKFLOW_RUN - Workflow run. A run created with dbutils.notebook.run . SUBMIT_RUN - Submit run. A run created with Run now . Source code in prefect_databricks/models/jobs.py 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 class RunType ( Enum ): \"\"\" The type of the run. * `JOB_RUN` \\- Normal job run. A run created with [Run now](https://docs.databricks.com/dev-tools/api/latest/jobs.html#operation/JobsRunNow). * `WORKFLOW_RUN` \\- Workflow run. A run created with [dbutils.notebook.run](https://docs.databricks.com/dev-tools/databricks-utils.html#dbutils-workflow). * `SUBMIT_RUN` \\- Submit run. A run created with [Run now](https://docs.databricks.com/dev-tools/api/latest/jobs.html#operation/JobsRunNow). \"\"\" jobrun = \"JOB_RUN\" workflowrun = \"WORKFLOW_RUN\" submitrun = \"SUBMIT_RUN\"","title":"RunType"},{"location":"models/jobs/#prefect_databricks.models.jobs.S3StorageInfo","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 class S3StorageInfo ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False canned_acl : Optional [ str ] = Field ( None , description = ( \"(Optional) Set canned access control list. For example:\" \" `bucket-owner-full-control`. If canned_acl is set, the cluster instance\" \" profile must have `s3:PutObjectAcl` permission on the destination bucket\" \" and prefix. The full list of possible canned ACLs can be found at\" \" <https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl>.\" \" By default only the object owner gets full control. If you are using\" \" cross account role for writing data, you may want to set\" \" `bucket-owner-full-control` to make bucket owner able to read the logs.\" ), ) destination : Optional [ str ] = Field ( None , description = ( \"S3 destination. For example: `s3://my-bucket/some-prefix` You must\" \" configure the cluster with an instance profile and the instance profile\" \" must have write access to the destination. You _cannot_ use AWS keys.\" ), ) enable_encryption : Optional [ bool ] = Field ( None , description = \"(Optional)Enable server side encryption, `false` by default.\" ) encryption_type : Optional [ str ] = Field ( None , description = ( \"(Optional) The encryption type, it could be `sse-s3` or `sse-kms`. It is\" \" used only when encryption is enabled and the default type is `sse-s3`.\" ), ) endpoint : Optional [ str ] = Field ( None , description = ( \"S3 endpoint. For example: `https://s3-us-west-2.amazonaws.com`. Either\" \" region or endpoint must be set. If both are set, endpoint is used.\" ), ) kms_key : Optional [ str ] = Field ( None , description = ( \"(Optional) KMS key used if encryption is enabled and encryption type is\" \" set to `sse-kms`.\" ), ) region : Optional [ str ] = Field ( None , description = ( \"S3 region. For example: `us-west-2`. Either region or endpoint must be\" \" set. If both are set, endpoint is used.\" ), )","title":"S3StorageInfo"},{"location":"models/jobs/#prefect_databricks.models.jobs.SparkConfPair","text":"See source code for the fields' description. An arbitrary object where the object key is a configuration propery name and the value is a configuration property value. Source code in prefect_databricks/models/jobs.py 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 class SparkConfPair ( BaseModel ): \"\"\" See source code for the fields' description. An arbitrary object where the object key is a configuration propery name and the value is a configuration property value. \"\"\" pass class Config : extra = Extra . allow allow_mutation = False","title":"SparkConfPair"},{"location":"models/jobs/#prefect_databricks.models.jobs.SparkEnvPair","text":"See source code for the fields' description. An arbitrary object where the object key is an environment variable name and the value is an environment variable value. Source code in prefect_databricks/models/jobs.py 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 class SparkEnvPair ( BaseModel ): \"\"\" See source code for the fields' description. An arbitrary object where the object key is an environment variable name and the value is an environment variable value. \"\"\" pass class Config : extra = Extra . allow allow_mutation = False","title":"SparkEnvPair"},{"location":"models/jobs/#prefect_databricks.models.jobs.SparkJarTask","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 class SparkJarTask ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False jar_uri : Optional [ str ] = Field ( None , deprecated = True , description = ( \"Deprecated since 04/2016 \\\\ . Provide a `jar` through the `libraries` field\" \" instead. For an example, see\" \" [Create](https://docs.databricks.com/dev-tools/api/latest/jobs.html#operation/JobsCreate).\" ), ) main_class_name : Optional [ str ] = Field ( None , description = ( \"The full name of the class containing the main method to be executed. This\" \" class must be contained in a JAR provided as a library. \\n\\n The code must\" \" use `SparkContext.getOrCreate` to obtain a Spark context; otherwise, runs\" \" of the job fail.\" ), example = \"com.databricks.ComputeModels\" , ) parameters : Optional [ List [ str ]] = Field ( None , description = ( \"Parameters passed to the main method. \\n\\n Use [Task parameter\" \" variables](https://docs.databricks.com/jobs.html#parameter-variables) to\" \" set parameters containing information about job runs.\" ), example = [ \"--data\" , \"dbfs:/path/to/data.json\" ], )","title":"SparkJarTask"},{"location":"models/jobs/#prefect_databricks.models.jobs.SparkPythonTask","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 class SparkPythonTask ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False parameters : Optional [ List [ str ]] = Field ( None , description = ( \"Command line parameters passed to the Python file. \\n\\n Use [Task parameter\" \" variables](https://docs.databricks.com/jobs.html#parameter-variables) to\" \" set parameters containing information about job runs.\" ), example = [ \"--data\" , \"dbfs:/path/to/data.json\" ], ) python_file : str = Field ( ... , description = ( \"The Python file to be executed. Cloud file URIs (such as dbfs:/, s3:/,\" \" adls:/, gcs:/) and workspace paths are supported. For python files stored\" \" in the Databricks workspace, the path must be absolute and begin with\" \" `/Repos`. This field is required.\" ), example = \"dbfs:/path/to/file.py\" , )","title":"SparkPythonTask"},{"location":"models/jobs/#prefect_databricks.models.jobs.SparkSubmitTask","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 class SparkSubmitTask ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False parameters : Optional [ List [ str ]] = Field ( None , description = ( \"Command-line parameters passed to spark submit. \\n\\n Use [Task parameter\" \" variables](https://docs.databricks.com/jobs.html#parameter-variables) to\" \" set parameters containing information about job runs.\" ), example = [ \"--class\" , \"org.apache.spark.examples.SparkPi\" , \"dbfs:/path/to/examples.jar\" , \"10\" , ], )","title":"SparkSubmitTask"},{"location":"models/jobs/#prefect_databricks.models.jobs.SqlAlertOutput","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 1793 1794 1795 1796 1797 class SqlAlertOutput ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False output_link : Optional [ str ] = Field ( None , description = \"The link to find the output results.\" ) query_text : Optional [ str ] = Field ( None , description = ( \"The text of the SQL query. Can Run permission of the SQL query associated\" \" with the SQL alert is required to view this field.\" ), ) sql_statements : Optional [ SqlStatementOutput ] = Field ( None , description = \"Information about SQL statements executed in the run.\" ) warehouse_id : Optional [ str ] = Field ( None , description = \"The canonical identifier of the SQL warehouse.\" )","title":"SqlAlertOutput"},{"location":"models/jobs/#prefect_databricks.models.jobs.SqlDashboardOutput","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 2390 2391 2392 2393 2394 2395 2396 2397 2398 2399 2400 2401 2402 2403 2404 class SqlDashboardOutput ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False widgets : Optional [ SqlDashboardWidgetOutput ] = Field ( None , description = ( \"Widgets executed in the run. Only SQL query based widgets are listed.\" ), )","title":"SqlDashboardOutput"},{"location":"models/jobs/#prefect_databricks.models.jobs.SqlDashboardWidgetOutput","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 class SqlDashboardWidgetOutput ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False end_time : Optional [ int ] = Field ( None , description = ( \"Time (in epoch milliseconds) when execution of the SQL widget ends.\" ), ) error : Optional [ SqlOutputError ] = Field ( None , description = \"The information about the error when execution fails.\" ) output_link : Optional [ str ] = Field ( None , description = \"The link to find the output results.\" ) start_time : Optional [ int ] = Field ( None , description = ( \"Time (in epoch milliseconds) when execution of the SQL widget starts.\" ), ) status : Optional [ Literal [ \"PENDING\" , \"RUNNING\" , \"SUCCESS\" , \"FAILED\" , \"CANCELLED\" ] ] = Field ( None , description = \"The execution status of the SQL widget.\" ) widget_id : Optional [ str ] = Field ( None , description = \"The canonical identifier of the SQL widget.\" ) widget_title : Optional [ str ] = Field ( None , description = \"The title of the SQL widget.\" )","title":"SqlDashboardWidgetOutput"},{"location":"models/jobs/#prefect_databricks.models.jobs.SqlOutput","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 2407 2408 2409 2410 2411 2412 2413 2414 2415 2416 2417 2418 2419 2420 2421 2422 2423 2424 class SqlOutput ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False alert_output : Optional [ SqlAlertOutput ] = Field ( None , description = \"The output of a SQL alert task, if available.\" ) dashboard_output : Optional [ SqlDashboardOutput ] = Field ( None , description = \"The output of a SQL dashboard task, if available.\" ) query_output : Optional [ SqlQueryOutput ] = Field ( None , description = \"The output of a SQL query task, if available.\" )","title":"SqlOutput"},{"location":"models/jobs/#prefect_databricks.models.jobs.SqlOutputError","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 class SqlOutputError ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False message : Optional [ str ] = Field ( None , description = \"The error message when execution fails.\" )","title":"SqlOutputError"},{"location":"models/jobs/#prefect_databricks.models.jobs.SqlQueryOutput","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 class SqlQueryOutput ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False output_link : Optional [ str ] = Field ( None , description = \"The link to find the output results.\" ) query_text : Optional [ str ] = Field ( None , description = ( \"The text of the SQL query. Can Run permission of the SQL query is required\" \" to view this field.\" ), ) sql_statements : Optional [ SqlStatementOutput ] = Field ( None , description = \"Information about SQL statements executed in the run.\" ) warehouse_id : Optional [ str ] = Field ( None , description = \"The canonical identifier of the SQL warehouse.\" )","title":"SqlQueryOutput"},{"location":"models/jobs/#prefect_databricks.models.jobs.SqlStatementOutput","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 class SqlStatementOutput ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False lookup_key : Optional [ str ] = Field ( None , description = \"A key that can be used to look up query details.\" )","title":"SqlStatementOutput"},{"location":"models/jobs/#prefect_databricks.models.jobs.SqlTask","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1865 1866 1867 1868 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900 class SqlTask ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False alert : Optional [ SqlTaskAlert ] = Field ( None , description = \"If alert, indicates that this job must refresh a SQL alert.\" ) dashboard : Optional [ SqlTaskDashboard ] = Field ( None , description = ( \"If dashboard, indicates that this job must refresh a SQL dashboard.\" ), ) parameters : Optional [ Dict [ str , Any ]] = Field ( None , description = ( \"Parameters to be used for each run of this job. The SQL alert task does\" \" not support custom parameters.\" ), example = { \"age\" : 35 , \"name\" : \"John Doe\" }, ) query : Optional [ SqlTaskQuery ] = Field ( None , description = \"If query, indicates that this job must execute a SQL query.\" ) warehouse_id : str = Field ( ... , description = ( \"The canonical identifier of the SQL warehouse. Only serverless warehouse\" \" is supported.\" ), )","title":"SqlTask"},{"location":"models/jobs/#prefect_databricks.models.jobs.SqlTaskAlert","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 class SqlTaskAlert ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False alert_id : str = Field ( ... , description = \"The canonical identifier of the SQL alert.\" )","title":"SqlTaskAlert"},{"location":"models/jobs/#prefect_databricks.models.jobs.SqlTaskDashboard","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 class SqlTaskDashboard ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False dashboard_id : str = Field ( ... , description = \"The canonical identifier of the SQL dashboard.\" )","title":"SqlTaskDashboard"},{"location":"models/jobs/#prefect_databricks.models.jobs.SqlTaskQuery","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 class SqlTaskQuery ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False query_id : str = Field ( ... , description = \"The canonical identifier of the SQL query.\" )","title":"SqlTaskQuery"},{"location":"models/jobs/#prefect_databricks.models.jobs.TaskDependencies","text":"See source code for the fields' description. An optional array of objects specifying the dependency graph of the task. All tasks specified in this field must complete successfully before executing this task. The key is task_key , and the value is the name assigned to the dependent task. This field is required when a job consists of more than one task. Source code in prefect_databricks/models/jobs.py 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 class TaskDependencies ( BaseModel ): \"\"\" See source code for the fields' description. An optional array of objects specifying the dependency graph of the task. All tasks specified in this field must complete successfully before executing this task. The key is `task_key`, and the value is the name assigned to the dependent task. This field is required when a job consists of more than one task. \"\"\" class Config : extra = Extra . allow allow_mutation = False __root__ : List [ TaskDependency ] = Field ( ... , description = ( \"An optional array of objects specifying the dependency graph of the task.\" \" All tasks specified in this field must complete successfully before\" \" executing this task. \\n The key is `task_key`, and the value is the name\" \" assigned to the dependent task. \\n This field is required when a job\" \" consists of more than one task.\" ), example = [{ \"task_key\" : \"Previous_Task_Key\" }, { \"task_key\" : \"Other_Task_Key\" }], )","title":"TaskDependencies"},{"location":"models/jobs/#prefect_databricks.models.jobs.TaskDependency","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 class TaskDependency ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False task_key : Optional [ str ] = None","title":"TaskDependency"},{"location":"models/jobs/#prefect_databricks.models.jobs.TaskDescription","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 class TaskDescription ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False __root__ : str = Field ( ... , description = ( \"An optional description for this task. \\n The maximum length is 4096 bytes.\" ), example = \"This is the description for this task.\" , max_length = 4096 , )","title":"TaskDescription"},{"location":"models/jobs/#prefect_databricks.models.jobs.TaskKey","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 class TaskKey ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False __root__ : str = Field ( ... , description = ( \"A unique name for the task. This field is used to refer to this task from\" \" other tasks. \\n This field is required and must be unique within its parent\" \" job. \\n On Update or Reset, this field is used to reference the tasks to be\" \" updated or reset. \\n The maximum length is 100 characters.\" ), example = \"Task_Key\" , max_length = 100 , min_length = 1 , regex = \"^[ \\\\ w \\\\ -]+$\" , )","title":"TaskKey"},{"location":"models/jobs/#prefect_databricks.models.jobs.TriggerType","text":"* `PERIODIC` : Schedules that periodically trigger runs , such as a cron scheduler . ONE_TIME : One time triggers that fire a single run. This occurs you triggered a single run on demand through the UI or the API. RETRY : Indicates a run that is triggered as a retry of a previously failed run. This occurs when you request to re-run the job in case of failures. Source code in prefect_databricks/models/jobs.py 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 class TriggerType ( Enum ): \"\"\" * `PERIODIC`: Schedules that periodically trigger runs, such as a cron scheduler. * `ONE_TIME`: One time triggers that fire a single run. This occurs you triggered a single run on demand through the UI or the API. * `RETRY`: Indicates a run that is triggered as a retry of a previously failed run. This occurs when you request to re-run the job in case of failures. \"\"\" periodic = \"PERIODIC\" onetime = \"ONE_TIME\" retry = \"RETRY\"","title":"TriggerType"},{"location":"models/jobs/#prefect_databricks.models.jobs.UserName","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 class UserName ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False __root__ : str = Field ( ... , description = \"Email address for the user.\" , example = \"jsmith@example.com\" )","title":"UserName"},{"location":"models/jobs/#prefect_databricks.models.jobs.ViewItem","text":"See source code for the fields' description. Source code in prefect_databricks/models/jobs.py 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 1921 class ViewItem ( BaseModel ): \"\"\" See source code for the fields' description. \"\"\" class Config : extra = Extra . allow allow_mutation = False content : Optional [ str ] = Field ( None , description = \"Content of the view.\" ) name : Optional [ str ] = Field ( None , description = ( \"Name of the view item. In the case of code view, it would be the\" \" notebook\u2019s name. In the case of dashboard view, it would be the\" \" dashboard\u2019s name.\" ), ) type : Optional [ ViewType ] = Field ( None , description = \"Type of the view item.\" )","title":"ViewItem"},{"location":"models/jobs/#prefect_databricks.models.jobs.ViewType","text":"* `NOTEBOOK` : Notebook view item . DASHBOARD : Dashboard view item. Source code in prefect_databricks/models/jobs.py 1402 1403 1404 1405 1406 1407 1408 1409 class ViewType ( Enum ): \"\"\" * `NOTEBOOK`: Notebook view item. * `DASHBOARD`: Dashboard view item. \"\"\" notebook = \"NOTEBOOK\" dashboard = \"DASHBOARD\"","title":"ViewType"}]}