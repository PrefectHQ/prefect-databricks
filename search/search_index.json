{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Integrate Databricks jobs into your dataflow with prefect-databricks","text":"<p>The prefect-databricks collection makes it easy to coordiante Databricks jobs with other tools in your data stack using Prefect. Check out the examples below to get started!</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#integrate-with-prefect-flows","title":"Integrate with Prefect flows","text":"<p>Using Prefect with Databricks allows you to define and orchestrate complex data workflows that take advantage of the scalability and performance of Databricks.</p> <p>This can be especially useful for data-intensive tasks such as ETL (extract, transform, load) pipelines, machine learning training and inference, and real-time data processing.</p> <p>Below is an example of how you can incorporate Databricks notebooks within your Prefect flows.</p> <p>Be sure to install prefect-databricks and save a credentials block to run the examples below!</p> <p>If you don't have an existing notebook ready on Databricks, you can copy the following, and name it <code>example.ipynb</code>. This notebook, accepts a name parameter from the flow and simply prints a message.</p> <pre><code>name = dbutils.widgets.get(\"name\")\nmessage = f\"Don't worry {name}, I got your request! Welcome to prefect-databricks!\"\nprint(message)\n</code></pre> <p>Here, the flow launches a new cluster to run <code>example.ipynb</code> and waits for the completion of the notebook run. Replace the placeholders and run.</p> <pre><code>from prefect import flow\nfrom prefect_databricks import DatabricksCredentials\nfrom prefect_databricks.flows import jobs_runs_submit_and_wait_for_completion\nfrom prefect_databricks.models.jobs import (\n    AutoScale,\n    AwsAttributes,\n    JobTaskSettings,\n    NotebookTask,\n    NewCluster,\n)\n\n\n@flow\ndef jobs_runs_submit_flow(block_name: str, notebook_path: str, **base_parameters):\n    databricks_credentials = DatabricksCredentials.load(block_name)\n\n    # specify new cluster settings\n    aws_attributes = AwsAttributes(\n        availability=\"SPOT\",\n        zone_id=\"us-west-2a\",\n        ebs_volume_type=\"GENERAL_PURPOSE_SSD\",\n        ebs_volume_count=3,\n        ebs_volume_size=100,\n    )\n    auto_scale = AutoScale(min_workers=1, max_workers=2)\n    new_cluster = NewCluster(\n        aws_attributes=aws_attributes,\n        autoscale=auto_scale,\n        node_type_id=\"m4.large\",\n        spark_version=\"10.4.x-scala2.12\",\n        spark_conf={\"spark.speculation\": True},\n    )\n\n    # specify notebook to use and parameters to pass\n    notebook_task = NotebookTask(\n        notebook_path=notebook_path,\n        base_parameters=base_parameters,\n    )\n\n    # compile job task settings\n    job_task_settings = JobTaskSettings(\n        new_cluster=new_cluster,\n        notebook_task=notebook_task,\n        task_key=\"prefect-task\"\n    )\n\n    run = jobs_runs_submit_and_wait_for_completion(\n        databricks_credentials=databricks_credentials,\n        run_name=\"prefect-job\",\n        tasks=[job_task_settings]\n    )\n\n    return run\n\n\njobs_runs_submit_flow(\n    block_name=\"BLOCK-NAME-PLACEHOLDER\"\n    notebook_path=\"/Users/&lt;EMAIL_ADDRESS_PLACEHOLDER&gt;/example.ipynb\",\n    name=\"Marvin\"\n)\n</code></pre> <p>Upon execution, the notebook run should output:</p> <pre><code>Don't worry Marvin, I got your request! Welcome to prefect-databricks!\n</code></pre> <p>Input dictionaries in the place of models</p> <p>Instead of using the built-in models, you may also input a valid dictionary.</p> <p>For example, the following are equivalent:</p> <pre><code>auto_scale=AutoScale(min_workers=1, max_workers=2)\n</code></pre> <pre><code>auto_scale={\"min_workers\": 1, \"max_workers\": 2}\n</code></pre> <p>If you have an existing Databricks job, you can run it using <code>jobs_runs_submit_by_id_and_wait_for_completion</code>:</p> <pre><code>from prefect import flow\n\nfrom prefect_databricks import DatabricksCredentials\nfrom prefect_databricks.flows import (\n    jobs_runs_submit_by_id_and_wait_for_completion,\n)\n\n\n@flow\ndef existing_job_submit(databricks_credentials_block_name: str, job_id):\n    databricks_credentials = DatabricksCredentials.load(name=block_name)\n\n    run = jobs_runs_submit_by_id_and_wait_for_completion(\n        databricks_credentials=databricks_credentials, job_id=job_id\n    )\n\n    return run\n\nexisting_job_submit(databricks_credentials_block_name=\"db-creds\", job_id=\"YOUR-JOB-NAME\")\n</code></pre>"},{"location":"#resources","title":"Resources","text":"<p>For more tips on how to use tasks and flows in a Collection, check out Using Collections!</p> <p>Note, the tasks within this collection were created by a code generator using the service's OpenAPI spec.</p> <p>The service's REST API documentation can be found here.</p>"},{"location":"#installation","title":"Installation","text":"<p>Install <code>prefect-databricks</code> with <code>pip</code>:</p> <pre><code>pip install prefect-databricks\n</code></pre> <p>Requires an installation of Python 3.7+.</p> <p>We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv.</p> <p>These tasks are designed to work with Prefect 2. For more information about how to use Prefect, please refer to the Prefect documentation.</p>"},{"location":"#saving-credentials-to-block","title":"Saving Credentials to Block","text":"<p>To use the <code>load</code> method on Blocks, you must already have a block document saved through code or saved through the UI.</p> <p>Below is a walkthrough on saving block documents through code; simply create a short script, replacing the placeholders. </p> <ol> <li>Head over to Databricks.</li> <li>Login to your Databricks account and select a workspace.</li> <li>On the top right side of the nav bar, click on your account name -&gt; User Settings.</li> <li>Click Access tokens -&gt; Generate new token -&gt; Generate and copy the token.</li> <li>Note down your Databricks instance from the browser URL, formatted like <code>https://&lt;DATABRICKS-INSTANCE&gt;.cloud.databricks.com/</code></li> <li>Create a short script, replacing the placeholders.</li> </ol> <pre><code>from prefect_databricks import DatabricksCredentials\n\ncredentials = DatabricksCredentials(\n    databricks_instance=\"DATABRICKS-INSTANCE-PLACEHOLDER\"\n    token=\"TOKEN-PLACEHOLDER\"\n)\n\nconnector.save(\"BLOCK_NAME-PLACEHOLDER\")\n</code></pre> <p>Congrats! You can now easily load the saved block, which holds your credentials:</p> <pre><code>from prefect_databricks import DatabricksCredentials\n\nDatabricksCredentials.load(\"BLOCK_NAME-PLACEHOLDER\")\n</code></pre> <p>Registering blocks</p> <p>Register blocks in this module to view and edit them on Prefect Cloud:</p> <pre><code>prefect block register -m prefect_databricks\n</code></pre>"},{"location":"#feedback","title":"Feedback","text":"<p>If you encounter any bugs while using <code>prefect-databricks</code>, feel free to open an issue in the prefect-databricks repository.</p> <p>If you have any questions or issues while using <code>prefect-databricks</code>, you can find help in either the Prefect Discourse forum or the Prefect Slack community.</p> <p>Feel free to star or watch <code>prefect-databricks</code> for updates too!</p>"},{"location":"#contributing","title":"Contributing","text":"<p>If you'd like to help contribute to fix an issue or add a feature to <code>prefect-databricks</code>, please propose changes through a pull request from a fork of the repository.</p> <p>Here are the steps:</p> <ol> <li>Fork the repository</li> <li>Clone the forked repository</li> <li>Install the repository and its dependencies: <pre><code>pip install -e \".[dev]\"\n</code></pre></li> <li>Make desired changes</li> <li>Add tests</li> <li>Insert an entry to CHANGELOG.md</li> <li>Install <code>pre-commit</code> to perform quality checks prior to commit: <pre><code>pre-commit install\n</code></pre></li> <li><code>git commit</code>, <code>git push</code>, and create a pull request</li> </ol>"},{"location":"blocks_catalog/","title":"Blocks Catalog","text":"<p>Below is a list of Blocks available for registration in <code>prefect-databricks</code>.</p> <p>To register blocks in this module to view and edit them on Prefect Cloud, first install the required packages, then <pre><code>prefect block register -m prefect_databricks\n</code></pre> Note, to use the <code>load</code> method on Blocks, you must already have a block document saved through code or saved through the UI.</p>"},{"location":"blocks_catalog/#credentials-module","title":"Credentials Module","text":"<p>DatabricksCredentials</p> <p>Block used to manage Databricks authentication.</p> <p>To load the DatabricksCredentials: <pre><code>from prefect import flow\nfrom prefect_databricks.credentials import DatabricksCredentials\n\n@flow\ndef my_flow():\n    my_block = DatabricksCredentials.load(\"MY_BLOCK_NAME\")\n\nmy_flow()\n</code></pre> For additional examples, check out the Credentials Module under Examples Catalog.</p>"},{"location":"credentials/","title":"Credentials","text":""},{"location":"credentials/#prefect_databricks.credentials","title":"<code>prefect_databricks.credentials</code>","text":"<p>Credential classes used to perform authenticated interactions with Databricks</p>"},{"location":"credentials/#prefect_databricks.credentials-classes","title":"Classes","text":""},{"location":"credentials/#prefect_databricks.credentials.DatabricksCredentials","title":"<code>DatabricksCredentials</code>","text":"<p>             Bases: <code>Block</code></p> <p>Block used to manage Databricks authentication.</p> <p>Attributes:</p> Name Type Description <code>databricks_instance</code> <code>str</code> <p>Databricks instance used in formatting the endpoint URL.</p> <code>token</code> <code>SecretStr</code> <p>The token to authenticate with Databricks.</p> <code>client_kwargs</code> <code>Optional[Dict[str, Any]]</code> <p>Additional keyword arguments to pass to AsyncClient.</p> <p>Examples:</p> <p>Load stored Databricks credentials: <pre><code>from prefect_databricks import DatabricksCredentials\ndatabricks_credentials_block = DatabricksCredentials.load(\"BLOCK_NAME\")\n</code></pre></p> Source code in <code>prefect_databricks/credentials.py</code> <pre><code>class DatabricksCredentials(Block):\n    \"\"\"\n    Block used to manage Databricks authentication.\n\n    Attributes:\n        databricks_instance:\n            Databricks instance used in formatting the endpoint URL.\n        token: The token to authenticate with Databricks.\n        client_kwargs: Additional keyword arguments to pass to AsyncClient.\n\n    Examples:\n        Load stored Databricks credentials:\n        ```python\n        from prefect_databricks import DatabricksCredentials\n        databricks_credentials_block = DatabricksCredentials.load(\"BLOCK_NAME\")\n        ```\n    \"\"\"\n\n    _block_type_name = \"Databricks Credentials\"\n    _logo_url = \"https://cdn.sanity.io/images/3ugk85nk/production/ff9a2573c23954bedd27b0f420465a55b1a99dfd-250x250.png\"  # noqa\n    _documentation_url = \"https://prefecthq.github.io/prefect-databricks/credentials/#prefect_databricks.credentials.DatabricksCredentials\"  # noqa\n\n    databricks_instance: str = Field(\n        default=...,\n        description=\"Databricks instance used in formatting the endpoint URL.\",\n    )\n    token: SecretStr = Field(\n        default=..., description=\"The token to authenticate with Databricks.\"\n    )\n    client_kwargs: Optional[Dict[str, Any]] = Field(\n        default=None, description=\"Additional keyword arguments to pass to AsyncClient.\"\n    )\n\n    def get_client(self) -&gt; AsyncClient:\n        \"\"\"\n        Gets an Databricks REST AsyncClient.\n\n        Returns:\n            An Databricks REST AsyncClient.\n\n        Example:\n            Gets a Databricks REST AsyncClient.\n            ```python\n            from prefect import flow\n            from prefect_databricks import DatabricksCredentials\n\n            @flow\n            def example_get_client_flow():\n                token = \"consumer_key\"\n                databricks_credentials = DatabricksCredentials(token=token)\n                client = databricks_credentials.get_client()\n                return client\n\n            example_get_client_flow()\n            ```\n        \"\"\"\n        base_url = f\"https://{self.databricks_instance}/api/\"\n\n        client_kwargs = self.client_kwargs or {}\n        client_kwargs[\"headers\"] = {\n            \"Authorization\": f\"Bearer {self.token.get_secret_value()}\"\n        }\n        client = AsyncClient(base_url=base_url, **client_kwargs)\n        return client\n</code></pre>"},{"location":"credentials/#prefect_databricks.credentials.DatabricksCredentials-functions","title":"Functions","text":""},{"location":"credentials/#prefect_databricks.credentials.DatabricksCredentials.get_client","title":"<code>get_client</code>","text":"<p>Gets an Databricks REST AsyncClient.</p> <p>Returns:</p> Type Description <code>AsyncClient</code> <p>An Databricks REST AsyncClient.</p> Example <p>Gets a Databricks REST AsyncClient. <pre><code>from prefect import flow\nfrom prefect_databricks import DatabricksCredentials\n\n@flow\ndef example_get_client_flow():\n    token = \"consumer_key\"\n    databricks_credentials = DatabricksCredentials(token=token)\n    client = databricks_credentials.get_client()\n    return client\n\nexample_get_client_flow()\n</code></pre></p> Source code in <code>prefect_databricks/credentials.py</code> <pre><code>def get_client(self) -&gt; AsyncClient:\n    \"\"\"\n    Gets an Databricks REST AsyncClient.\n\n    Returns:\n        An Databricks REST AsyncClient.\n\n    Example:\n        Gets a Databricks REST AsyncClient.\n        ```python\n        from prefect import flow\n        from prefect_databricks import DatabricksCredentials\n\n        @flow\n        def example_get_client_flow():\n            token = \"consumer_key\"\n            databricks_credentials = DatabricksCredentials(token=token)\n            client = databricks_credentials.get_client()\n            return client\n\n        example_get_client_flow()\n        ```\n    \"\"\"\n    base_url = f\"https://{self.databricks_instance}/api/\"\n\n    client_kwargs = self.client_kwargs or {}\n    client_kwargs[\"headers\"] = {\n        \"Authorization\": f\"Bearer {self.token.get_secret_value()}\"\n    }\n    client = AsyncClient(base_url=base_url, **client_kwargs)\n    return client\n</code></pre>"},{"location":"examples_catalog/","title":"Examples Catalog","text":"<p>Below is a list of examples for <code>prefect-databricks</code>.</p>"},{"location":"examples_catalog/#credentials-module","title":"Credentials Module","text":"<p>Gets a Databricks REST AsyncClient. <pre><code>from prefect import flow\nfrom prefect_databricks import DatabricksCredentials\n\n@flow\ndef example_get_client_flow():\n    token = \"consumer_key\"\n    databricks_credentials = DatabricksCredentials(token=token)\n    client = databricks_credentials.get_client()\n    return client\n\nexample_get_client_flow()\n</code></pre></p>"},{"location":"examples_catalog/#flows-module","title":"Flows Module","text":"<p><pre><code>from prefect import flow\nfrom prefect_databricks import DatabricksCredentials\nfrom prefect_databricks.flows import (\n    jobs_runs_submit_by_id_and_wait_for_completion,\n)\n\n\n@flow\ndef submit_existing_job(block_name: str, job_id):\n    databricks_credentials = DatabricksCredentials.load(block_name)\n\n    run = jobs_runs_submit_by_id_and_wait_for_completion(\n        databricks_credentials=databricks_credentials, job_id=job_id\n    )\n\n    return run\n\n\nsubmit_existing_job(block_name=\"db-creds\", job_id=db_job_id)\n</code></pre> Waits for completion on jobs runs. <pre><code>from prefect import flow\nfrom prefect_databricks import DatabricksCredentials\nfrom prefect_databricks.flows import jobs_runs_wait_for_completion\n\n@flow\ndef jobs_runs_wait_for_completion_flow():\n    databricks_credentials = DatabricksCredentials.load(\"BLOCK_NAME\")\n    return jobs_runs_wait_for_completion(\n        multi_task_jobs_run_id=45429,\n        databricks_credentials=databricks_credentials,\n        run_name=\"my_run_name\",\n        max_wait_seconds=1800,  # 30 minutes\n        poll_frequency_seconds=120,  # 2 minutes\n    )\n</code></pre></p>"},{"location":"examples_catalog/#rest-module","title":"Rest Module","text":"<p>Lists jobs on the Databricks instance. <pre><code>from prefect import flow\nfrom prefect_databricks import DatabricksCredentials\nfrom prefect_databricks.rest import execute_endpoint\n@flow\ndef example_execute_endpoint_flow():\n    endpoint = \"/2.1/jobs/list\"\n    databricks_credentials = DatabricksCredentials.load(\"my-block\")\n    params = {\n        \"limit\": 5,\n        \"offset\": None,\n        \"expand_tasks\": True,\n    }\n    response = execute_endpoint(\n        endpoint,\n        databricks_credentials,\n        params=params\n    )\n    return response.json()\n</code></pre></p>"},{"location":"flows/","title":"Flows","text":""},{"location":"flows/#prefect_databricks.flows","title":"<code>prefect_databricks.flows</code>","text":"<p>Module containing flows for interacting with Databricks</p>"},{"location":"flows/#prefect_databricks.flows-classes","title":"Classes","text":""},{"location":"flows/#prefect_databricks.flows.DatabricksJobInternalError","title":"<code>DatabricksJobInternalError</code>","text":"<p>             Bases: <code>Exception</code></p> <p>Raised when Databricks jobs runs submit encounters internal error</p> Source code in <code>prefect_databricks/flows.py</code> <pre><code>class DatabricksJobInternalError(Exception):\n    \"\"\"Raised when Databricks jobs runs submit encounters internal error\"\"\"\n</code></pre>"},{"location":"flows/#prefect_databricks.flows.DatabricksJobRunTimedOut","title":"<code>DatabricksJobRunTimedOut</code>","text":"<p>             Bases: <code>Exception</code></p> <p>Raised when Databricks jobs runs does not complete in the configured max wait seconds</p> Source code in <code>prefect_databricks/flows.py</code> <pre><code>class DatabricksJobRunTimedOut(Exception):\n    \"\"\"\n    Raised when Databricks jobs runs does not complete in the configured max\n    wait seconds\n    \"\"\"\n</code></pre>"},{"location":"flows/#prefect_databricks.flows.DatabricksJobSkipped","title":"<code>DatabricksJobSkipped</code>","text":"<p>             Bases: <code>Exception</code></p> <p>Raised when Databricks jobs runs submit skips</p> Source code in <code>prefect_databricks/flows.py</code> <pre><code>class DatabricksJobSkipped(Exception):\n    \"\"\"Raised when Databricks jobs runs submit skips\"\"\"\n</code></pre>"},{"location":"flows/#prefect_databricks.flows.DatabricksJobTerminated","title":"<code>DatabricksJobTerminated</code>","text":"<p>             Bases: <code>Exception</code></p> <p>Raised when Databricks jobs runs submit terminates</p> Source code in <code>prefect_databricks/flows.py</code> <pre><code>class DatabricksJobTerminated(Exception):\n    \"\"\"Raised when Databricks jobs runs submit terminates\"\"\"\n</code></pre>"},{"location":"flows/#prefect_databricks.flows-functions","title":"Functions","text":""},{"location":"flows/#prefect_databricks.flows.jobs_runs_submit_and_wait_for_completion","title":"<code>jobs_runs_submit_and_wait_for_completion</code>  <code>async</code>","text":"<p>Flow that triggers a job run and waits for the triggered run to complete. Args:     databricks_credentials:         Credentials to use for authentication with Databricks.     tasks: Tasks to run, e.g.         <pre><code>[\n    {\n        \"task_key\": \"Sessionize\",\n        \"description\": \"Extracts session data from events\",\n        \"depends_on\": [],\n        \"existing_cluster_id\": \"0923-164208-meows279\",\n        \"spark_jar_task\": {\n            \"main_class_name\": \"com.databricks.Sessionize\",\n            \"parameters\": [\"--data\", \"dbfs:/path/to/data.json\"],\n        },\n        \"libraries\": [{\"jar\": \"dbfs:/mnt/databricks/Sessionize.jar\"}],\n        \"timeout_seconds\": 86400,\n    },\n    {\n        \"task_key\": \"Orders_Ingest\",\n        \"description\": \"Ingests order data\",\n        \"depends_on\": [],\n        \"existing_cluster_id\": \"0923-164208-meows279\",\n        \"spark_jar_task\": {\n            \"main_class_name\": \"com.databricks.OrdersIngest\",\n            \"parameters\": [\"--data\", \"dbfs:/path/to/order-data.json\"],\n        },\n        \"libraries\": [{\"jar\": \"dbfs:/mnt/databricks/OrderIngest.jar\"}],\n        \"timeout_seconds\": 86400,\n    },\n    {\n        \"task_key\": \"Match\",\n        \"description\": \"Matches orders with user sessions\",\n        \"depends_on\": [\n            {\"task_key\": \"Orders_Ingest\"},\n            {\"task_key\": \"Sessionize\"},\n        ],\n        \"new_cluster\": {\n            \"spark_version\": \"7.3.x-scala2.12\",\n            \"node_type_id\": \"i3.xlarge\",\n            \"spark_conf\": {\"spark.speculation\": True},\n            \"aws_attributes\": {\n                \"availability\": \"SPOT\",\n                \"zone_id\": \"us-west-2a\",\n            },\n            \"autoscale\": {\"min_workers\": 2, \"max_workers\": 16},\n        },\n        \"notebook_task\": {\n            \"notebook_path\": \"/Users/user.name@databricks.com/Match\",\n            \"base_parameters\": {\"name\": \"John Doe\", \"age\": \"35\"},\n        },\n        \"timeout_seconds\": 86400,\n    },\n]\n</code></pre>     run_name:         An optional name for the run. The default value is <code>Untitled</code>, e.g. <code>A         multitask job run</code>.     git_source:         This functionality is in Public Preview.  An optional specification for         a remote repository containing the notebooks used by this         job's notebook tasks. Key-values:         - git_url:             URL of the repository to be cloned by this job. The maximum             length is 300 characters, e.g.             <code>https://github.com/databricks/databricks-cli</code>.         - git_provider:             Unique identifier of the service used to host the Git             repository. The value is case insensitive, e.g. <code>github</code>.         - git_branch:             Name of the branch to be checked out and used by this job.             This field cannot be specified in conjunction with git_tag             or git_commit. The maximum length is 255 characters, e.g.             <code>main</code>.         - git_tag:             Name of the tag to be checked out and used by this job. This             field cannot be specified in conjunction with git_branch or             git_commit. The maximum length is 255 characters, e.g.             <code>release-1.0.0</code>.         - git_commit:             Commit to be checked out and used by this job. This field             cannot be specified in conjunction with git_branch or             git_tag. The maximum length is 64 characters, e.g.             <code>e0056d01</code>.         - git_snapshot:             Read-only state of the remote repository at the time the job was run.                         This field is only included on job runs.     timeout_seconds:         An optional timeout applied to each run of this job. The default         behavior is to have no timeout, e.g. <code>86400</code>.     idempotency_token:         An optional token that can be used to guarantee the idempotency of job         run requests. If a run with the provided token already         exists, the request does not create a new run but returns         the ID of the existing run instead. If a run with the         provided token is deleted, an error is returned.  If you         specify the idempotency token, upon failure you can retry         until the request succeeds. Databricks guarantees that         exactly one run is launched with that idempotency token.         This token must have at most 64 characters.  For more         information, see How to ensure idempotency for         jobs,         e.g. <code>8f018174-4792-40d5-bcbc-3e6a527352c8</code>.     access_control_list:         List of permissions to set on the job.     max_wait_seconds: Maximum number of seconds to wait for the entire flow to complete.     poll_frequency_seconds: Number of seconds to wait in between checks for         run completion.     job_submission_handler: An optional callable to intercept job submission     **jobs_runs_submit_kwargs: Additional keyword arguments to pass to <code>jobs_runs_submit</code>. Returns:     A dictionary of task keys to its corresponding notebook output. Examples:     Submit jobs runs and wait.     <pre><code>from prefect import flow\nfrom prefect_databricks import DatabricksCredentials\nfrom prefect_databricks.flows import jobs_runs_submit_and_wait_for_completion\nfrom prefect_databricks.models.jobs import (\n    AutoScale,\n    AwsAttributes,\n    JobTaskSettings,\n    NotebookTask,\n    NewCluster,\n)\n@flow\ndef jobs_runs_submit_and_wait_for_completion_flow(notebook_path, **base_parameters):\n    databricks_credentials = await DatabricksCredentials.load(\"BLOCK_NAME\")\n    # specify new cluster settings\n    aws_attributes = AwsAttributes(\n        availability=\"SPOT\",\n        zone_id=\"us-west-2a\",\n        ebs_volume_type=\"GENERAL_PURPOSE_SSD\",\n        ebs_volume_count=3,\n        ebs_volume_size=100,\n    )\n    auto_scale = AutoScale(min_workers=1, max_workers=2)\n    new_cluster = NewCluster(\n        aws_attributes=aws_attributes,\n        autoscale=auto_scale,\n        node_type_id=\"m4.large\",\n        spark_version=\"10.4.x-scala2.12\",\n        spark_conf={\"spark.speculation\": True},\n    )\n    # specify notebook to use and parameters to pass\n    notebook_task = NotebookTask(\n        notebook_path=notebook_path,\n        base_parameters=base_parameters,\n    )\n    # compile job task settings\n    job_task_settings = JobTaskSettings(\n        new_cluster=new_cluster,\n        notebook_task=notebook_task,\n        task_key=\"prefect-task\"\n    )\n    multi_task_runs = jobs_runs_submit_and_wait_for_completion(\n        databricks_credentials=databricks_credentials,\n        run_name=\"prefect-job\",\n        tasks=[job_task_settings]\n    )\n    return multi_task_runs\n</code></pre></p> Source code in <code>prefect_databricks/flows.py</code> <pre><code>@flow(\n    name=\"Submit jobs runs and wait for completion\",\n    description=(\n        \"Triggers a Databricks jobs runs and waits for the \"\n        \"triggered runs to complete.\"\n    ),\n)\nasync def jobs_runs_submit_and_wait_for_completion(\n    databricks_credentials: DatabricksCredentials,\n    tasks: List[RunSubmitTaskSettings] = None,\n    run_name: Optional[str] = None,\n    max_wait_seconds: int = 900,\n    poll_frequency_seconds: int = 10,\n    git_source: Optional[GitSource] = None,\n    timeout_seconds: Optional[int] = None,\n    idempotency_token: Optional[str] = None,\n    access_control_list: Optional[List[AccessControlRequest]] = None,\n    job_submission_handler: Optional[Callable] = None,\n    **jobs_runs_submit_kwargs: Dict[str, Any],\n) -&gt; Dict:\n    \"\"\"\n    Flow that triggers a job run and waits for the triggered run to complete.\n    Args:\n        databricks_credentials:\n            Credentials to use for authentication with Databricks.\n        tasks: Tasks to run, e.g.\n            ```\n            [\n                {\n                    \"task_key\": \"Sessionize\",\n                    \"description\": \"Extracts session data from events\",\n                    \"depends_on\": [],\n                    \"existing_cluster_id\": \"0923-164208-meows279\",\n                    \"spark_jar_task\": {\n                        \"main_class_name\": \"com.databricks.Sessionize\",\n                        \"parameters\": [\"--data\", \"dbfs:/path/to/data.json\"],\n                    },\n                    \"libraries\": [{\"jar\": \"dbfs:/mnt/databricks/Sessionize.jar\"}],\n                    \"timeout_seconds\": 86400,\n                },\n                {\n                    \"task_key\": \"Orders_Ingest\",\n                    \"description\": \"Ingests order data\",\n                    \"depends_on\": [],\n                    \"existing_cluster_id\": \"0923-164208-meows279\",\n                    \"spark_jar_task\": {\n                        \"main_class_name\": \"com.databricks.OrdersIngest\",\n                        \"parameters\": [\"--data\", \"dbfs:/path/to/order-data.json\"],\n                    },\n                    \"libraries\": [{\"jar\": \"dbfs:/mnt/databricks/OrderIngest.jar\"}],\n                    \"timeout_seconds\": 86400,\n                },\n                {\n                    \"task_key\": \"Match\",\n                    \"description\": \"Matches orders with user sessions\",\n                    \"depends_on\": [\n                        {\"task_key\": \"Orders_Ingest\"},\n                        {\"task_key\": \"Sessionize\"},\n                    ],\n                    \"new_cluster\": {\n                        \"spark_version\": \"7.3.x-scala2.12\",\n                        \"node_type_id\": \"i3.xlarge\",\n                        \"spark_conf\": {\"spark.speculation\": True},\n                        \"aws_attributes\": {\n                            \"availability\": \"SPOT\",\n                            \"zone_id\": \"us-west-2a\",\n                        },\n                        \"autoscale\": {\"min_workers\": 2, \"max_workers\": 16},\n                    },\n                    \"notebook_task\": {\n                        \"notebook_path\": \"/Users/user.name@databricks.com/Match\",\n                        \"base_parameters\": {\"name\": \"John Doe\", \"age\": \"35\"},\n                    },\n                    \"timeout_seconds\": 86400,\n                },\n            ]\n            ```\n        run_name:\n            An optional name for the run. The default value is `Untitled`, e.g. `A\n            multitask job run`.\n        git_source:\n            This functionality is in Public Preview.  An optional specification for\n            a remote repository containing the notebooks used by this\n            job's notebook tasks. Key-values:\n            - git_url:\n                URL of the repository to be cloned by this job. The maximum\n                length is 300 characters, e.g.\n                `https://github.com/databricks/databricks-cli`.\n            - git_provider:\n                Unique identifier of the service used to host the Git\n                repository. The value is case insensitive, e.g. `github`.\n            - git_branch:\n                Name of the branch to be checked out and used by this job.\n                This field cannot be specified in conjunction with git_tag\n                or git_commit. The maximum length is 255 characters, e.g.\n                `main`.\n            - git_tag:\n                Name of the tag to be checked out and used by this job. This\n                field cannot be specified in conjunction with git_branch or\n                git_commit. The maximum length is 255 characters, e.g.\n                `release-1.0.0`.\n            - git_commit:\n                Commit to be checked out and used by this job. This field\n                cannot be specified in conjunction with git_branch or\n                git_tag. The maximum length is 64 characters, e.g.\n                `e0056d01`.\n            - git_snapshot:\n                Read-only state of the remote repository at the time the job was run.\n                            This field is only included on job runs.\n        timeout_seconds:\n            An optional timeout applied to each run of this job. The default\n            behavior is to have no timeout, e.g. `86400`.\n        idempotency_token:\n            An optional token that can be used to guarantee the idempotency of job\n            run requests. If a run with the provided token already\n            exists, the request does not create a new run but returns\n            the ID of the existing run instead. If a run with the\n            provided token is deleted, an error is returned.  If you\n            specify the idempotency token, upon failure you can retry\n            until the request succeeds. Databricks guarantees that\n            exactly one run is launched with that idempotency token.\n            This token must have at most 64 characters.  For more\n            information, see [How to ensure idempotency for\n            jobs](https://kb.databricks.com/jobs/jobs-idempotency.html),\n            e.g. `8f018174-4792-40d5-bcbc-3e6a527352c8`.\n        access_control_list:\n            List of permissions to set on the job.\n        max_wait_seconds: Maximum number of seconds to wait for the entire flow to complete.\n        poll_frequency_seconds: Number of seconds to wait in between checks for\n            run completion.\n        job_submission_handler: An optional callable to intercept job submission\n        **jobs_runs_submit_kwargs: Additional keyword arguments to pass to `jobs_runs_submit`.\n    Returns:\n        A dictionary of task keys to its corresponding notebook output.\n    Examples:\n        Submit jobs runs and wait.\n        ```python\n        from prefect import flow\n        from prefect_databricks import DatabricksCredentials\n        from prefect_databricks.flows import jobs_runs_submit_and_wait_for_completion\n        from prefect_databricks.models.jobs import (\n            AutoScale,\n            AwsAttributes,\n            JobTaskSettings,\n            NotebookTask,\n            NewCluster,\n        )\n        @flow\n        def jobs_runs_submit_and_wait_for_completion_flow(notebook_path, **base_parameters):\n            databricks_credentials = await DatabricksCredentials.load(\"BLOCK_NAME\")\n            # specify new cluster settings\n            aws_attributes = AwsAttributes(\n                availability=\"SPOT\",\n                zone_id=\"us-west-2a\",\n                ebs_volume_type=\"GENERAL_PURPOSE_SSD\",\n                ebs_volume_count=3,\n                ebs_volume_size=100,\n            )\n            auto_scale = AutoScale(min_workers=1, max_workers=2)\n            new_cluster = NewCluster(\n                aws_attributes=aws_attributes,\n                autoscale=auto_scale,\n                node_type_id=\"m4.large\",\n                spark_version=\"10.4.x-scala2.12\",\n                spark_conf={\"spark.speculation\": True},\n            )\n            # specify notebook to use and parameters to pass\n            notebook_task = NotebookTask(\n                notebook_path=notebook_path,\n                base_parameters=base_parameters,\n            )\n            # compile job task settings\n            job_task_settings = JobTaskSettings(\n                new_cluster=new_cluster,\n                notebook_task=notebook_task,\n                task_key=\"prefect-task\"\n            )\n            multi_task_runs = jobs_runs_submit_and_wait_for_completion(\n                databricks_credentials=databricks_credentials,\n                run_name=\"prefect-job\",\n                tasks=[job_task_settings]\n            )\n            return multi_task_runs\n        ```\n    \"\"\"  # noqa\n    logger = get_run_logger()\n\n    # submit the jobs runs\n    multi_task_jobs_runs_future = await jobs_runs_submit.submit(\n        databricks_credentials=databricks_credentials,\n        tasks=tasks,\n        run_name=run_name,\n        git_source=git_source,\n        timeout_seconds=timeout_seconds,\n        idempotency_token=idempotency_token,\n        access_control_list=access_control_list,\n        **jobs_runs_submit_kwargs,\n    )\n\n    multi_task_jobs_runs = await multi_task_jobs_runs_future.result()\n    if job_submission_handler:\n        result = job_submission_handler(multi_task_jobs_runs)\n        if inspect.isawaitable(result):\n            await result\n    multi_task_jobs_runs_id = multi_task_jobs_runs[\"run_id\"]\n\n    # wait for all the jobs runs to complete in a separate flow\n    # for a cleaner radar interface\n    jobs_runs_state, jobs_runs_metadata = await jobs_runs_wait_for_completion(\n        multi_task_jobs_runs_id=multi_task_jobs_runs_id,\n        databricks_credentials=databricks_credentials,\n        run_name=run_name,\n        max_wait_seconds=max_wait_seconds,\n        poll_frequency_seconds=poll_frequency_seconds,\n    )\n\n    # fetch the state results\n    jobs_runs_life_cycle_state = jobs_runs_state[\"life_cycle_state\"]\n    jobs_runs_state_message = jobs_runs_state[\"state_message\"]\n\n    # return results or raise error\n    if jobs_runs_life_cycle_state == RunLifeCycleState.terminated.value:\n        jobs_runs_result_state = jobs_runs_state.get(\"result_state\", None)\n        if jobs_runs_result_state == RunResultState.success.value:\n            task_notebook_outputs = {}\n            for task in jobs_runs_metadata[\"tasks\"]:\n                task_key = task[\"task_key\"]\n                task_run_id = task[\"run_id\"]\n                task_run_output_future = await jobs_runs_get_output.submit(\n                    run_id=task_run_id,\n                    databricks_credentials=databricks_credentials,\n                )\n                task_run_output = await task_run_output_future.result()\n                task_run_notebook_output = task_run_output.get(\"notebook_output\", {})\n                task_notebook_outputs[task_key] = task_run_notebook_output\n            logger.info(\n                \"Databricks Jobs Runs Submit (%s ID %s) completed successfully!\",\n                run_name,\n                multi_task_jobs_runs_id,\n            )\n            return task_notebook_outputs\n        else:\n            raise DatabricksJobTerminated(\n                f\"Databricks Jobs Runs Submit \"\n                f\"({run_name} ID {multi_task_jobs_runs_id}) \"\n                f\"terminated with result state, {jobs_runs_result_state}: \"\n                f\"{jobs_runs_state_message}\"\n            )\n    elif jobs_runs_life_cycle_state == RunLifeCycleState.skipped.value:\n        raise DatabricksJobSkipped(\n            f\"Databricks Jobs Runs Submit ({run_name} ID \"\n            f\"{multi_task_jobs_runs_id}) was skipped: {jobs_runs_state_message}.\",\n        )\n    elif jobs_runs_life_cycle_state == RunLifeCycleState.internalerror.value:\n        raise DatabricksJobInternalError(\n            f\"Databricks Jobs Runs Submit ({run_name} ID \"\n            f\"{multi_task_jobs_runs_id}) \"\n            f\"encountered an internal error: {jobs_runs_state_message}.\",\n        )\n</code></pre>"},{"location":"flows/#prefect_databricks.flows.jobs_runs_submit_by_id_and_wait_for_completion","title":"<code>jobs_runs_submit_by_id_and_wait_for_completion</code>  <code>async</code>","text":"<p>flow that triggers an existing job and waits for its completion</p> <p>Parameters:</p> Name Type Description Default <code>databricks_credentials</code> <code>DatabricksCredentials</code> <p>Credentials to use for authentication with Databricks.</p> required <code>job_id</code> <code>int</code> <p>Id of the databricks job.</p> required <code>idempotency_token</code> <code>Optional[str]</code> <p>An optional token that can be used to guarantee the idempotency of job run requests. If a run with the provided token already exists, the request does not create a new run but returns the ID of the existing run instead. If a run with the provided token is deleted, an error is returned.  If you specify the idempotency token, upon failure you can retry until the request succeeds. Databricks guarantees that exactly one run is launched with that idempotency token. This token must have at most 64 characters.  For more information, see How to ensure idempotency for jobs, e.g. <code>8f018174-4792-40d5-bcbc-3e6a527352c8</code>.</p> <code>None</code> <code>jar_params</code> <code>Optional[List[str]]</code> <p>A list of parameters for jobs with Spark JAR tasks, for example \"jar_params\" : [\"john doe\", \"35\"]. The parameters are used to invoke the main function of the main class specified in the Spark JAR task. If not specified upon run- now, it defaults to an empty list. jar_params cannot be specified in conjunction with notebook_params. The JSON representation of this field (for example {\"jar_params\": [\"john doe\",\"35\"]}) cannot exceed 10,000 bytes.</p> <code>None</code> <code>max_wait_seconds</code> <code>int</code> <p>Maximum number of seconds to wait for the entire flow to complete.</p> <code>900</code> <code>poll_frequency_seconds</code> <code>int</code> <p>Number of seconds to wait in between checks for run completion.</p> <code>10</code> <code>notebook_params</code> <code>Optional[Dict]</code> <p>A map from keys to values for jobs with notebook task, for example \"notebook_params\": {\"name\": \"john doe\", \"age\": \"35\"}. The map is passed to the notebook and is accessible through the dbutils.widgets.get function. If not specified upon run-now, the triggered run uses the job\u2019s base parameters. notebook_params cannot be specified in conjunction with jar_params. Use Task parameter variables to set parameters containing information about job runs. The JSON representation of this field (for example {\"notebook_params\":{\"name\":\"john doe\",\"age\":\"35\"}}) cannot exceed 10,000 bytes.</p> <code>None</code> <code>python_params</code> <code>Optional[List[str]]</code> <p>A list of parameters for jobs with Python tasks, for example \"python_params\" :[\"john doe\", \"35\"]. The parameters are passed to Python file as command- line parameters. If specified upon run-now, it would overwrite the parameters specified in job setting. The JSON representation of this field (for example {\"python_params\":[\"john doe\",\"35\"]}) cannot exceed 10,000 bytes Use Task parameter variables to set parameters containing information about job runs. These parameters accept only Latin characters (ASCII character set). Using non-ASCII characters returns an error. Examples of invalid, non-ASCII characters are Chinese, Japanese kanjis, and emojis.</p> <code>None</code> <code>spark_submit_params</code> <code>Optional[List[str]]</code> <p>A list of parameters for jobs with spark submit task, for example \"spark_submit_params\": [\"--class\", \"org.apache.spark.examples.SparkPi\"]. The parameters are passed to spark-submit script as command-line parameters. If specified upon run-now, it would overwrite the parameters specified in job setting. The JSON representation of this field (for example {\"python_params\":[\"john doe\",\"35\"]}) cannot exceed 10,000 bytes. Use Task parameter variables to set parameters containing information about job runs. These parameters accept only Latin characters (ASCII character set). Using non-ASCII characters returns an error. Examples of invalid, non-ASCII characters are Chinese, Japanese kanjis, and emojis.</p> <code>None</code> <code>python_named_params</code> <code>Optional[Dict]</code> <p>A map from keys to values for jobs with Python wheel task, for example \"python_named_params\": {\"name\": \"task\", \"data\": \"dbfs:/path/to/data.json\"}.</p> <code>None</code> <code>pipeline_params</code> <code>Optional[str]</code> <p>If <code>full_refresh</code> is set to true, trigger a full refresh on the delta live table e.g. <pre><code>    \"pipeline_params\": {\"full_refresh\": true}\n</code></pre></p> <code>None</code> <code>sql_params</code> <code>Optional[Dict]</code> <p>A map from keys to values for SQL tasks, for example \"sql_params\": {\"name\": \"john doe\", \"age\": \"35\"}. The SQL alert task does not support custom parameters.</p> <code>None</code> <code>dbt_commands</code> <code>Optional[List]</code> <p>An array of commands to execute for jobs with the dbt task, for example \"dbt_commands\": [\"dbt deps\", \"dbt seed\", \"dbt run\"]</p> <code>None</code> <code>job_submission_handler</code> <code>Optional[Callable]</code> <p>An optional callable to intercept job submission</p> <code>None</code> <p>Raises:</p> Type Description <code>DatabricksJobTerminated</code> <p>Raised when the Databricks job run is terminated with a non-successful result state.</p> <code>DatabricksJobSkipped</code> <p>Raised when the Databricks job run is skipped.</p> <code>DatabricksJobInternalError</code> <p>Raised when the Databricks job run encounters an internal error.</p> <p>Returns:</p> Name Type Description <code>Dict</code> <code>Dict</code> <p>A dictionary containing information about the completed job run.</p> Example <pre><code>from prefect import flow\nfrom prefect_databricks import DatabricksCredentials\nfrom prefect_databricks.flows import (\n    jobs_runs_submit_by_id_and_wait_for_completion,\n)\n\n\n@flow\ndef submit_existing_job(block_name: str, job_id):\n    databricks_credentials = DatabricksCredentials.load(block_name)\n\n    run = jobs_runs_submit_by_id_and_wait_for_completion(\n        databricks_credentials=databricks_credentials, job_id=job_id\n    )\n\n    return run\n\n\nsubmit_existing_job(block_name=\"db-creds\", job_id=db_job_id)\n</code></pre> Source code in <code>prefect_databricks/flows.py</code> <pre><code>@flow(\n    name=\"Submit existing job runs and wait for completion\",\n    description=(\n        \"Triggers a Databricks jobs runs and waits for the \"\n        \"triggered runs to complete.\"\n    ),\n)\nasync def jobs_runs_submit_by_id_and_wait_for_completion(\n    databricks_credentials: DatabricksCredentials,\n    job_id: int,\n    idempotency_token: Optional[str] = None,\n    jar_params: Optional[List[str]] = None,\n    max_wait_seconds: int = 900,\n    poll_frequency_seconds: int = 10,\n    notebook_params: Optional[Dict] = None,\n    python_params: Optional[List[str]] = None,\n    spark_submit_params: Optional[List[str]] = None,\n    python_named_params: Optional[Dict] = None,\n    pipeline_params: Optional[str] = None,\n    sql_params: Optional[Dict] = None,\n    dbt_commands: Optional[List] = None,\n    job_submission_handler: Optional[Callable] = None,\n    **jobs_runs_submit_kwargs: Dict[str, Any],\n) -&gt; Dict:\n    \"\"\"flow that triggers an existing job and waits for its completion\n\n    Args:\n        databricks_credentials: Credentials to use for authentication with Databricks.\n        job_id: Id of the databricks job.\n        idempotency_token:\n            An optional token that can be used to guarantee the idempotency of job\n            run requests. If a run with the provided token already\n            exists, the request does not create a new run but returns\n            the ID of the existing run instead. If a run with the\n            provided token is deleted, an error is returned.  If you\n            specify the idempotency token, upon failure you can retry\n            until the request succeeds. Databricks guarantees that\n            exactly one run is launched with that idempotency token.\n            This token must have at most 64 characters.  For more\n            information, see [How to ensure idempotency for\n            jobs](https://kb.databricks.com/jobs/jobs-idempotency.html),\n            e.g. `8f018174-4792-40d5-bcbc-3e6a527352c8`.\n        jar_params:\n            A list of parameters for jobs with Spark JAR tasks, for example \"jar_params\"\n            : [\"john doe\", \"35\"]. The parameters are used to invoke the main function of\n            the main class specified in the Spark JAR task. If not specified upon run-\n            now, it defaults to an empty list. jar_params cannot be specified in\n            conjunction with notebook_params. The JSON representation of this field (for\n            example {\"jar_params\": [\"john doe\",\"35\"]}) cannot exceed 10,000 bytes.\n        max_wait_seconds:\n            Maximum number of seconds to wait for the entire flow to complete.\n        poll_frequency_seconds: Number of seconds to wait in between checks for\n            run completion.\n        notebook_params:\n            A map from keys to values for jobs with notebook task, for example\n            \"notebook_params\": {\"name\": \"john doe\", \"age\": \"35\"}. The map is\n            passed to the notebook and is accessible through the dbutils.widgets.get\n            function. If not specified upon run-now, the triggered run uses the job\u2019s\n            base parameters. notebook_params cannot be specified in conjunction with\n            jar_params. Use Task parameter variables to set parameters containing\n            information about job runs. The JSON representation of this field\n            (for example {\"notebook_params\":{\"name\":\"john doe\",\"age\":\"35\"}}) cannot\n            exceed 10,000 bytes.\n        python_params:\n            A list of parameters for jobs with Python tasks, for example \"python_params\"\n            :[\"john doe\", \"35\"]. The parameters are passed to Python file as command-\n            line parameters. If specified upon run-now, it would overwrite the\n            parameters specified in job setting. The JSON representation of this field\n            (for example {\"python_params\":[\"john doe\",\"35\"]}) cannot exceed 10,000 bytes\n            Use Task parameter variables to set parameters containing information\n            about job runs. These parameters accept only Latin characters (ASCII\n            character set). Using non-ASCII characters returns an error. Examples of\n            invalid, non-ASCII characters are Chinese, Japanese kanjis, and emojis.\n        spark_submit_params:\n            A list of parameters for jobs with spark submit task, for example\n            \"spark_submit_params\": [\"--class\", \"org.apache.spark.examples.SparkPi\"].\n            The parameters are passed to spark-submit script as command-line parameters.\n            If specified upon run-now, it would overwrite the parameters specified in\n            job setting. The JSON representation of this field (for example\n            {\"python_params\":[\"john doe\",\"35\"]}) cannot exceed 10,000 bytes.\n            Use Task parameter variables to set parameters containing information about\n            job runs. These parameters accept only Latin characters (ASCII character\n            set). Using non-ASCII characters returns an error. Examples of invalid,\n            non-ASCII characters are Chinese, Japanese kanjis, and emojis.\n        python_named_params:\n            A map from keys to values for jobs with Python wheel task, for example\n            \"python_named_params\": {\"name\": \"task\", \"data\": \"dbfs:/path/to/data.json\"}.\n        pipeline_params:\n            If `full_refresh` is set to true, trigger a full refresh on the\n            delta live table e.g.\n            ```\n                \"pipeline_params\": {\"full_refresh\": true}\n            ```\n        sql_params:\n            A map from keys to values for SQL tasks, for example \"sql_params\":\n            {\"name\": \"john doe\", \"age\": \"35\"}. The SQL alert task does not support\n            custom parameters.\n        dbt_commands:\n            An array of commands to execute for jobs with the dbt task,\n            for example \"dbt_commands\": [\"dbt deps\", \"dbt seed\", \"dbt run\"]\n        job_submission_handler: An optional callable to intercept job submission\n\n    Raises:\n        DatabricksJobTerminated:\n            Raised when the Databricks job run is terminated with a non-successful\n            result state.\n        DatabricksJobSkipped: Raised when the Databricks job run is skipped.\n        DatabricksJobInternalError:\n            Raised when the Databricks job run encounters an internal error.\n\n    Returns:\n        Dict: A dictionary containing information about the completed job run.\n\n    Example:\n        ```python\n        from prefect import flow\n        from prefect_databricks import DatabricksCredentials\n        from prefect_databricks.flows import (\n            jobs_runs_submit_by_id_and_wait_for_completion,\n        )\n\n\n        @flow\n        def submit_existing_job(block_name: str, job_id):\n            databricks_credentials = DatabricksCredentials.load(block_name)\n\n            run = jobs_runs_submit_by_id_and_wait_for_completion(\n                databricks_credentials=databricks_credentials, job_id=job_id\n            )\n\n            return run\n\n\n        submit_existing_job(block_name=\"db-creds\", job_id=db_job_id)\n        ```\n    \"\"\"\n    logger = get_run_logger()\n\n    # submit the jobs runs\n\n    jobs_runs_future = await jobs_run_now.submit(\n        databricks_credentials=databricks_credentials,\n        job_id=job_id,\n        idempotency_token=idempotency_token,\n        jar_params=jar_params,\n        notebook_params=notebook_params,\n        python_params=python_params,\n        spark_submit_params=spark_submit_params,\n        python_named_params=python_named_params,\n        pipeline_params=pipeline_params,\n        sql_params=sql_params,\n        dbt_commands=dbt_commands,\n        **jobs_runs_submit_kwargs,\n    )\n\n    jobs_runs = await jobs_runs_future.result()\n\n    if job_submission_handler:\n        result = job_submission_handler(jobs_runs)\n        if inspect.isawaitable(result):\n            await result\n    job_run_id = jobs_runs[\"run_id\"]\n\n    # wait for all the jobs runs to complete in a separate flow\n    # for a cleaner radar interface\n    jobs_runs_state, jobs_runs_metadata = await jobs_runs_wait_for_completion(\n        multi_task_jobs_runs_id=job_run_id,\n        databricks_credentials=databricks_credentials,\n        max_wait_seconds=max_wait_seconds,\n        poll_frequency_seconds=poll_frequency_seconds,\n    )\n\n    # fetch the state results\n    jobs_runs_life_cycle_state = jobs_runs_state[\"life_cycle_state\"]\n    jobs_runs_state_message = jobs_runs_state[\"state_message\"]\n\n    # return results or raise error\n    if jobs_runs_life_cycle_state == RunLifeCycleState.terminated.value:\n        jobs_runs_result_state = jobs_runs_state.get(\"result_state\", None)\n        if jobs_runs_result_state == RunResultState.success.value:\n            task_notebook_outputs = {}\n            for task in jobs_runs_metadata[\"tasks\"]:\n                task_key = task[\"task_key\"]\n                task_run_id = task[\"run_id\"]\n                task_run_output_future = await jobs_runs_get_output.submit(\n                    run_id=task_run_id,\n                    databricks_credentials=databricks_credentials,\n                )\n                task_run_output = await task_run_output_future.result()\n                task_run_notebook_output = task_run_output.get(\"notebook_output\", {})\n                task_notebook_outputs[task_key] = task_run_notebook_output\n            logger.info(\n                f\"Databricks Jobs Runs Submit {job_id} completed successfully!\",\n            )\n            return task_notebook_outputs\n        else:\n            raise DatabricksJobTerminated(\n                f\"Databricks Jobs Runs Submit ID {job_id} \"\n                f\"terminated with result state, {jobs_runs_result_state}: \"\n                f\"{jobs_runs_state_message}\"\n            )\n    elif jobs_runs_life_cycle_state == RunLifeCycleState.skipped.value:\n        raise DatabricksJobSkipped(\n            f\"Databricks Jobs Runs Submit ID \"\n            f\"{job_id} was skipped: {jobs_runs_state_message}.\",\n        )\n    elif jobs_runs_life_cycle_state == RunLifeCycleState.internalerror.value:\n        raise DatabricksJobInternalError(\n            f\"Databricks Jobs Runs Submit ID \"\n            f\"{job_id} \"\n            f\"encountered an internal error: {jobs_runs_state_message}.\",\n        )\n</code></pre>"},{"location":"flows/#prefect_databricks.flows.jobs_runs_wait_for_completion","title":"<code>jobs_runs_wait_for_completion</code>  <code>async</code>","text":"<p>Flow that triggers a job run and waits for the triggered run to complete.</p> <p>Parameters:</p> Name Type Description Default <code>run_name</code> <code>Optional[str]</code> <p>The name of the jobs runs task.</p> <code>None</code> <code>multi_task_jobs_run_id</code> <p>The ID of the jobs runs task to watch.</p> required <code>databricks_credentials</code> <code>DatabricksCredentials</code> <p>Credentials to use for authentication with Databricks.</p> required <code>max_wait_seconds</code> <code>int</code> <p>Maximum number of seconds to wait for the entire flow to complete.</p> <code>900</code> <code>poll_frequency_seconds</code> <code>int</code> <p>Number of seconds to wait in between checks for run completion.</p> <code>10</code> <p>Returns:</p> Name Type Description <code>jobs_runs_state</code> <p>A dict containing the jobs runs life cycle state and message.</p> <code>jobs_runs_metadata</code> <p>A dict containing IDs of the jobs runs tasks.</p> Example <p>Waits for completion on jobs runs. <pre><code>from prefect import flow\nfrom prefect_databricks import DatabricksCredentials\nfrom prefect_databricks.flows import jobs_runs_wait_for_completion\n\n@flow\ndef jobs_runs_wait_for_completion_flow():\n    databricks_credentials = DatabricksCredentials.load(\"BLOCK_NAME\")\n    return jobs_runs_wait_for_completion(\n        multi_task_jobs_run_id=45429,\n        databricks_credentials=databricks_credentials,\n        run_name=\"my_run_name\",\n        max_wait_seconds=1800,  # 30 minutes\n        poll_frequency_seconds=120,  # 2 minutes\n    )\n</code></pre></p> Source code in <code>prefect_databricks/flows.py</code> <pre><code>@flow(\n    name=\"Wait for completion of jobs runs\",\n    description=\"Waits for the jobs runs to finish running\",\n)\nasync def jobs_runs_wait_for_completion(\n    multi_task_jobs_runs_id: int,\n    databricks_credentials: DatabricksCredentials,\n    run_name: Optional[str] = None,\n    max_wait_seconds: int = 900,\n    poll_frequency_seconds: int = 10,\n):\n    \"\"\"\n    Flow that triggers a job run and waits for the triggered run to complete.\n\n    Args:\n        run_name: The name of the jobs runs task.\n        multi_task_jobs_run_id: The ID of the jobs runs task to watch.\n        databricks_credentials:\n            Credentials to use for authentication with Databricks.\n        max_wait_seconds:\n            Maximum number of seconds to wait for the entire flow to complete.\n        poll_frequency_seconds: Number of seconds to wait in between checks for\n            run completion.\n\n    Returns:\n        jobs_runs_state: A dict containing the jobs runs life cycle state and message.\n        jobs_runs_metadata: A dict containing IDs of the jobs runs tasks.\n\n    Example:\n        Waits for completion on jobs runs.\n        ```python\n        from prefect import flow\n        from prefect_databricks import DatabricksCredentials\n        from prefect_databricks.flows import jobs_runs_wait_for_completion\n\n        @flow\n        def jobs_runs_wait_for_completion_flow():\n            databricks_credentials = DatabricksCredentials.load(\"BLOCK_NAME\")\n            return jobs_runs_wait_for_completion(\n                multi_task_jobs_run_id=45429,\n                databricks_credentials=databricks_credentials,\n                run_name=\"my_run_name\",\n                max_wait_seconds=1800,  # 30 minutes\n                poll_frequency_seconds=120,  # 2 minutes\n            )\n        ```\n    \"\"\"\n    logger = get_run_logger()\n\n    seconds_waited_for_run_completion = 0\n    wait_for = []\n\n    jobs_status = {}\n    tasks_status = {}\n    while seconds_waited_for_run_completion &lt;= max_wait_seconds:\n        jobs_runs_metadata_future = await jobs_runs_get.submit(\n            run_id=multi_task_jobs_runs_id,\n            databricks_credentials=databricks_credentials,\n            wait_for=wait_for,\n        )\n        wait_for = [jobs_runs_metadata_future]\n\n        jobs_runs_metadata = await jobs_runs_metadata_future.result()\n        jobs_status = _update_and_log_state_changes(\n            jobs_status, jobs_runs_metadata, logger, \"Job\"\n        )\n        jobs_runs_metadata_tasks = jobs_runs_metadata.get(\"tasks\", [])\n        for task_metadata in jobs_runs_metadata_tasks:\n            tasks_status = _update_and_log_state_changes(\n                tasks_status, task_metadata, logger, \"Task\"\n            )\n\n        jobs_runs_state = jobs_runs_metadata.get(\"state\", {})\n        jobs_runs_life_cycle_state = jobs_runs_state[\"life_cycle_state\"]\n        if jobs_runs_life_cycle_state in TERMINAL_STATUS_CODES:\n            return jobs_runs_state, jobs_runs_metadata\n\n        logger.info(\"Waiting for %s seconds.\", poll_frequency_seconds)\n        await asyncio.sleep(poll_frequency_seconds)\n        seconds_waited_for_run_completion += poll_frequency_seconds\n\n    raise DatabricksJobRunTimedOut(\n        f\"Max wait time of {max_wait_seconds} seconds exceeded while waiting \"\n        f\"for job run ({run_name} ID {multi_task_jobs_runs_id})\"\n    )\n</code></pre>"},{"location":"jobs/","title":"Jobs","text":""},{"location":"jobs/#prefect_databricks.jobs","title":"<code>prefect_databricks.jobs</code>","text":"<p>This is a module containing tasks for interacting with: Databricks jobs</p>"},{"location":"jobs/#prefect_databricks.jobs-classes","title":"Classes","text":""},{"location":"jobs/#prefect_databricks.jobs-functions","title":"Functions","text":""},{"location":"jobs/#prefect_databricks.jobs.jobs_create","title":"<code>jobs_create</code>  <code>async</code>","text":"<p>Create a new job.</p> <p>Parameters:</p> Name Type Description Default <code>databricks_credentials</code> <code>DatabricksCredentials</code> <p>Credentials to use for authentication with Databricks.</p> required <code>name</code> <code>str</code> <p>An optional name for the job, e.g. <code>A multitask job</code>.</p> <code>'Untitled'</code> <code>tags</code> <code>Dict</code> <p>A map of tags associated with the job. These are forwarded to the cluster as cluster tags for jobs clusters, and are subject to the same limitations as cluster tags. A maximum of 25 tags can be added to the job, e.g. <pre><code>{\"cost-center\": \"engineering\", \"team\": \"jobs\"}\n</code></pre></p> <code>None</code> <code>tasks</code> <code>Optional[List[JobTaskSettings]]</code> <p>A list of task specifications to be executed by this job, e.g. <pre><code>[\n    {\n        \"task_key\": \"Sessionize\",\n        \"description\": \"Extracts session data from events\",\n        \"depends_on\": [],\n        \"existing_cluster_id\": \"0923-164208-meows279\",\n        \"spark_jar_task\": {\n            \"main_class_name\": \"com.databricks.Sessionize\",\n            \"parameters\": [\"--data\", \"dbfs:/path/to/data.json\"],\n        },\n        \"libraries\": [{\"jar\": \"dbfs:/mnt/databricks/Sessionize.jar\"}],\n        \"timeout_seconds\": 86400,\n        \"max_retries\": 3,\n        \"min_retry_interval_millis\": 2000,\n        \"retry_on_timeout\": False,\n    },\n    {\n        \"task_key\": \"Orders_Ingest\",\n        \"description\": \"Ingests order data\",\n        \"depends_on\": [],\n        \"job_cluster_key\": \"auto_scaling_cluster\",\n        \"spark_jar_task\": {\n            \"main_class_name\": \"com.databricks.OrdersIngest\",\n            \"parameters\": [\"--data\", \"dbfs:/path/to/order-data.json\"],\n        },\n        \"libraries\": [{\"jar\": \"dbfs:/mnt/databricks/OrderIngest.jar\"}],\n        \"timeout_seconds\": 86400,\n        \"max_retries\": 3,\n        \"min_retry_interval_millis\": 2000,\n        \"retry_on_timeout\": False,\n    },\n    {\n        \"task_key\": \"Match\",\n        \"description\": \"Matches orders with user sessions\",\n        \"depends_on\": [\n            {\"task_key\": \"Orders_Ingest\"},\n            {\"task_key\": \"Sessionize\"},\n        ],\n        \"new_cluster\": {\n            \"spark_version\": \"7.3.x-scala2.12\",\n            \"node_type_id\": \"i3.xlarge\",\n            \"spark_conf\": {\"spark.speculation\": True},\n            \"aws_attributes\": {\n                \"availability\": \"SPOT\",\n                \"zone_id\": \"us-west-2a\",\n            },\n            \"autoscale\": {\"min_workers\": 2, \"max_workers\": 16},\n        },\n        \"notebook_task\": {\n            \"notebook_path\": \"/Users/user.name@databricks.com/Match\",\n            \"source\": \"WORKSPACE\",\n            \"base_parameters\": {\"name\": \"John Doe\", \"age\": \"35\"},\n        },\n        \"timeout_seconds\": 86400,\n        \"max_retries\": 3,\n        \"min_retry_interval_millis\": 2000,\n        \"retry_on_timeout\": False,\n    },\n]\n</code></pre></p> <code>None</code> <code>job_clusters</code> <code>Optional[List[JobCluster]]</code> <p>A list of job cluster specifications that can be shared and reused by tasks of this job. Libraries cannot be declared in a shared job cluster. You must declare dependent libraries in task settings, e.g. <pre><code>[\n    {\n        \"job_cluster_key\": \"auto_scaling_cluster\",\n        \"new_cluster\": {\n            \"spark_version\": \"7.3.x-scala2.12\",\n            \"node_type_id\": \"i3.xlarge\",\n            \"spark_conf\": {\"spark.speculation\": True},\n            \"aws_attributes\": {\n                \"availability\": \"SPOT\",\n                \"zone_id\": \"us-west-2a\",\n            },\n            \"autoscale\": {\"min_workers\": 2, \"max_workers\": 16},\n        },\n    }\n]\n</code></pre></p> <code>None</code> <code>email_notifications</code> <code>JobEmailNotifications</code> <p>An optional set of email addresses that is notified when runs of this job begin or complete as well as when this job is deleted. The default behavior is to not send any emails. Key-values: - on_start:     A list of email addresses to be notified when a run begins.     If not specified on job creation, reset, or update, the list     is empty, and notifications are not sent, e.g.     <pre><code>[\"user.name@databricks.com\"]\n</code></pre> - on_success:     A list of email addresses to be notified when a run     successfully completes. A run is considered to have     completed successfully if it ends with a <code>TERMINATED</code> <code>life_cycle_state</code> and a <code>SUCCESSFUL</code> result_state. If not     specified on job creation, reset, or update, the list is     empty, and notifications are not sent, e.g.     <pre><code>[\"user.name@databricks.com\"]\n</code></pre> - on_failure:     A list of email addresses to notify when a run completes     unsuccessfully. A run is considered unsuccessful if it ends     with an <code>INTERNAL_ERROR</code> <code>life_cycle_state</code> or a <code>SKIPPED</code>,     <code>FAILED</code>, or <code>TIMED_OUT</code> <code>result_state</code>. If not specified on     job creation, reset, or update, or the list is empty, then     notifications are not sent. Job-level failure notifications     are sent only once after the entire job run (including all     of its retries) has failed. Notifications are not sent when     failed job runs are retried. To receive a failure     notification after every failed task (including every failed     retry), use task-level notifications instead, e.g.     <pre><code>[\"user.name@databricks.com\"]\n</code></pre> - no_alert_for_skipped_runs:     If true, do not send email to recipients specified in     <code>on_failure</code> if the run is skipped.</p> <code>None</code> <code>webhook_notifications</code> <code>WebhookNotifications</code> <p>A collection of system notification IDs to notify when runs of this job begin or complete. The default behavior is to not send any system notifications. Key-values: - on_start:     An optional list of notification IDs to call when the run     starts. A maximum of 3 destinations can be specified for the     <code>on_start</code> property, e.g.     <pre><code>[\n    {\"id\": \"03dd86e4-57ef-4818-a950-78e41a1d71ab\"},\n    {\"id\": \"0481e838-0a59-4eff-9541-a4ca6f149574\"},\n]\n</code></pre> - on_success:     An optional list of notification IDs to call when the run     completes successfully. A maximum of 3 destinations can be     specified for the <code>on_success</code> property, e.g.     <pre><code>[{\"id\": \"03dd86e4-57ef-4818-a950-78e41a1d71ab\"}]\n</code></pre> - on_failure:     An optional list of notification IDs to call when the run     fails. A maximum of 3 destinations can be specified for the     <code>on_failure</code> property, e.g.     <pre><code>[{\"id\": \"0481e838-0a59-4eff-9541-a4ca6f149574\"}]\n</code></pre></p> <code>None</code> <code>timeout_seconds</code> <code>Optional[int]</code> <p>An optional timeout applied to each run of this job. The default behavior is to have no timeout, e.g. <code>86400</code>.</p> <code>None</code> <code>schedule</code> <code>CronSchedule</code> <p>An optional periodic schedule for this job. The default behavior is that the job only runs when triggered by clicking \u201cRun Now\u201d in the Jobs UI or sending an API request to <code>runNow</code>. Key-values: - quartz_cron_expression:     A Cron expression using Quartz syntax that describes the     schedule for a job. See Cron Trigger     for details. This field is required, e.g. <code>20 30 * * * ?</code>. - timezone_id:     A Java timezone ID. The schedule for a job is resolved with     respect to this timezone. See Java     TimeZone     for details. This field is required, e.g. <code>Europe/London</code>. - pause_status:     Indicate whether this schedule is paused or not, e.g.     <code>PAUSED</code>.</p> <code>None</code> <code>max_concurrent_runs</code> <code>Optional[int]</code> <p>An optional maximum allowed number of concurrent runs of the job.  Set this value if you want to be able to execute multiple runs of the same job concurrently. This is useful for example if you trigger your job on a frequent schedule and want to allow consecutive runs to overlap with each other, or if you want to trigger multiple runs which differ by their input parameters.  This setting affects only new runs. For example, suppose the job\u2019s concurrency is 4 and there are 4 concurrent active runs. Then setting the concurrency to 3 won\u2019t kill any of the active runs. However, from then on, new runs are skipped unless there are fewer than 3 active runs.  This value cannot exceed 1000. Setting this value to 0 causes all new runs to be skipped. The default behavior is to allow only 1 concurrent run, e.g. <code>10</code>.</p> <code>None</code> <code>git_source</code> <code>GitSource</code> <p>This functionality is in Public Preview.  An optional specification for a remote repository containing the notebooks used by this job's notebook tasks, e.g. <code>{     \"git_url\": \"https://github.com/databricks/databricks-cli\",     \"git_branch\": \"main\",     \"git_provider\": \"gitHub\", }</code> Key-values: - git_url:     URL of the repository to be cloned by this job. The maximum     length is 300 characters, e.g.     <code>https://github.com/databricks/databricks-cli</code>. - git_provider:     Unique identifier of the service used to host the Git     repository. The value is case insensitive, e.g. <code>github</code>. - git_branch:     Name of the branch to be checked out and used by this job.     This field cannot be specified in conjunction with git_tag     or git_commit. The maximum length is 255 characters, e.g.     <code>main</code>. - git_tag:     Name of the tag to be checked out and used by this job. This     field cannot be specified in conjunction with git_branch or     git_commit. The maximum length is 255 characters, e.g.     <code>release-1.0.0</code>. - git_commit:     Commit to be checked out and used by this job. This field     cannot be specified in conjunction with git_branch or     git_tag. The maximum length is 64 characters, e.g.     <code>e0056d01</code>. - git_snapshot:     Read-only state of the remote repository at the time the job was run.                 This field is only included on job runs.</p> <code>None</code> <code>format</code> <code>Optional[str]</code> <p>Used to tell what is the format of the job. This field is ignored in Create/Update/Reset calls. When using the Jobs API 2.1 this value is always set to <code>'MULTI_TASK'</code>, e.g. <code>MULTI_TASK</code>.</p> <code>None</code> <code>access_control_list</code> <code>Optional[List[AccessControlRequest]]</code> <p>List of permissions to set on the job.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Upon success, a dict of the response. - <code>job_id: int</code></p> API Endpoint: <p><code>/2.1/jobs/create</code></p> API Responses: Response Description 200 Job was created successfully. 400 The request was malformed. See JSON response for error details. 401 The request was unauthorized. 500 The request was not handled correctly due to a server error. Source code in <code>prefect_databricks/jobs.py</code> <pre><code>@task\nasync def jobs_create(\n    databricks_credentials: \"DatabricksCredentials\",\n    name: str = \"Untitled\",\n    tags: Dict = None,\n    tasks: Optional[List[\"models.JobTaskSettings\"]] = None,\n    job_clusters: Optional[List[\"models.JobCluster\"]] = None,\n    email_notifications: \"models.JobEmailNotifications\" = None,\n    webhook_notifications: \"models.WebhookNotifications\" = None,\n    timeout_seconds: Optional[int] = None,\n    schedule: \"models.CronSchedule\" = None,\n    max_concurrent_runs: Optional[int] = None,\n    git_source: \"models.GitSource\" = None,\n    format: Optional[str] = None,\n    access_control_list: Optional[List[\"models.AccessControlRequest\"]] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Create a new job.\n\n    Args:\n        databricks_credentials:\n            Credentials to use for authentication with Databricks.\n        name:\n            An optional name for the job, e.g. `A multitask job`.\n        tags:\n            A map of tags associated with the job. These are forwarded to the\n            cluster as cluster tags for jobs clusters, and are subject\n            to the same limitations as cluster tags. A maximum of 25\n            tags can be added to the job, e.g.\n            ```\n            {\"cost-center\": \"engineering\", \"team\": \"jobs\"}\n            ```\n        tasks:\n            A list of task specifications to be executed by this job, e.g.\n            ```\n            [\n                {\n                    \"task_key\": \"Sessionize\",\n                    \"description\": \"Extracts session data from events\",\n                    \"depends_on\": [],\n                    \"existing_cluster_id\": \"0923-164208-meows279\",\n                    \"spark_jar_task\": {\n                        \"main_class_name\": \"com.databricks.Sessionize\",\n                        \"parameters\": [\"--data\", \"dbfs:/path/to/data.json\"],\n                    },\n                    \"libraries\": [{\"jar\": \"dbfs:/mnt/databricks/Sessionize.jar\"}],\n                    \"timeout_seconds\": 86400,\n                    \"max_retries\": 3,\n                    \"min_retry_interval_millis\": 2000,\n                    \"retry_on_timeout\": False,\n                },\n                {\n                    \"task_key\": \"Orders_Ingest\",\n                    \"description\": \"Ingests order data\",\n                    \"depends_on\": [],\n                    \"job_cluster_key\": \"auto_scaling_cluster\",\n                    \"spark_jar_task\": {\n                        \"main_class_name\": \"com.databricks.OrdersIngest\",\n                        \"parameters\": [\"--data\", \"dbfs:/path/to/order-data.json\"],\n                    },\n                    \"libraries\": [{\"jar\": \"dbfs:/mnt/databricks/OrderIngest.jar\"}],\n                    \"timeout_seconds\": 86400,\n                    \"max_retries\": 3,\n                    \"min_retry_interval_millis\": 2000,\n                    \"retry_on_timeout\": False,\n                },\n                {\n                    \"task_key\": \"Match\",\n                    \"description\": \"Matches orders with user sessions\",\n                    \"depends_on\": [\n                        {\"task_key\": \"Orders_Ingest\"},\n                        {\"task_key\": \"Sessionize\"},\n                    ],\n                    \"new_cluster\": {\n                        \"spark_version\": \"7.3.x-scala2.12\",\n                        \"node_type_id\": \"i3.xlarge\",\n                        \"spark_conf\": {\"spark.speculation\": True},\n                        \"aws_attributes\": {\n                            \"availability\": \"SPOT\",\n                            \"zone_id\": \"us-west-2a\",\n                        },\n                        \"autoscale\": {\"min_workers\": 2, \"max_workers\": 16},\n                    },\n                    \"notebook_task\": {\n                        \"notebook_path\": \"/Users/user.name@databricks.com/Match\",\n                        \"source\": \"WORKSPACE\",\n                        \"base_parameters\": {\"name\": \"John Doe\", \"age\": \"35\"},\n                    },\n                    \"timeout_seconds\": 86400,\n                    \"max_retries\": 3,\n                    \"min_retry_interval_millis\": 2000,\n                    \"retry_on_timeout\": False,\n                },\n            ]\n            ```\n        job_clusters:\n            A list of job cluster specifications that can be shared and reused by\n            tasks of this job. Libraries cannot be declared in a shared\n            job cluster. You must declare dependent libraries in task\n            settings, e.g.\n            ```\n            [\n                {\n                    \"job_cluster_key\": \"auto_scaling_cluster\",\n                    \"new_cluster\": {\n                        \"spark_version\": \"7.3.x-scala2.12\",\n                        \"node_type_id\": \"i3.xlarge\",\n                        \"spark_conf\": {\"spark.speculation\": True},\n                        \"aws_attributes\": {\n                            \"availability\": \"SPOT\",\n                            \"zone_id\": \"us-west-2a\",\n                        },\n                        \"autoscale\": {\"min_workers\": 2, \"max_workers\": 16},\n                    },\n                }\n            ]\n            ```\n        email_notifications:\n            An optional set of email addresses that is notified when runs of this\n            job begin or complete as well as when this job is deleted.\n            The default behavior is to not send any emails. Key-values:\n            - on_start:\n                A list of email addresses to be notified when a run begins.\n                If not specified on job creation, reset, or update, the list\n                is empty, and notifications are not sent, e.g.\n                ```\n                [\"user.name@databricks.com\"]\n                ```\n            - on_success:\n                A list of email addresses to be notified when a run\n                successfully completes. A run is considered to have\n                completed successfully if it ends with a `TERMINATED`\n                `life_cycle_state` and a `SUCCESSFUL` result_state. If not\n                specified on job creation, reset, or update, the list is\n                empty, and notifications are not sent, e.g.\n                ```\n                [\"user.name@databricks.com\"]\n                ```\n            - on_failure:\n                A list of email addresses to notify when a run completes\n                unsuccessfully. A run is considered unsuccessful if it ends\n                with an `INTERNAL_ERROR` `life_cycle_state` or a `SKIPPED`,\n                `FAILED`, or `TIMED_OUT` `result_state`. If not specified on\n                job creation, reset, or update, or the list is empty, then\n                notifications are not sent. Job-level failure notifications\n                are sent only once after the entire job run (including all\n                of its retries) has failed. Notifications are not sent when\n                failed job runs are retried. To receive a failure\n                notification after every failed task (including every failed\n                retry), use task-level notifications instead, e.g.\n                ```\n                [\"user.name@databricks.com\"]\n                ```\n            - no_alert_for_skipped_runs:\n                If true, do not send email to recipients specified in\n                `on_failure` if the run is skipped.\n        webhook_notifications:\n            A collection of system notification IDs to notify when runs of this job\n            begin or complete. The default behavior is to not send any\n            system notifications. Key-values:\n            - on_start:\n                An optional list of notification IDs to call when the run\n                starts. A maximum of 3 destinations can be specified for the\n                `on_start` property, e.g.\n                ```\n                [\n                    {\"id\": \"03dd86e4-57ef-4818-a950-78e41a1d71ab\"},\n                    {\"id\": \"0481e838-0a59-4eff-9541-a4ca6f149574\"},\n                ]\n                ```\n            - on_success:\n                An optional list of notification IDs to call when the run\n                completes successfully. A maximum of 3 destinations can be\n                specified for the `on_success` property, e.g.\n                ```\n                [{\"id\": \"03dd86e4-57ef-4818-a950-78e41a1d71ab\"}]\n                ```\n            - on_failure:\n                An optional list of notification IDs to call when the run\n                fails. A maximum of 3 destinations can be specified for the\n                `on_failure` property, e.g.\n                ```\n                [{\"id\": \"0481e838-0a59-4eff-9541-a4ca6f149574\"}]\n                ```\n        timeout_seconds:\n            An optional timeout applied to each run of this job. The default\n            behavior is to have no timeout, e.g. `86400`.\n        schedule:\n            An optional periodic schedule for this job. The default behavior is that\n            the job only runs when triggered by clicking \u201cRun Now\u201d in\n            the Jobs UI or sending an API request to `runNow`. Key-values:\n            - quartz_cron_expression:\n                A Cron expression using Quartz syntax that describes the\n                schedule for a job. See [Cron Trigger](http://www.quartz-\n                scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html)\n                for details. This field is required, e.g. `20 30 * * * ?`.\n            - timezone_id:\n                A Java timezone ID. The schedule for a job is resolved with\n                respect to this timezone. See [Java\n                TimeZone](https://docs.oracle.com/javase/7/docs/api/java/util/TimeZone.html)\n                for details. This field is required, e.g. `Europe/London`.\n            - pause_status:\n                Indicate whether this schedule is paused or not, e.g.\n                `PAUSED`.\n        max_concurrent_runs:\n            An optional maximum allowed number of concurrent runs of the job.  Set\n            this value if you want to be able to execute multiple runs\n            of the same job concurrently. This is useful for example if\n            you trigger your job on a frequent schedule and want to\n            allow consecutive runs to overlap with each other, or if you\n            want to trigger multiple runs which differ by their input\n            parameters.  This setting affects only new runs. For\n            example, suppose the job\u2019s concurrency is 4 and there are 4\n            concurrent active runs. Then setting the concurrency to 3\n            won\u2019t kill any of the active runs. However, from then on,\n            new runs are skipped unless there are fewer than 3 active\n            runs.  This value cannot exceed 1000\\. Setting this value to\n            0 causes all new runs to be skipped. The default behavior is\n            to allow only 1 concurrent run, e.g. `10`.\n        git_source:\n            This functionality is in Public Preview.  An optional specification for\n            a remote repository containing the notebooks used by this\n            job's notebook tasks, e.g.\n            ```\n            {\n                \"git_url\": \"https://github.com/databricks/databricks-cli\",\n                \"git_branch\": \"main\",\n                \"git_provider\": \"gitHub\",\n            }\n            ``` Key-values:\n            - git_url:\n                URL of the repository to be cloned by this job. The maximum\n                length is 300 characters, e.g.\n                `https://github.com/databricks/databricks-cli`.\n            - git_provider:\n                Unique identifier of the service used to host the Git\n                repository. The value is case insensitive, e.g. `github`.\n            - git_branch:\n                Name of the branch to be checked out and used by this job.\n                This field cannot be specified in conjunction with git_tag\n                or git_commit. The maximum length is 255 characters, e.g.\n                `main`.\n            - git_tag:\n                Name of the tag to be checked out and used by this job. This\n                field cannot be specified in conjunction with git_branch or\n                git_commit. The maximum length is 255 characters, e.g.\n                `release-1.0.0`.\n            - git_commit:\n                Commit to be checked out and used by this job. This field\n                cannot be specified in conjunction with git_branch or\n                git_tag. The maximum length is 64 characters, e.g.\n                `e0056d01`.\n            - git_snapshot:\n                Read-only state of the remote repository at the time the job was run.\n                            This field is only included on job runs.\n        format:\n            Used to tell what is the format of the job. This field is ignored in\n            Create/Update/Reset calls. When using the Jobs API 2.1 this\n            value is always set to `'MULTI_TASK'`, e.g. `MULTI_TASK`.\n        access_control_list:\n            List of permissions to set on the job.\n\n    Returns:\n        Upon success, a dict of the response. &lt;/br&gt;- `job_id: int`&lt;/br&gt;\n\n    &lt;h4&gt;API Endpoint:&lt;/h4&gt;\n    `/2.1/jobs/create`\n\n    &lt;h4&gt;API Responses:&lt;/h4&gt;\n    | Response | Description |\n    | --- | --- |\n    | 200 | Job was created successfully. |\n    | 400 | The request was malformed. See JSON response for error details. |\n    | 401 | The request was unauthorized. |\n    | 500 | The request was not handled correctly due to a server error. |\n    \"\"\"  # noqa\n    endpoint = \"/2.1/jobs/create\"  # noqa\n\n    responses = {\n        200: \"Job was created successfully.\",  # noqa\n        400: \"The request was malformed. See JSON response for error details.\",  # noqa\n        401: \"The request was unauthorized.\",  # noqa\n        500: \"The request was not handled correctly due to a server error.\",  # noqa\n    }\n\n    json_payload = {\n        \"name\": name,\n        \"tags\": tags,\n        \"tasks\": tasks,\n        \"job_clusters\": job_clusters,\n        \"email_notifications\": email_notifications,\n        \"webhook_notifications\": webhook_notifications,\n        \"timeout_seconds\": timeout_seconds,\n        \"schedule\": schedule,\n        \"max_concurrent_runs\": max_concurrent_runs,\n        \"git_source\": git_source,\n        \"format\": format,\n        \"access_control_list\": access_control_list,\n    }\n\n    response = await execute_endpoint.fn(\n        endpoint,\n        databricks_credentials,\n        http_method=HTTPMethod.POST,\n        json=json_payload,\n    )\n\n    contents = _unpack_contents(response, responses)\n    return contents\n</code></pre>"},{"location":"jobs/#prefect_databricks.jobs.jobs_delete","title":"<code>jobs_delete</code>  <code>async</code>","text":"<p>Deletes a job.</p> <p>Parameters:</p> Name Type Description Default <code>databricks_credentials</code> <code>DatabricksCredentials</code> <p>Credentials to use for authentication with Databricks.</p> required <code>job_id</code> <code>Optional[int]</code> <p>The canonical identifier of the job to delete. This field is required, e.g. <code>11223344</code>.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Upon success, an empty dict.</p> API Endpoint: <p><code>/2.1/jobs/delete</code></p> API Responses: Response Description 200 Job was deleted successfully. 400 The request was malformed. See JSON response for error details. 401 The request was unauthorized. 500 The request was not handled correctly due to a server error. Source code in <code>prefect_databricks/jobs.py</code> <pre><code>@task\nasync def jobs_delete(\n    databricks_credentials: \"DatabricksCredentials\",\n    job_id: Optional[int] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Deletes a job.\n\n    Args:\n        databricks_credentials:\n            Credentials to use for authentication with Databricks.\n        job_id:\n            The canonical identifier of the job to delete. This field is required,\n            e.g. `11223344`.\n\n    Returns:\n        Upon success, an empty dict.\n\n    &lt;h4&gt;API Endpoint:&lt;/h4&gt;\n    `/2.1/jobs/delete`\n\n    &lt;h4&gt;API Responses:&lt;/h4&gt;\n    | Response | Description |\n    | --- | --- |\n    | 200 | Job was deleted successfully. |\n    | 400 | The request was malformed. See JSON response for error details. |\n    | 401 | The request was unauthorized. |\n    | 500 | The request was not handled correctly due to a server error. |\n    \"\"\"  # noqa\n    endpoint = \"/2.1/jobs/delete\"  # noqa\n\n    responses = {\n        200: \"Job was deleted successfully.\",  # noqa\n        400: \"The request was malformed. See JSON response for error details.\",  # noqa\n        401: \"The request was unauthorized.\",  # noqa\n        500: \"The request was not handled correctly due to a server error.\",  # noqa\n    }\n\n    json_payload = {\n        \"job_id\": job_id,\n    }\n\n    response = await execute_endpoint.fn(\n        endpoint,\n        databricks_credentials,\n        http_method=HTTPMethod.POST,\n        json=json_payload,\n    )\n\n    contents = _unpack_contents(response, responses)\n    return contents\n</code></pre>"},{"location":"jobs/#prefect_databricks.jobs.jobs_get","title":"<code>jobs_get</code>  <code>async</code>","text":"<p>Retrieves the details for a single job.</p> <p>Parameters:</p> Name Type Description Default <code>job_id</code> <code>int</code> <p>The canonical identifier of the job to retrieve information about. This field is required.</p> required <code>databricks_credentials</code> <code>DatabricksCredentials</code> <p>Credentials to use for authentication with Databricks.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Upon success, a dict of the response. - <code>job_id: int</code>- <code>creator_user_name: str</code>- <code>run_as_user_name: str</code>- <code>settings: \"models.JobSettings\"</code>- <code>created_time: int</code></p> API Endpoint: <p><code>/2.1/jobs/get</code></p> API Responses: Response Description 200 Job was retrieved successfully. 400 The request was malformed. See JSON response for error details. 401 The request was unauthorized. 500 The request was not handled correctly due to a server error. Source code in <code>prefect_databricks/jobs.py</code> <pre><code>@task\nasync def jobs_get(\n    job_id: int,\n    databricks_credentials: \"DatabricksCredentials\",\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Retrieves the details for a single job.\n\n    Args:\n        job_id:\n            The canonical identifier of the job to retrieve information about. This\n            field is required.\n        databricks_credentials:\n            Credentials to use for authentication with Databricks.\n\n    Returns:\n        Upon success, a dict of the response. &lt;/br&gt;- `job_id: int`&lt;/br&gt;- `creator_user_name: str`&lt;/br&gt;- `run_as_user_name: str`&lt;/br&gt;- `settings: \"models.JobSettings\"`&lt;/br&gt;- `created_time: int`&lt;/br&gt;\n\n    &lt;h4&gt;API Endpoint:&lt;/h4&gt;\n    `/2.1/jobs/get`\n\n    &lt;h4&gt;API Responses:&lt;/h4&gt;\n    | Response | Description |\n    | --- | --- |\n    | 200 | Job was retrieved successfully. |\n    | 400 | The request was malformed. See JSON response for error details. |\n    | 401 | The request was unauthorized. |\n    | 500 | The request was not handled correctly due to a server error. |\n    \"\"\"  # noqa\n    endpoint = \"/2.1/jobs/get\"  # noqa\n\n    responses = {\n        200: \"Job was retrieved successfully.\",  # noqa\n        400: \"The request was malformed. See JSON response for error details.\",  # noqa\n        401: \"The request was unauthorized.\",  # noqa\n        500: \"The request was not handled correctly due to a server error.\",  # noqa\n    }\n\n    params = {\n        \"job_id\": job_id,\n    }\n\n    response = await execute_endpoint.fn(\n        endpoint,\n        databricks_credentials,\n        http_method=HTTPMethod.GET,\n        params=params,\n    )\n\n    contents = _unpack_contents(response, responses)\n    return contents\n</code></pre>"},{"location":"jobs/#prefect_databricks.jobs.jobs_list","title":"<code>jobs_list</code>  <code>async</code>","text":"<p>Retrieves a list of jobs.</p> <p>Parameters:</p> Name Type Description Default <code>databricks_credentials</code> <code>DatabricksCredentials</code> <p>Credentials to use for authentication with Databricks.</p> required <code>limit</code> <code>int</code> <p>The number of jobs to return. This value must be greater than 0 and less or equal to 25. The default value is 20.</p> <code>20</code> <code>offset</code> <code>int</code> <p>The offset of the first job to return, relative to the most recently created job.</p> <code>0</code> <code>name</code> <code>Optional[str]</code> <p>A filter on the list based on the exact (case insensitive) job name.</p> <code>None</code> <code>expand_tasks</code> <code>bool</code> <p>Whether to include task and cluster details in the response.</p> <code>False</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Upon success, a dict of the response. - <code>jobs: List[\"models.Job\"]</code>- <code>has_more: bool</code></p> API Endpoint: <p><code>/2.1/jobs/list</code></p> API Responses: Response Description 200 List of jobs was retrieved successfully. 400 The request was malformed. See JSON response for error details. 401 The request was unauthorized. 500 The request was not handled correctly due to a server error. Source code in <code>prefect_databricks/jobs.py</code> <pre><code>@task\nasync def jobs_list(\n    databricks_credentials: \"DatabricksCredentials\",\n    limit: int = 20,\n    offset: int = 0,\n    name: Optional[str] = None,\n    expand_tasks: bool = False,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Retrieves a list of jobs.\n\n    Args:\n        databricks_credentials:\n            Credentials to use for authentication with Databricks.\n        limit:\n            The number of jobs to return. This value must be greater than 0 and less\n            or equal to 25. The default value is 20.\n        offset:\n            The offset of the first job to return, relative to the most recently\n            created job.\n        name:\n            A filter on the list based on the exact (case insensitive) job name.\n        expand_tasks:\n            Whether to include task and cluster details in the response.\n\n    Returns:\n        Upon success, a dict of the response. &lt;/br&gt;- `jobs: List[\"models.Job\"]`&lt;/br&gt;- `has_more: bool`&lt;/br&gt;\n\n    &lt;h4&gt;API Endpoint:&lt;/h4&gt;\n    `/2.1/jobs/list`\n\n    &lt;h4&gt;API Responses:&lt;/h4&gt;\n    | Response | Description |\n    | --- | --- |\n    | 200 | List of jobs was retrieved successfully. |\n    | 400 | The request was malformed. See JSON response for error details. |\n    | 401 | The request was unauthorized. |\n    | 500 | The request was not handled correctly due to a server error. |\n    \"\"\"  # noqa\n    endpoint = \"/2.1/jobs/list\"  # noqa\n\n    responses = {\n        200: \"List of jobs was retrieved successfully.\",  # noqa\n        400: \"The request was malformed. See JSON response for error details.\",  # noqa\n        401: \"The request was unauthorized.\",  # noqa\n        500: \"The request was not handled correctly due to a server error.\",  # noqa\n    }\n\n    params = {\n        \"limit\": limit,\n        \"offset\": offset,\n        \"name\": name,\n        \"expand_tasks\": expand_tasks,\n    }\n\n    response = await execute_endpoint.fn(\n        endpoint,\n        databricks_credentials,\n        http_method=HTTPMethod.GET,\n        params=params,\n    )\n\n    contents = _unpack_contents(response, responses)\n    return contents\n</code></pre>"},{"location":"jobs/#prefect_databricks.jobs.jobs_reset","title":"<code>jobs_reset</code>  <code>async</code>","text":"<p>Overwrites all the settings for a specific job. Use the Update endpoint to update job settings partially.</p> <p>Parameters:</p> Name Type Description Default <code>databricks_credentials</code> <code>DatabricksCredentials</code> <p>Credentials to use for authentication with Databricks.</p> required <code>job_id</code> <code>Optional[int]</code> <p>The canonical identifier of the job to reset. This field is required, e.g. <code>11223344</code>.</p> <code>None</code> <code>new_settings</code> <code>JobSettings</code> <p>The new settings of the job. These settings completely replace the old settings.  Changes to the field <code>JobSettings.timeout_seconds</code> are applied to active runs. Changes to other fields are applied to future runs only. Key-values: - name:     An optional name for the job, e.g. <code>A multitask job</code>. - tags:     A map of tags associated with the job. These are forwarded     to the cluster as cluster tags for jobs clusters, and are     subject to the same limitations as cluster tags. A maximum     of 25 tags can be added to the job, e.g.     <pre><code>{\"cost-center\": \"engineering\", \"team\": \"jobs\"}\n</code></pre> - tasks:     A list of task specifications to be executed by this job, e.g.     <pre><code>[\n    {\n        \"task_key\": \"Sessionize\",\n        \"description\": \"Extracts session data from events\",\n        \"depends_on\": [],\n        \"existing_cluster_id\": \"0923-164208-meows279\",\n        \"spark_jar_task\": {\n            \"main_class_name\": \"com.databricks.Sessionize\",\n            \"parameters\": [\n                \"--data\",\n                \"dbfs:/path/to/data.json\",\n            ],\n        },\n        \"libraries\": [\n            {\"jar\": \"dbfs:/mnt/databricks/Sessionize.jar\"}\n        ],\n        \"timeout_seconds\": 86400,\n        \"max_retries\": 3,\n        \"min_retry_interval_millis\": 2000,\n        \"retry_on_timeout\": False,\n    },\n    {\n        \"task_key\": \"Orders_Ingest\",\n        \"description\": \"Ingests order data\",\n        \"depends_on\": [],\n        \"job_cluster_key\": \"auto_scaling_cluster\",\n        \"spark_jar_task\": {\n            \"main_class_name\": \"com.databricks.OrdersIngest\",\n            \"parameters\": [\n                \"--data\",\n                \"dbfs:/path/to/order-data.json\",\n            ],\n        },\n        \"libraries\": [\n            {\"jar\": \"dbfs:/mnt/databricks/OrderIngest.jar\"}\n        ],\n        \"timeout_seconds\": 86400,\n        \"max_retries\": 3,\n        \"min_retry_interval_millis\": 2000,\n        \"retry_on_timeout\": False,\n    },\n    {\n        \"task_key\": \"Match\",\n        \"description\": \"Matches orders with user sessions\",\n        \"depends_on\": [\n            {\"task_key\": \"Orders_Ingest\"},\n            {\"task_key\": \"Sessionize\"},\n        ],\n        \"new_cluster\": {\n            \"spark_version\": \"7.3.x-scala2.12\",\n            \"node_type_id\": \"i3.xlarge\",\n            \"spark_conf\": {\"spark.speculation\": True},\n            \"aws_attributes\": {\n                \"availability\": \"SPOT\",\n                \"zone_id\": \"us-west-2a\",\n            },\n            \"autoscale\": {\n                \"min_workers\": 2,\n                \"max_workers\": 16,\n            },\n        },\n        \"notebook_task\": {\n            \"notebook_path\": \"/Users/user.name@databricks.com/Match\",\n            \"source\": \"WORKSPACE\",\n            \"base_parameters\": {\n                \"name\": \"John Doe\",\n                \"age\": \"35\",\n            },\n        },\n        \"timeout_seconds\": 86400,\n        \"max_retries\": 3,\n        \"min_retry_interval_millis\": 2000,\n        \"retry_on_timeout\": False,\n    },\n]\n</code></pre> - job_clusters:     A list of job cluster specifications that can be shared and     reused by tasks of this job. Libraries cannot be declared in     a shared job cluster. You must declare dependent libraries     in task settings, e.g.     <pre><code>[\n    {\n        \"job_cluster_key\": \"auto_scaling_cluster\",\n        \"new_cluster\": {\n            \"spark_version\": \"7.3.x-scala2.12\",\n            \"node_type_id\": \"i3.xlarge\",\n            \"spark_conf\": {\"spark.speculation\": True},\n            \"aws_attributes\": {\n                \"availability\": \"SPOT\",\n                \"zone_id\": \"us-west-2a\",\n            },\n            \"autoscale\": {\n                \"min_workers\": 2,\n                \"max_workers\": 16,\n            },\n        },\n    }\n]\n</code></pre> - email_notifications:     An optional set of email addresses that is notified when     runs of this job begin or complete as well as when this job     is deleted. The default behavior is to not send any emails. - webhook_notifications:     A collection of system notification IDs to notify when runs     of this job begin or complete. The default behavior is to     not send any system notifications. - timeout_seconds:     An optional timeout applied to each run of this job. The     default behavior is to have no timeout, e.g. <code>86400</code>. - schedule:     An optional periodic schedule for this job. The default     behavior is that the job only runs when triggered by     clicking \u201cRun Now\u201d in the Jobs UI or sending an API request     to <code>runNow</code>. - max_concurrent_runs:     An optional maximum allowed number of concurrent runs of the     job.  Set this value if you want to be able to execute     multiple runs of the same job concurrently. This is useful     for example if you trigger your job on a frequent schedule     and want to allow consecutive runs to overlap with each     other, or if you want to trigger multiple runs which differ     by their input parameters.  This setting affects only new     runs. For example, suppose the job\u2019s concurrency is 4 and     there are 4 concurrent active runs. Then setting the     concurrency to 3 won\u2019t kill any of the active runs. However,     from then on, new runs are skipped unless there are fewer     than 3 active runs.  This value cannot exceed 1000. Setting     this value to 0 causes all new runs to be skipped. The     default behavior is to allow only 1 concurrent run, e.g.     <code>10</code>. - git_source:     This functionality is in Public Preview.  An optional     specification for a remote repository containing the     notebooks used by this job's notebook tasks, e.g.     <pre><code>{\n    \"git_url\": \"https://github.com/databricks/databricks-cli\",\n    \"git_branch\": \"main\",\n    \"git_provider\": \"gitHub\",\n}\n</code></pre> - format:     Used to tell what is the format of the job. This field is     ignored in Create/Update/Reset calls. When using the Jobs     API 2.1 this value is always set to <code>'MULTI_TASK'</code>, e.g.     <code>MULTI_TASK</code>.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Upon success, an empty dict.</p> API Endpoint: <p><code>/2.1/jobs/reset</code></p> API Responses: Response Description 200 Job was overwritten successfully. 400 The request was malformed. See JSON response for error details. 401 The request was unauthorized. 500 The request was not handled correctly due to a server error. Source code in <code>prefect_databricks/jobs.py</code> <pre><code>@task\nasync def jobs_reset(\n    databricks_credentials: \"DatabricksCredentials\",\n    job_id: Optional[int] = None,\n    new_settings: \"models.JobSettings\" = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Overwrites all the settings for a specific job. Use the Update endpoint to\n    update job settings partially.\n\n    Args:\n        databricks_credentials:\n            Credentials to use for authentication with Databricks.\n        job_id:\n            The canonical identifier of the job to reset. This field is required,\n            e.g. `11223344`.\n        new_settings:\n            The new settings of the job. These settings completely replace the old\n            settings.  Changes to the field\n            `JobSettings.timeout_seconds` are applied to active runs.\n            Changes to other fields are applied to future runs only. Key-values:\n            - name:\n                An optional name for the job, e.g. `A multitask job`.\n            - tags:\n                A map of tags associated with the job. These are forwarded\n                to the cluster as cluster tags for jobs clusters, and are\n                subject to the same limitations as cluster tags. A maximum\n                of 25 tags can be added to the job, e.g.\n                ```\n                {\"cost-center\": \"engineering\", \"team\": \"jobs\"}\n                ```\n            - tasks:\n                A list of task specifications to be executed by this job, e.g.\n                ```\n                [\n                    {\n                        \"task_key\": \"Sessionize\",\n                        \"description\": \"Extracts session data from events\",\n                        \"depends_on\": [],\n                        \"existing_cluster_id\": \"0923-164208-meows279\",\n                        \"spark_jar_task\": {\n                            \"main_class_name\": \"com.databricks.Sessionize\",\n                            \"parameters\": [\n                                \"--data\",\n                                \"dbfs:/path/to/data.json\",\n                            ],\n                        },\n                        \"libraries\": [\n                            {\"jar\": \"dbfs:/mnt/databricks/Sessionize.jar\"}\n                        ],\n                        \"timeout_seconds\": 86400,\n                        \"max_retries\": 3,\n                        \"min_retry_interval_millis\": 2000,\n                        \"retry_on_timeout\": False,\n                    },\n                    {\n                        \"task_key\": \"Orders_Ingest\",\n                        \"description\": \"Ingests order data\",\n                        \"depends_on\": [],\n                        \"job_cluster_key\": \"auto_scaling_cluster\",\n                        \"spark_jar_task\": {\n                            \"main_class_name\": \"com.databricks.OrdersIngest\",\n                            \"parameters\": [\n                                \"--data\",\n                                \"dbfs:/path/to/order-data.json\",\n                            ],\n                        },\n                        \"libraries\": [\n                            {\"jar\": \"dbfs:/mnt/databricks/OrderIngest.jar\"}\n                        ],\n                        \"timeout_seconds\": 86400,\n                        \"max_retries\": 3,\n                        \"min_retry_interval_millis\": 2000,\n                        \"retry_on_timeout\": False,\n                    },\n                    {\n                        \"task_key\": \"Match\",\n                        \"description\": \"Matches orders with user sessions\",\n                        \"depends_on\": [\n                            {\"task_key\": \"Orders_Ingest\"},\n                            {\"task_key\": \"Sessionize\"},\n                        ],\n                        \"new_cluster\": {\n                            \"spark_version\": \"7.3.x-scala2.12\",\n                            \"node_type_id\": \"i3.xlarge\",\n                            \"spark_conf\": {\"spark.speculation\": True},\n                            \"aws_attributes\": {\n                                \"availability\": \"SPOT\",\n                                \"zone_id\": \"us-west-2a\",\n                            },\n                            \"autoscale\": {\n                                \"min_workers\": 2,\n                                \"max_workers\": 16,\n                            },\n                        },\n                        \"notebook_task\": {\n                            \"notebook_path\": \"/Users/user.name@databricks.com/Match\",\n                            \"source\": \"WORKSPACE\",\n                            \"base_parameters\": {\n                                \"name\": \"John Doe\",\n                                \"age\": \"35\",\n                            },\n                        },\n                        \"timeout_seconds\": 86400,\n                        \"max_retries\": 3,\n                        \"min_retry_interval_millis\": 2000,\n                        \"retry_on_timeout\": False,\n                    },\n                ]\n                ```\n            - job_clusters:\n                A list of job cluster specifications that can be shared and\n                reused by tasks of this job. Libraries cannot be declared in\n                a shared job cluster. You must declare dependent libraries\n                in task settings, e.g.\n                ```\n                [\n                    {\n                        \"job_cluster_key\": \"auto_scaling_cluster\",\n                        \"new_cluster\": {\n                            \"spark_version\": \"7.3.x-scala2.12\",\n                            \"node_type_id\": \"i3.xlarge\",\n                            \"spark_conf\": {\"spark.speculation\": True},\n                            \"aws_attributes\": {\n                                \"availability\": \"SPOT\",\n                                \"zone_id\": \"us-west-2a\",\n                            },\n                            \"autoscale\": {\n                                \"min_workers\": 2,\n                                \"max_workers\": 16,\n                            },\n                        },\n                    }\n                ]\n                ```\n            - email_notifications:\n                An optional set of email addresses that is notified when\n                runs of this job begin or complete as well as when this job\n                is deleted. The default behavior is to not send any emails.\n            - webhook_notifications:\n                A collection of system notification IDs to notify when runs\n                of this job begin or complete. The default behavior is to\n                not send any system notifications.\n            - timeout_seconds:\n                An optional timeout applied to each run of this job. The\n                default behavior is to have no timeout, e.g. `86400`.\n            - schedule:\n                An optional periodic schedule for this job. The default\n                behavior is that the job only runs when triggered by\n                clicking \u201cRun Now\u201d in the Jobs UI or sending an API request\n                to `runNow`.\n            - max_concurrent_runs:\n                An optional maximum allowed number of concurrent runs of the\n                job.  Set this value if you want to be able to execute\n                multiple runs of the same job concurrently. This is useful\n                for example if you trigger your job on a frequent schedule\n                and want to allow consecutive runs to overlap with each\n                other, or if you want to trigger multiple runs which differ\n                by their input parameters.  This setting affects only new\n                runs. For example, suppose the job\u2019s concurrency is 4 and\n                there are 4 concurrent active runs. Then setting the\n                concurrency to 3 won\u2019t kill any of the active runs. However,\n                from then on, new runs are skipped unless there are fewer\n                than 3 active runs.  This value cannot exceed 1000\\. Setting\n                this value to 0 causes all new runs to be skipped. The\n                default behavior is to allow only 1 concurrent run, e.g.\n                `10`.\n            - git_source:\n                This functionality is in Public Preview.  An optional\n                specification for a remote repository containing the\n                notebooks used by this job's notebook tasks, e.g.\n                ```\n                {\n                    \"git_url\": \"https://github.com/databricks/databricks-cli\",\n                    \"git_branch\": \"main\",\n                    \"git_provider\": \"gitHub\",\n                }\n                ```\n            - format:\n                Used to tell what is the format of the job. This field is\n                ignored in Create/Update/Reset calls. When using the Jobs\n                API 2.1 this value is always set to `'MULTI_TASK'`, e.g.\n                `MULTI_TASK`.\n\n    Returns:\n        Upon success, an empty dict.\n\n    &lt;h4&gt;API Endpoint:&lt;/h4&gt;\n    `/2.1/jobs/reset`\n\n    &lt;h4&gt;API Responses:&lt;/h4&gt;\n    | Response | Description |\n    | --- | --- |\n    | 200 | Job was overwritten successfully. |\n    | 400 | The request was malformed. See JSON response for error details. |\n    | 401 | The request was unauthorized. |\n    | 500 | The request was not handled correctly due to a server error. |\n    \"\"\"  # noqa\n    endpoint = \"/2.1/jobs/reset\"  # noqa\n\n    responses = {\n        200: \"Job was overwritten successfully.\",  # noqa\n        400: \"The request was malformed. See JSON response for error details.\",  # noqa\n        401: \"The request was unauthorized.\",  # noqa\n        500: \"The request was not handled correctly due to a server error.\",  # noqa\n    }\n\n    json_payload = {\n        \"job_id\": job_id,\n        \"new_settings\": new_settings,\n    }\n\n    response = await execute_endpoint.fn(\n        endpoint,\n        databricks_credentials,\n        http_method=HTTPMethod.POST,\n        json=json_payload,\n    )\n\n    contents = _unpack_contents(response, responses)\n    return contents\n</code></pre>"},{"location":"jobs/#prefect_databricks.jobs.jobs_run_now","title":"<code>jobs_run_now</code>  <code>async</code>","text":"<p>Run a job and return the <code>run_id</code> of the triggered run.</p> <p>Parameters:</p> Name Type Description Default <code>databricks_credentials</code> <code>DatabricksCredentials</code> <p>Credentials to use for authentication with Databricks.</p> required <code>job_id</code> <code>int</code> <p>The ID of the job to be executed, e.g. <code>11223344</code>.</p> required <code>idempotency_token</code> <code>Optional[str]</code> <p>An optional token to guarantee the idempotency of job run requests. If a run with the provided token already exists, the request does not create a new run but returns the ID of the existing run instead. If a run with the provided token is deleted, an error is returned.  If you specify the idempotency token, upon failure you can retry until the request succeeds. Databricks guarantees that exactly one run is launched with that idempotency token.  This token must have at most 64 characters.  For more information, see How to ensure idempotency for jobs, e.g. <code>8f018174-4792-40d5-bcbc-3e6a527352c8</code>.</p> <code>None</code> <code>jar_params</code> <code>Optional[List[str]]</code> <p>A list of parameters for jobs with Spark JAR tasks, for example <code>'jar_params': ['john doe', '35']</code>. The parameters are used to invoke the main function of the main class specified in the Spark JAR task. If not specified upon <code>run-now</code>, it defaults to an empty list. jar_params cannot be specified in conjunction with notebook_params. The JSON representation of this field (for example <code>{'jar_params':['john doe','35']}</code>) cannot exceed 10,000 bytes.  Use Task parameter variables to set parameters containing information about job runs, e.g. <pre><code>[\"john\", \"doe\", \"35\"]\n</code></pre></p> <code>None</code> <code>notebook_params</code> <code>Optional[Dict]</code> <p>A map from keys to values for jobs with notebook task, for example <code>'notebook_params': {'name': 'john doe', 'age': '35'}</code>. The map is passed to the notebook and is accessible through the dbutils.widgets.get function.  If not specified upon <code>run-now</code>, the triggered run uses the job\u2019s base parameters. notebook_params cannot be specified in conjunction with jar_params.  Use Task parameter variables to set parameters containing information about job runs.  The JSON representation of this field (for example <code>{'notebook_params':{'name':'john doe','age':'35'}}</code>) cannot exceed 10,000 bytes, e.g. <pre><code>{\"name\": \"john doe\", \"age\": \"35\"}\n</code></pre></p> <code>None</code> <code>python_params</code> <code>Optional[List[str]]</code> <p>A list of parameters for jobs with Python tasks, for example <code>'python_params': ['john doe', '35']</code>. The parameters are passed to Python file as command-line parameters. If specified upon <code>run-now</code>, it would overwrite the parameters specified in job setting. The JSON representation of this field (for example <code>{'python_params':['john doe','35']}</code>) cannot exceed 10,000 bytes.  Use Task parameter variables to set parameters containing information about job runs.  Important  These parameters accept only Latin characters (ASCII character set). Using non-ASCII characters returns an error. Examples of invalid, non-ASCII characters are Chinese, Japanese kanjis, and emojis, e.g. <pre><code>[\"john doe\", \"35\"]\n</code></pre></p> <code>None</code> <code>spark_submit_params</code> <code>Optional[List[str]]</code> <p>A list of parameters for jobs with spark submit task, for example <code>'spark_submit_params': ['--class', 'org.apache.spark.examples.SparkPi']</code>. The parameters are passed to spark-submit script as command-line parameters. If specified upon <code>run-now</code>, it would overwrite the parameters specified in job setting. The JSON representation of this field (for example <code>{'python_params':['john doe','35']}</code>) cannot exceed 10,000 bytes.  Use Task parameter variables to set parameters containing information about job runs.  Important  These parameters accept only Latin characters (ASCII character set). Using non-ASCII characters returns an error. Examples of invalid, non-ASCII characters are Chinese, Japanese kanjis, and emojis, e.g. <pre><code>[\"--class\", \"org.apache.spark.examples.SparkPi\"]\n</code></pre></p> <code>None</code> <code>python_named_params</code> <code>Optional[Dict]</code> <p>A map from keys to values for jobs with Python wheel task, for example <code>'python_named_params': {'name': 'task', 'data': 'dbfs:/path/to/data.json'}</code>, e.g. <pre><code>{\"name\": \"task\", \"data\": \"dbfs:/path/to/data.json\"}\n</code></pre></p> <code>None</code> <code>pipeline_params</code> <code>Optional[str]</code> <p>If <code>full_refresh</code> is set to true, trigger a full refresh on the delta live table e.g. <pre><code>    \"pipeline_params\": {\"full_refresh\": true}\n</code></pre></p> <code>None</code> <code>sql_params</code> <code>Optional[Dict]</code> <p>A map from keys to values for SQL tasks, for example <code>'sql_params': {'name': 'john doe', 'age': '35'}</code>. The SQL alert task does not support custom parameters, e.g. <pre><code>{\"name\": \"john doe\", \"age\": \"35\"}\n</code></pre></p> <code>None</code> <code>dbt_commands</code> <code>Optional[List]</code> <p>An array of commands to execute for jobs with the dbt task, for example <code>'dbt_commands': ['dbt deps', 'dbt seed', 'dbt run']</code>, e.g. <pre><code>[\"dbt deps\", \"dbt seed\", \"dbt run\"]\n</code></pre></p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Upon success, a dict of the response. - <code>run_id: int</code>- <code>number_in_job: int</code></p> API Endpoint: <p><code>/2.1/jobs/run-now</code></p> API Responses: Response Description 200 Run was started successfully. 400 The request was malformed. See JSON response for error details. 401 The request was unauthorized. 500 The request was not handled correctly due to a server error. Source code in <code>prefect_databricks/jobs.py</code> <pre><code>@task\nasync def jobs_run_now(\n    databricks_credentials: \"DatabricksCredentials\",\n    job_id: int,\n    idempotency_token: Optional[str] = None,\n    jar_params: Optional[List[str]] = None,\n    notebook_params: Optional[Dict] = None,\n    python_params: Optional[List[str]] = None,\n    spark_submit_params: Optional[List[str]] = None,\n    python_named_params: Optional[Dict] = None,\n    pipeline_params: Optional[str] = None,\n    sql_params: Optional[Dict] = None,\n    dbt_commands: Optional[List] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Run a job and return the `run_id` of the triggered run.\n\n    Args:\n        databricks_credentials:\n            Credentials to use for authentication with Databricks.\n        job_id:\n            The ID of the job to be executed, e.g. `11223344`.\n        idempotency_token:\n            An optional token to guarantee the idempotency of job run requests. If a\n            run with the provided token already exists, the request does\n            not create a new run but returns the ID of the existing run\n            instead. If a run with the provided token is deleted, an\n            error is returned.  If you specify the idempotency token,\n            upon failure you can retry until the request succeeds.\n            Databricks guarantees that exactly one run is launched with\n            that idempotency token.  This token must have at most 64\n            characters.  For more information, see [How to ensure\n            idempotency for jobs](https://kb.databricks.com/jobs/jobs-\n            idempotency.html), e.g.\n            `8f018174-4792-40d5-bcbc-3e6a527352c8`.\n        jar_params:\n            A list of parameters for jobs with Spark JAR tasks, for example\n            `'jar_params': ['john doe', '35']`. The parameters are used\n            to invoke the main function of the main class specified in\n            the Spark JAR task. If not specified upon `run-now`, it\n            defaults to an empty list. jar_params cannot be specified in\n            conjunction with notebook_params. The JSON representation of\n            this field (for example `{'jar_params':['john doe','35']}`)\n            cannot exceed 10,000 bytes.  Use [Task parameter\n            variables](https://docs.databricks.com/jobs.html\n            parameter-variables) to set parameters containing\n            information about job runs, e.g.\n            ```\n            [\"john\", \"doe\", \"35\"]\n            ```\n        notebook_params:\n            A map from keys to values for jobs with notebook task, for example\n            `'notebook_params': {'name': 'john doe', 'age': '35'}`. The\n            map is passed to the notebook and is accessible through the\n            [dbutils.widgets.get](https://docs.databricks.com/dev-\n            tools/databricks-utils.html\n            dbutils-widgets) function.  If not specified upon `run-now`,\n            the triggered run uses the job\u2019s base parameters.\n            notebook_params cannot be specified in conjunction with\n            jar_params.  Use [Task parameter\n            variables](https://docs.databricks.com/jobs.html\n            parameter-variables) to set parameters containing\n            information about job runs.  The JSON representation of this\n            field (for example `{'notebook_params':{'name':'john\n            doe','age':'35'}}`) cannot exceed 10,000 bytes, e.g.\n            ```\n            {\"name\": \"john doe\", \"age\": \"35\"}\n            ```\n        python_params:\n            A list of parameters for jobs with Python tasks, for example\n            `'python_params': ['john doe', '35']`. The parameters are\n            passed to Python file as command-line parameters. If\n            specified upon `run-now`, it would overwrite the parameters\n            specified in job setting. The JSON representation of this\n            field (for example `{'python_params':['john doe','35']}`)\n            cannot exceed 10,000 bytes.  Use [Task parameter\n            variables](https://docs.databricks.com/jobs.html\n            parameter-variables) to set parameters containing\n            information about job runs.  Important  These parameters\n            accept only Latin characters (ASCII character set). Using\n            non-ASCII characters returns an error. Examples of invalid,\n            non-ASCII characters are Chinese, Japanese kanjis, and\n            emojis, e.g.\n            ```\n            [\"john doe\", \"35\"]\n            ```\n        spark_submit_params:\n            A list of parameters for jobs with spark submit task, for example\n            `'spark_submit_params': ['--class',\n            'org.apache.spark.examples.SparkPi']`. The parameters are\n            passed to spark-submit script as command-line parameters. If\n            specified upon `run-now`, it would overwrite the parameters\n            specified in job setting. The JSON representation of this\n            field (for example `{'python_params':['john doe','35']}`)\n            cannot exceed 10,000 bytes.  Use [Task parameter\n            variables](https://docs.databricks.com/jobs.html\n            parameter-variables) to set parameters containing\n            information about job runs.  Important  These parameters\n            accept only Latin characters (ASCII character set). Using\n            non-ASCII characters returns an error. Examples of invalid,\n            non-ASCII characters are Chinese, Japanese kanjis, and\n            emojis, e.g.\n            ```\n            [\"--class\", \"org.apache.spark.examples.SparkPi\"]\n            ```\n        python_named_params:\n            A map from keys to values for jobs with Python wheel task, for example\n            `'python_named_params': {'name': 'task', 'data':\n            'dbfs:/path/to/data.json'}`, e.g.\n            ```\n            {\"name\": \"task\", \"data\": \"dbfs:/path/to/data.json\"}\n            ```\n        pipeline_params:\n            If `full_refresh` is set to true, trigger a full refresh on the\n            delta live table e.g.\n            ```\n                \"pipeline_params\": {\"full_refresh\": true}\n            ```\n\n        sql_params:\n            A map from keys to values for SQL tasks, for example `'sql_params':\n            {'name': 'john doe', 'age': '35'}`. The SQL alert task does\n            not support custom parameters, e.g.\n            ```\n            {\"name\": \"john doe\", \"age\": \"35\"}\n            ```\n        dbt_commands:\n            An array of commands to execute for jobs with the dbt task, for example\n            `'dbt_commands': ['dbt deps', 'dbt seed', 'dbt run']`, e.g.\n            ```\n            [\"dbt deps\", \"dbt seed\", \"dbt run\"]\n            ```\n\n    Returns:\n        Upon success, a dict of the response. &lt;/br&gt;- `run_id: int`&lt;/br&gt;- `number_in_job: int`&lt;/br&gt;\n\n    &lt;h4&gt;API Endpoint:&lt;/h4&gt;\n    `/2.1/jobs/run-now`\n\n    &lt;h4&gt;API Responses:&lt;/h4&gt;\n    | Response | Description |\n    | --- | --- |\n    | 200 | Run was started successfully. |\n    | 400 | The request was malformed. See JSON response for error details. |\n    | 401 | The request was unauthorized. |\n    | 500 | The request was not handled correctly due to a server error. |\n    \"\"\"  # noqa\n    endpoint = \"/2.1/jobs/run-now\"  # noqa\n\n    responses = {\n        200: \"Run was started successfully.\",  # noqa\n        400: \"The request was malformed. See JSON response for error details.\",  # noqa\n        401: \"The request was unauthorized.\",  # noqa\n        500: \"The request was not handled correctly due to a server error.\",  # noqa\n    }\n\n    json_payload = {\n        \"job_id\": job_id,\n        \"idempotency_token\": idempotency_token,\n        \"jar_params\": jar_params,\n        \"notebook_params\": notebook_params,\n        \"python_params\": python_params,\n        \"spark_submit_params\": spark_submit_params,\n        \"python_named_params\": python_named_params,\n        \"pipeline_params\": pipeline_params,\n        \"sql_params\": sql_params,\n        \"dbt_commands\": dbt_commands,\n    }\n\n    response = await execute_endpoint.fn(\n        endpoint,\n        databricks_credentials,\n        http_method=HTTPMethod.POST,\n        json=json_payload,\n    )\n\n    contents = _unpack_contents(response, responses)\n    return contents\n</code></pre>"},{"location":"jobs/#prefect_databricks.jobs.jobs_runs_cancel","title":"<code>jobs_runs_cancel</code>  <code>async</code>","text":"<p>Cancels a job run. The run is canceled asynchronously, so it may still be running when this request completes.</p> <p>Parameters:</p> Name Type Description Default <code>databricks_credentials</code> <code>DatabricksCredentials</code> <p>Credentials to use for authentication with Databricks.</p> required <code>run_id</code> <code>Optional[int]</code> <p>This field is required, e.g. <code>455644833</code>.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Upon success, an empty dict.</p> API Endpoint: <p><code>/2.1/jobs/runs/cancel</code></p> API Responses: Response Description 200 Run was cancelled successfully. 400 The request was malformed. See JSON response for error details. 401 The request was unauthorized. 500 The request was not handled correctly due to a server error. Source code in <code>prefect_databricks/jobs.py</code> <pre><code>@task\nasync def jobs_runs_cancel(\n    databricks_credentials: \"DatabricksCredentials\",\n    run_id: Optional[int] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Cancels a job run. The run is canceled asynchronously, so it may still be\n    running when this request completes.\n\n    Args:\n        databricks_credentials:\n            Credentials to use for authentication with Databricks.\n        run_id:\n            This field is required, e.g. `455644833`.\n\n    Returns:\n        Upon success, an empty dict.\n\n    &lt;h4&gt;API Endpoint:&lt;/h4&gt;\n    `/2.1/jobs/runs/cancel`\n\n    &lt;h4&gt;API Responses:&lt;/h4&gt;\n    | Response | Description |\n    | --- | --- |\n    | 200 | Run was cancelled successfully. |\n    | 400 | The request was malformed. See JSON response for error details. |\n    | 401 | The request was unauthorized. |\n    | 500 | The request was not handled correctly due to a server error. |\n    \"\"\"  # noqa\n    endpoint = \"/2.1/jobs/runs/cancel\"  # noqa\n\n    responses = {\n        200: \"Run was cancelled successfully.\",  # noqa\n        400: \"The request was malformed. See JSON response for error details.\",  # noqa\n        401: \"The request was unauthorized.\",  # noqa\n        500: \"The request was not handled correctly due to a server error.\",  # noqa\n    }\n\n    json_payload = {\n        \"run_id\": run_id,\n    }\n\n    response = await execute_endpoint.fn(\n        endpoint,\n        databricks_credentials,\n        http_method=HTTPMethod.POST,\n        json=json_payload,\n    )\n\n    contents = _unpack_contents(response, responses)\n    return contents\n</code></pre>"},{"location":"jobs/#prefect_databricks.jobs.jobs_runs_cancel_all","title":"<code>jobs_runs_cancel_all</code>  <code>async</code>","text":"<p>Cancels all active runs of a job. The runs are canceled asynchronously, so it doesn't prevent new runs from being started.</p> <p>Parameters:</p> Name Type Description Default <code>databricks_credentials</code> <code>DatabricksCredentials</code> <p>Credentials to use for authentication with Databricks.</p> required <code>job_id</code> <code>Optional[int]</code> <p>The canonical identifier of the job to cancel all runs of. This field is required, e.g. <code>11223344</code>.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Upon success, an empty dict.</p> API Endpoint: <p><code>/2.1/jobs/runs/cancel-all</code></p> API Responses: Response Description 200 All runs were cancelled successfully. 400 The request was malformed. See JSON response for error details. 401 The request was unauthorized. 500 The request was not handled correctly due to a server error. Source code in <code>prefect_databricks/jobs.py</code> <pre><code>@task\nasync def jobs_runs_cancel_all(\n    databricks_credentials: \"DatabricksCredentials\",\n    job_id: Optional[int] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Cancels all active runs of a job. The runs are canceled asynchronously, so it\n    doesn't prevent new runs from being started.\n\n    Args:\n        databricks_credentials:\n            Credentials to use for authentication with Databricks.\n        job_id:\n            The canonical identifier of the job to cancel all runs of. This field is\n            required, e.g. `11223344`.\n\n    Returns:\n        Upon success, an empty dict.\n\n    &lt;h4&gt;API Endpoint:&lt;/h4&gt;\n    `/2.1/jobs/runs/cancel-all`\n\n    &lt;h4&gt;API Responses:&lt;/h4&gt;\n    | Response | Description |\n    | --- | --- |\n    | 200 | All runs were cancelled successfully. |\n    | 400 | The request was malformed. See JSON response for error details. |\n    | 401 | The request was unauthorized. |\n    | 500 | The request was not handled correctly due to a server error. |\n    \"\"\"  # noqa\n    endpoint = \"/2.1/jobs/runs/cancel-all\"  # noqa\n\n    responses = {\n        200: \"All runs were cancelled successfully.\",  # noqa\n        400: \"The request was malformed. See JSON response for error details.\",  # noqa\n        401: \"The request was unauthorized.\",  # noqa\n        500: \"The request was not handled correctly due to a server error.\",  # noqa\n    }\n\n    json_payload = {\n        \"job_id\": job_id,\n    }\n\n    response = await execute_endpoint.fn(\n        endpoint,\n        databricks_credentials,\n        http_method=HTTPMethod.POST,\n        json=json_payload,\n    )\n\n    contents = _unpack_contents(response, responses)\n    return contents\n</code></pre>"},{"location":"jobs/#prefect_databricks.jobs.jobs_runs_delete","title":"<code>jobs_runs_delete</code>  <code>async</code>","text":"<p>Deletes a non-active run. Returns an error if the run is active.</p> <p>Parameters:</p> Name Type Description Default <code>databricks_credentials</code> <code>DatabricksCredentials</code> <p>Credentials to use for authentication with Databricks.</p> required <code>run_id</code> <code>Optional[int]</code> <p>The canonical identifier of the run for which to retrieve the metadata, e.g. <code>455644833</code>.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Upon success, an empty dict.</p> API Endpoint: <p><code>/2.1/jobs/runs/delete</code></p> API Responses: Response Description 200 Run was deleted successfully. 400 The request was malformed. See JSON response for error details. 401 The request was unauthorized. 500 The request was not handled correctly due to a server error. Source code in <code>prefect_databricks/jobs.py</code> <pre><code>@task\nasync def jobs_runs_delete(\n    databricks_credentials: \"DatabricksCredentials\",\n    run_id: Optional[int] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Deletes a non-active run. Returns an error if the run is active.\n\n    Args:\n        databricks_credentials:\n            Credentials to use for authentication with Databricks.\n        run_id:\n            The canonical identifier of the run for which to retrieve the metadata,\n            e.g. `455644833`.\n\n    Returns:\n        Upon success, an empty dict.\n\n    &lt;h4&gt;API Endpoint:&lt;/h4&gt;\n    `/2.1/jobs/runs/delete`\n\n    &lt;h4&gt;API Responses:&lt;/h4&gt;\n    | Response | Description |\n    | --- | --- |\n    | 200 | Run was deleted successfully. |\n    | 400 | The request was malformed. See JSON response for error details. |\n    | 401 | The request was unauthorized. |\n    | 500 | The request was not handled correctly due to a server error. |\n    \"\"\"  # noqa\n    endpoint = \"/2.1/jobs/runs/delete\"  # noqa\n\n    responses = {\n        200: \"Run was deleted successfully.\",  # noqa\n        400: \"The request was malformed. See JSON response for error details.\",  # noqa\n        401: \"The request was unauthorized.\",  # noqa\n        500: \"The request was not handled correctly due to a server error.\",  # noqa\n    }\n\n    json_payload = {\n        \"run_id\": run_id,\n    }\n\n    response = await execute_endpoint.fn(\n        endpoint,\n        databricks_credentials,\n        http_method=HTTPMethod.POST,\n        json=json_payload,\n    )\n\n    contents = _unpack_contents(response, responses)\n    return contents\n</code></pre>"},{"location":"jobs/#prefect_databricks.jobs.jobs_runs_export","title":"<code>jobs_runs_export</code>  <code>async</code>","text":"<p>Export and retrieve the job run task.</p> <p>Parameters:</p> Name Type Description Default <code>run_id</code> <code>int</code> <p>The canonical identifier for the run. This field is required.</p> required <code>databricks_credentials</code> <code>DatabricksCredentials</code> <p>Credentials to use for authentication with Databricks.</p> required <code>views_to_export</code> <code>Optional[ViewsToExport]</code> <p>Which views to export (CODE, DASHBOARDS, or ALL). Defaults to CODE.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Upon success, a dict of the response. - <code>views: List[\"models.ViewItem\"]</code></p> API Endpoint: <p><code>/2.0/jobs/runs/export</code></p> API Responses: Response Description 200 Run was exported successfully. 400 The request was malformed. See JSON response for error details. 401 The request was unauthorized. 500 The request was not handled correctly due to a server error. Source code in <code>prefect_databricks/jobs.py</code> <pre><code>@task\nasync def jobs_runs_export(\n    run_id: int,\n    databricks_credentials: \"DatabricksCredentials\",\n    views_to_export: Optional[\"models.ViewsToExport\"] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Export and retrieve the job run task.\n\n    Args:\n        run_id:\n            The canonical identifier for the run. This field is required.\n        databricks_credentials:\n            Credentials to use for authentication with Databricks.\n        views_to_export:\n            Which views to export (CODE, DASHBOARDS, or ALL). Defaults to CODE.\n\n    Returns:\n        Upon success, a dict of the response. &lt;/br&gt;- `views: List[\"models.ViewItem\"]`&lt;/br&gt;\n\n    &lt;h4&gt;API Endpoint:&lt;/h4&gt;\n    `/2.0/jobs/runs/export`\n\n    &lt;h4&gt;API Responses:&lt;/h4&gt;\n    | Response | Description |\n    | --- | --- |\n    | 200 | Run was exported successfully. |\n    | 400 | The request was malformed. See JSON response for error details. |\n    | 401 | The request was unauthorized. |\n    | 500 | The request was not handled correctly due to a server error. |\n    \"\"\"  # noqa\n    endpoint = \"/2.0/jobs/runs/export\"  # noqa\n\n    responses = {\n        200: \"Run was exported successfully.\",  # noqa\n        400: \"The request was malformed. See JSON response for error details.\",  # noqa\n        401: \"The request was unauthorized.\",  # noqa\n        500: \"The request was not handled correctly due to a server error.\",  # noqa\n    }\n\n    params = {\n        \"run_id\": run_id,\n        \"views_to_export\": views_to_export,\n    }\n\n    response = await execute_endpoint.fn(\n        endpoint,\n        databricks_credentials,\n        http_method=HTTPMethod.GET,\n        params=params,\n    )\n\n    contents = _unpack_contents(response, responses)\n    return contents\n</code></pre>"},{"location":"jobs/#prefect_databricks.jobs.jobs_runs_get","title":"<code>jobs_runs_get</code>  <code>async</code>","text":"<p>Retrieve the metadata of a run.</p> <p>Parameters:</p> Name Type Description Default <code>run_id</code> <code>int</code> <p>The canonical identifier of the run for which to retrieve the metadata. This field is required.</p> required <code>databricks_credentials</code> <code>DatabricksCredentials</code> <p>Credentials to use for authentication with Databricks.</p> required <code>include_history</code> <code>Optional[bool]</code> <p>Whether to include the repair history in the response.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Upon success, a dict of the response. - <code>job_id: int</code>- <code>run_id: int</code>- <code>number_in_job: int</code>- <code>creator_user_name: str</code>- <code>original_attempt_run_id: int</code>- <code>state: \"models.RunState\"</code>- <code>schedule: \"models.CronSchedule\"</code>- <code>tasks: List[\"models.RunTask\"]</code>- <code>job_clusters: List[\"models.JobCluster\"]</code>- <code>cluster_spec: \"models.ClusterSpec\"</code>- <code>cluster_instance: \"models.ClusterInstance\"</code>- <code>git_source: \"models.GitSource\"</code>- <code>overriding_parameters: \"models.RunParameters\"</code>- <code>start_time: int</code>- <code>setup_duration: int</code>- <code>execution_duration: int</code>- <code>cleanup_duration: int</code>- <code>end_time: int</code>- <code>trigger: \"models.TriggerType\"</code>- <code>run_name: str</code>- <code>run_page_url: str</code>- <code>run_type: \"models.RunType\"</code>- <code>attempt_number: int</code>- <code>repair_history: List[\"models.RepairHistoryItem\"]</code></p> API Endpoint: <p><code>/2.1/jobs/runs/get</code></p> API Responses: Response Description 200 Run was retrieved successfully. 400 The request was malformed. See JSON response for error details. 401 The request was unauthorized. 500 The request was not handled correctly due to a server error. Source code in <code>prefect_databricks/jobs.py</code> <pre><code>@task\nasync def jobs_runs_get(\n    run_id: int,\n    databricks_credentials: \"DatabricksCredentials\",\n    include_history: Optional[bool] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Retrieve the metadata of a run.\n\n    Args:\n        run_id:\n            The canonical identifier of the run for which to retrieve the metadata.\n            This field is required.\n        databricks_credentials:\n            Credentials to use for authentication with Databricks.\n        include_history:\n            Whether to include the repair history in the response.\n\n    Returns:\n        Upon success, a dict of the response. &lt;/br&gt;- `job_id: int`&lt;/br&gt;- `run_id: int`&lt;/br&gt;- `number_in_job: int`&lt;/br&gt;- `creator_user_name: str`&lt;/br&gt;- `original_attempt_run_id: int`&lt;/br&gt;- `state: \"models.RunState\"`&lt;/br&gt;- `schedule: \"models.CronSchedule\"`&lt;/br&gt;- `tasks: List[\"models.RunTask\"]`&lt;/br&gt;- `job_clusters: List[\"models.JobCluster\"]`&lt;/br&gt;- `cluster_spec: \"models.ClusterSpec\"`&lt;/br&gt;- `cluster_instance: \"models.ClusterInstance\"`&lt;/br&gt;- `git_source: \"models.GitSource\"`&lt;/br&gt;- `overriding_parameters: \"models.RunParameters\"`&lt;/br&gt;- `start_time: int`&lt;/br&gt;- `setup_duration: int`&lt;/br&gt;- `execution_duration: int`&lt;/br&gt;- `cleanup_duration: int`&lt;/br&gt;- `end_time: int`&lt;/br&gt;- `trigger: \"models.TriggerType\"`&lt;/br&gt;- `run_name: str`&lt;/br&gt;- `run_page_url: str`&lt;/br&gt;- `run_type: \"models.RunType\"`&lt;/br&gt;- `attempt_number: int`&lt;/br&gt;- `repair_history: List[\"models.RepairHistoryItem\"]`&lt;/br&gt;\n\n    &lt;h4&gt;API Endpoint:&lt;/h4&gt;\n    `/2.1/jobs/runs/get`\n\n    &lt;h4&gt;API Responses:&lt;/h4&gt;\n    | Response | Description |\n    | --- | --- |\n    | 200 | Run was retrieved successfully. |\n    | 400 | The request was malformed. See JSON response for error details. |\n    | 401 | The request was unauthorized. |\n    | 500 | The request was not handled correctly due to a server error. |\n    \"\"\"  # noqa\n    endpoint = \"/2.1/jobs/runs/get\"  # noqa\n\n    responses = {\n        200: \"Run was retrieved successfully.\",  # noqa\n        400: \"The request was malformed. See JSON response for error details.\",  # noqa\n        401: \"The request was unauthorized.\",  # noqa\n        500: \"The request was not handled correctly due to a server error.\",  # noqa\n    }\n\n    params = {\n        \"run_id\": run_id,\n        \"include_history\": include_history,\n    }\n\n    response = await execute_endpoint.fn(\n        endpoint,\n        databricks_credentials,\n        http_method=HTTPMethod.GET,\n        params=params,\n    )\n\n    contents = _unpack_contents(response, responses)\n    return contents\n</code></pre>"},{"location":"jobs/#prefect_databricks.jobs.jobs_runs_get_output","title":"<code>jobs_runs_get_output</code>  <code>async</code>","text":"<p>Retrieve the output and metadata of a single task run. When a notebook task returns a value through the dbutils.notebook.exit() call, you can use this endpoint to retrieve that value. Databricks restricts this API to return the first 5 MB of the output. To return a larger result, you can store job results in a cloud storage service. This endpoint validates that the run_id parameter is valid and returns an HTTP status code 400 if the run_id parameter is invalid. Runs are automatically removed after 60 days. If you to want to reference them beyond 60 days, you must save old run results before they expire. To export using the UI, see Export job run results. To export using the Jobs API, see Runs export.</p> <p>Parameters:</p> Name Type Description Default <code>run_id</code> <code>int</code> <p>The canonical identifier for the run. This field is required.</p> required <code>databricks_credentials</code> <code>DatabricksCredentials</code> <p>Credentials to use for authentication with Databricks.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Upon success, a dict of the response. - <code>notebook_output: \"models.NotebookOutput\"</code>- <code>sql_output: \"models.SqlOutput\"</code>- <code>dbt_output: \"models.DbtOutput\"</code>- <code>logs: str</code>- <code>logs_truncated: bool</code>- <code>error: str</code>- <code>error_trace: str</code>- <code>metadata: \"models.Run\"</code></p> API Endpoint: <p><code>/2.1/jobs/runs/get-output</code></p> API Responses: Response Description 200 Run output was retrieved successfully. 400 A job run with multiple tasks was provided. 401 The request was unauthorized. 500 The request was not handled correctly due to a server error. Source code in <code>prefect_databricks/jobs.py</code> <pre><code>@task\nasync def jobs_runs_get_output(\n    run_id: int,\n    databricks_credentials: \"DatabricksCredentials\",\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Retrieve the output and metadata of a single task run. When a notebook task\n    returns a value through the dbutils.notebook.exit() call, you can use this\n    endpoint to retrieve that value. Databricks restricts this API to return the\n    first 5 MB of the output. To return a larger result, you can store job\n    results in a cloud storage service. This endpoint validates that the run_id\n    parameter is valid and returns an HTTP status code 400 if the run_id\n    parameter is invalid. Runs are automatically removed after 60 days. If you\n    to want to reference them beyond 60 days, you must save old run results\n    before they expire. To export using the UI, see Export job run results. To\n    export using the Jobs API, see Runs export.\n\n    Args:\n        run_id:\n            The canonical identifier for the run. This field is required.\n        databricks_credentials:\n            Credentials to use for authentication with Databricks.\n\n    Returns:\n        Upon success, a dict of the response. &lt;/br&gt;- `notebook_output: \"models.NotebookOutput\"`&lt;/br&gt;- `sql_output: \"models.SqlOutput\"`&lt;/br&gt;- `dbt_output: \"models.DbtOutput\"`&lt;/br&gt;- `logs: str`&lt;/br&gt;- `logs_truncated: bool`&lt;/br&gt;- `error: str`&lt;/br&gt;- `error_trace: str`&lt;/br&gt;- `metadata: \"models.Run\"`&lt;/br&gt;\n\n    &lt;h4&gt;API Endpoint:&lt;/h4&gt;\n    `/2.1/jobs/runs/get-output`\n\n    &lt;h4&gt;API Responses:&lt;/h4&gt;\n    | Response | Description |\n    | --- | --- |\n    | 200 | Run output was retrieved successfully. |\n    | 400 | A job run with multiple tasks was provided. |\n    | 401 | The request was unauthorized. |\n    | 500 | The request was not handled correctly due to a server error. |\n    \"\"\"  # noqa\n    endpoint = \"/2.1/jobs/runs/get-output\"  # noqa\n\n    responses = {\n        200: \"Run output was retrieved successfully.\",  # noqa\n        400: \"A job run with multiple tasks was provided.\",  # noqa\n        401: \"The request was unauthorized.\",  # noqa\n        500: \"The request was not handled correctly due to a server error.\",  # noqa\n    }\n\n    params = {\n        \"run_id\": run_id,\n    }\n\n    response = await execute_endpoint.fn(\n        endpoint,\n        databricks_credentials,\n        http_method=HTTPMethod.GET,\n        params=params,\n    )\n\n    contents = _unpack_contents(response, responses)\n    return contents\n</code></pre>"},{"location":"jobs/#prefect_databricks.jobs.jobs_runs_list","title":"<code>jobs_runs_list</code>  <code>async</code>","text":"<p>List runs in descending order by start time.</p> <p>Parameters:</p> Name Type Description Default <code>databricks_credentials</code> <code>DatabricksCredentials</code> <p>Credentials to use for authentication with Databricks.</p> required <code>active_only</code> <code>bool</code> <p>If active_only is <code>true</code>, only active runs are included in the results; otherwise, lists both active and completed runs. An active run is a run in the <code>PENDING</code>, <code>RUNNING</code>, or <code>TERMINATING</code>. This field cannot be <code>true</code> when completed_only is <code>true</code>.</p> <code>False</code> <code>completed_only</code> <code>bool</code> <p>If completed_only is <code>true</code>, only completed runs are included in the results; otherwise, lists both active and completed runs. This field cannot be <code>true</code> when active_only is <code>true</code>.</p> <code>False</code> <code>job_id</code> <code>Optional[int]</code> <p>The job for which to list runs. If omitted, the Jobs service lists runs from all jobs.</p> <code>None</code> <code>offset</code> <code>int</code> <p>The offset of the first run to return, relative to the most recent run.</p> <code>0</code> <code>limit</code> <code>int</code> <p>The number of runs to return. This value must be greater than 0 and less than 25. The default value is 25. If a request specifies a limit of 0, the service instead uses the maximum limit.</p> <code>25</code> <code>run_type</code> <code>Optional[str]</code> <p>The type of runs to return. For a description of run types, see Run.</p> <code>None</code> <code>expand_tasks</code> <code>bool</code> <p>Whether to include task and cluster details in the response.</p> <code>False</code> <code>start_time_from</code> <code>Optional[int]</code> <p>Show runs that started at or after this value. The value must be a UTC timestamp in milliseconds. Can be combined with start_time_to to filter by a time range.</p> <code>None</code> <code>start_time_to</code> <code>Optional[int]</code> <p>Show runs that started at or before this value. The value must be a UTC timestamp in milliseconds. Can be combined with start_time_from to filter by a time range.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Upon success, a dict of the response. - <code>runs: List[\"models.Run\"]</code>- <code>has_more: bool</code></p> API Endpoint: <p><code>/2.1/jobs/runs/list</code></p> API Responses: Response Description 200 List of runs was retrieved successfully. 400 The request was malformed. See JSON response for error details. 401 The request was unauthorized. 500 The request was not handled correctly due to a server error. Source code in <code>prefect_databricks/jobs.py</code> <pre><code>@task\nasync def jobs_runs_list(\n    databricks_credentials: \"DatabricksCredentials\",\n    active_only: bool = False,\n    completed_only: bool = False,\n    job_id: Optional[int] = None,\n    offset: int = 0,\n    limit: int = 25,\n    run_type: Optional[str] = None,\n    expand_tasks: bool = False,\n    start_time_from: Optional[int] = None,\n    start_time_to: Optional[int] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    List runs in descending order by start time.\n\n    Args:\n        databricks_credentials:\n            Credentials to use for authentication with Databricks.\n        active_only:\n            If active_only is `true`, only active runs are included in the results;\n            otherwise, lists both active and completed runs. An active\n            run is a run in the `PENDING`, `RUNNING`, or `TERMINATING`.\n            This field cannot be `true` when completed_only is `true`.\n        completed_only:\n            If completed_only is `true`, only completed runs are included in the\n            results; otherwise, lists both active and completed runs.\n            This field cannot be `true` when active_only is `true`.\n        job_id:\n            The job for which to list runs. If omitted, the Jobs service lists runs\n            from all jobs.\n        offset:\n            The offset of the first run to return, relative to the most recent run.\n        limit:\n            The number of runs to return. This value must be greater than 0 and less\n            than 25\\. The default value is 25\\. If a request specifies a\n            limit of 0, the service instead uses the maximum limit.\n        run_type:\n            The type of runs to return. For a description of run types, see\n            [Run](https://docs.databricks.com/dev-\n            tools/api/latest/jobs.html\n            operation/JobsRunsGet).\n        expand_tasks:\n            Whether to include task and cluster details in the response.\n        start_time_from:\n            Show runs that started _at or after_ this value. The value must be a UTC\n            timestamp in milliseconds. Can be combined with\n            _start_time_to_ to filter by a time range.\n        start_time_to:\n            Show runs that started _at or before_ this value. The value must be a\n            UTC timestamp in milliseconds. Can be combined with\n            _start_time_from_ to filter by a time range.\n\n    Returns:\n        Upon success, a dict of the response. &lt;/br&gt;- `runs: List[\"models.Run\"]`&lt;/br&gt;- `has_more: bool`&lt;/br&gt;\n\n    &lt;h4&gt;API Endpoint:&lt;/h4&gt;\n    `/2.1/jobs/runs/list`\n\n    &lt;h4&gt;API Responses:&lt;/h4&gt;\n    | Response | Description |\n    | --- | --- |\n    | 200 | List of runs was retrieved successfully. |\n    | 400 | The request was malformed. See JSON response for error details. |\n    | 401 | The request was unauthorized. |\n    | 500 | The request was not handled correctly due to a server error. |\n    \"\"\"  # noqa\n    endpoint = \"/2.1/jobs/runs/list\"  # noqa\n\n    responses = {\n        200: \"List of runs was retrieved successfully.\",  # noqa\n        400: \"The request was malformed. See JSON response for error details.\",  # noqa\n        401: \"The request was unauthorized.\",  # noqa\n        500: \"The request was not handled correctly due to a server error.\",  # noqa\n    }\n\n    params = {\n        \"active_only\": active_only,\n        \"completed_only\": completed_only,\n        \"job_id\": job_id,\n        \"offset\": offset,\n        \"limit\": limit,\n        \"run_type\": run_type,\n        \"expand_tasks\": expand_tasks,\n        \"start_time_from\": start_time_from,\n        \"start_time_to\": start_time_to,\n    }\n\n    response = await execute_endpoint.fn(\n        endpoint,\n        databricks_credentials,\n        http_method=HTTPMethod.GET,\n        params=params,\n    )\n\n    contents = _unpack_contents(response, responses)\n    return contents\n</code></pre>"},{"location":"jobs/#prefect_databricks.jobs.jobs_runs_repair","title":"<code>jobs_runs_repair</code>  <code>async</code>","text":"<p>Re-run one or more tasks. Tasks are re-run as part of the original job run, use the current job and task settings, and can be viewed in the history for the original job run.</p> <p>Parameters:</p> Name Type Description Default <code>databricks_credentials</code> <code>DatabricksCredentials</code> <p>Credentials to use for authentication with Databricks.</p> required <code>run_id</code> <code>Optional[int]</code> <p>The job run ID of the run to repair. The run must not be in progress, e.g. <code>455644833</code>.</p> <code>None</code> <code>rerun_tasks</code> <code>Optional[List[str]]</code> <p>The task keys of the task runs to repair, e.g. <pre><code>[\"task0\", \"task1\"]\n</code></pre></p> <code>None</code> <code>latest_repair_id</code> <code>Optional[int]</code> <p>The ID of the latest repair. This parameter is not required when repairing a run for the first time, but must be provided on subsequent requests to repair the same run, e.g. <code>734650698524280</code>.</p> <code>None</code> <code>rerun_all_failed_tasks</code> <code>bool</code> <p>If true, repair all failed tasks. Only one of rerun_tasks or rerun_all_failed_tasks can be used.</p> <code>False</code> <code>jar_params</code> <code>Optional[List[str]]</code> <p>A list of parameters for jobs with Spark JAR tasks, for example <code>'jar_params': ['john doe', '35']</code>. The parameters are used to invoke the main function of the main class specified in the Spark JAR task. If not specified upon <code>run-now</code>, it defaults to an empty list. jar_params cannot be specified in conjunction with notebook_params. The JSON representation of this field (for example <code>{'jar_params':['john doe','35']}</code>) cannot exceed 10,000 bytes.  Use Task parameter variables to set parameters containing information about job runs, e.g. <pre><code>[\"john\", \"doe\", \"35\"]\n</code></pre></p> <code>None</code> <code>notebook_params</code> <code>Optional[Dict]</code> <p>A map from keys to values for jobs with notebook task, for example <code>'notebook_params': {'name': 'john doe', 'age': '35'}</code>. The map is passed to the notebook and is accessible through the dbutils.widgets.get function.  If not specified upon <code>run-now</code>, the triggered run uses the job\u2019s base parameters. notebook_params cannot be specified in conjunction with jar_params.  Use Task parameter variables to set parameters containing information about job runs.  The JSON representation of this field (for example <code>{'notebook_params':{'name':'john doe','age':'35'}}</code>) cannot exceed 10,000 bytes, e.g. <pre><code>{\"name\": \"john doe\", \"age\": \"35\"}\n</code></pre></p> <code>None</code> <code>python_params</code> <code>Optional[List[str]]</code> <p>A list of parameters for jobs with Python tasks, for example <code>'python_params': ['john doe', '35']</code>. The parameters are passed to Python file as command-line parameters. If specified upon <code>run-now</code>, it would overwrite the parameters specified in job setting. The JSON representation of this field (for example <code>{'python_params':['john doe','35']}</code>) cannot exceed 10,000 bytes.  Use Task parameter variables to set parameters containing information about job runs.  Important  These parameters accept only Latin characters (ASCII character set). Using non-ASCII characters returns an error. Examples of invalid, non-ASCII characters are Chinese, Japanese kanjis, and emojis, e.g. <pre><code>[\"john doe\", \"35\"]\n</code></pre></p> <code>None</code> <code>spark_submit_params</code> <code>Optional[List[str]]</code> <p>A list of parameters for jobs with spark submit task, for example <code>'spark_submit_params': ['--class', 'org.apache.spark.examples.SparkPi']</code>. The parameters are passed to spark-submit script as command-line parameters. If specified upon <code>run-now</code>, it would overwrite the parameters specified in job setting. The JSON representation of this field (for example <code>{'python_params':['john doe','35']}</code>) cannot exceed 10,000 bytes.  Use Task parameter variables to set parameters containing information about job runs.  Important  These parameters accept only Latin characters (ASCII character set). Using non-ASCII characters returns an error. Examples of invalid, non-ASCII characters are Chinese, Japanese kanjis, and emojis, e.g. <pre><code>[\"--class\", \"org.apache.spark.examples.SparkPi\"]\n</code></pre></p> <code>None</code> <code>python_named_params</code> <code>Optional[Dict]</code> <p>A map from keys to values for jobs with Python wheel task, for example <code>'python_named_params': {'name': 'task', 'data': 'dbfs:/path/to/data.json'}</code>, e.g. <pre><code>{\"name\": \"task\", \"data\": \"dbfs:/path/to/data.json\"}\n</code></pre></p> <code>None</code> <code>pipeline_params</code> <code>Optional[str]</code> <code>None</code> <code>sql_params</code> <code>Optional[Dict]</code> <p>A map from keys to values for SQL tasks, for example <code>'sql_params': {'name': 'john doe', 'age': '35'}</code>. The SQL alert task does not support custom parameters, e.g. <pre><code>{\"name\": \"john doe\", \"age\": \"35\"}\n</code></pre></p> <code>None</code> <code>dbt_commands</code> <code>Optional[List]</code> <p>An array of commands to execute for jobs with the dbt task, for example <code>'dbt_commands': ['dbt deps', 'dbt seed', 'dbt run']</code>, e.g. <pre><code>[\"dbt deps\", \"dbt seed\", \"dbt run\"]\n</code></pre></p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Upon success, a dict of the response. - <code>repair_id: int</code></p> API Endpoint: <p><code>/2.1/jobs/runs/repair</code></p> API Responses: Response Description 200 Run repair was initiated. 400 The request was malformed. See JSON response for error details. 401 The request was unauthorized. 500 The request was not handled correctly due to a server error. Source code in <code>prefect_databricks/jobs.py</code> <pre><code>@task\nasync def jobs_runs_repair(\n    databricks_credentials: \"DatabricksCredentials\",\n    run_id: Optional[int] = None,\n    rerun_tasks: Optional[List[str]] = None,\n    latest_repair_id: Optional[int] = None,\n    rerun_all_failed_tasks: bool = False,\n    jar_params: Optional[List[str]] = None,\n    notebook_params: Optional[Dict] = None,\n    python_params: Optional[List[str]] = None,\n    spark_submit_params: Optional[List[str]] = None,\n    python_named_params: Optional[Dict] = None,\n    pipeline_params: Optional[str] = None,\n    sql_params: Optional[Dict] = None,\n    dbt_commands: Optional[List] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Re-run one or more tasks. Tasks are re-run as part of the original job run, use\n    the current job and task settings, and can be viewed in the history for the\n    original job run.\n\n    Args:\n        databricks_credentials:\n            Credentials to use for authentication with Databricks.\n        run_id:\n            The job run ID of the run to repair. The run must not be in progress,\n            e.g. `455644833`.\n        rerun_tasks:\n            The task keys of the task runs to repair, e.g.\n            ```\n            [\"task0\", \"task1\"]\n            ```\n        latest_repair_id:\n            The ID of the latest repair. This parameter is not required when\n            repairing a run for the first time, but must be provided on\n            subsequent requests to repair the same run, e.g.\n            `734650698524280`.\n        rerun_all_failed_tasks:\n            If true, repair all failed tasks. Only one of rerun_tasks or\n            rerun_all_failed_tasks can be used.\n        jar_params:\n            A list of parameters for jobs with Spark JAR tasks, for example\n            `'jar_params': ['john doe', '35']`. The parameters are used\n            to invoke the main function of the main class specified in\n            the Spark JAR task. If not specified upon `run-now`, it\n            defaults to an empty list. jar_params cannot be specified in\n            conjunction with notebook_params. The JSON representation of\n            this field (for example `{'jar_params':['john doe','35']}`)\n            cannot exceed 10,000 bytes.  Use [Task parameter\n            variables](https://docs.databricks.com/jobs.html\n            parameter-variables) to set parameters containing\n            information about job runs, e.g.\n            ```\n            [\"john\", \"doe\", \"35\"]\n            ```\n        notebook_params:\n            A map from keys to values for jobs with notebook task, for example\n            `'notebook_params': {'name': 'john doe', 'age': '35'}`. The\n            map is passed to the notebook and is accessible through the\n            [dbutils.widgets.get](https://docs.databricks.com/dev-\n            tools/databricks-utils.html\n            dbutils-widgets) function.  If not specified upon `run-now`,\n            the triggered run uses the job\u2019s base parameters.\n            notebook_params cannot be specified in conjunction with\n            jar_params.  Use [Task parameter\n            variables](https://docs.databricks.com/jobs.html\n            parameter-variables) to set parameters containing\n            information about job runs.  The JSON representation of this\n            field (for example `{'notebook_params':{'name':'john\n            doe','age':'35'}}`) cannot exceed 10,000 bytes, e.g.\n            ```\n            {\"name\": \"john doe\", \"age\": \"35\"}\n            ```\n        python_params:\n            A list of parameters for jobs with Python tasks, for example\n            `'python_params': ['john doe', '35']`. The parameters are\n            passed to Python file as command-line parameters. If\n            specified upon `run-now`, it would overwrite the parameters\n            specified in job setting. The JSON representation of this\n            field (for example `{'python_params':['john doe','35']}`)\n            cannot exceed 10,000 bytes.  Use [Task parameter\n            variables](https://docs.databricks.com/jobs.html\n            parameter-variables) to set parameters containing\n            information about job runs.  Important  These parameters\n            accept only Latin characters (ASCII character set). Using\n            non-ASCII characters returns an error. Examples of invalid,\n            non-ASCII characters are Chinese, Japanese kanjis, and\n            emojis, e.g.\n            ```\n            [\"john doe\", \"35\"]\n            ```\n        spark_submit_params:\n            A list of parameters for jobs with spark submit task, for example\n            `'spark_submit_params': ['--class',\n            'org.apache.spark.examples.SparkPi']`. The parameters are\n            passed to spark-submit script as command-line parameters. If\n            specified upon `run-now`, it would overwrite the parameters\n            specified in job setting. The JSON representation of this\n            field (for example `{'python_params':['john doe','35']}`)\n            cannot exceed 10,000 bytes.  Use [Task parameter\n            variables](https://docs.databricks.com/jobs.html\n            parameter-variables) to set parameters containing\n            information about job runs.  Important  These parameters\n            accept only Latin characters (ASCII character set). Using\n            non-ASCII characters returns an error. Examples of invalid,\n            non-ASCII characters are Chinese, Japanese kanjis, and\n            emojis, e.g.\n            ```\n            [\"--class\", \"org.apache.spark.examples.SparkPi\"]\n            ```\n        python_named_params:\n            A map from keys to values for jobs with Python wheel task, for example\n            `'python_named_params': {'name': 'task', 'data':\n            'dbfs:/path/to/data.json'}`, e.g.\n            ```\n            {\"name\": \"task\", \"data\": \"dbfs:/path/to/data.json\"}\n            ```\n        pipeline_params:\n\n        sql_params:\n            A map from keys to values for SQL tasks, for example `'sql_params':\n            {'name': 'john doe', 'age': '35'}`. The SQL alert task does\n            not support custom parameters, e.g.\n            ```\n            {\"name\": \"john doe\", \"age\": \"35\"}\n            ```\n        dbt_commands:\n            An array of commands to execute for jobs with the dbt task, for example\n            `'dbt_commands': ['dbt deps', 'dbt seed', 'dbt run']`, e.g.\n            ```\n            [\"dbt deps\", \"dbt seed\", \"dbt run\"]\n            ```\n\n    Returns:\n        Upon success, a dict of the response. &lt;/br&gt;- `repair_id: int`&lt;/br&gt;\n\n    &lt;h4&gt;API Endpoint:&lt;/h4&gt;\n    `/2.1/jobs/runs/repair`\n\n    &lt;h4&gt;API Responses:&lt;/h4&gt;\n    | Response | Description |\n    | --- | --- |\n    | 200 | Run repair was initiated. |\n    | 400 | The request was malformed. See JSON response for error details. |\n    | 401 | The request was unauthorized. |\n    | 500 | The request was not handled correctly due to a server error. |\n    \"\"\"  # noqa\n    endpoint = \"/2.1/jobs/runs/repair\"  # noqa\n\n    responses = {\n        200: \"Run repair was initiated.\",  # noqa\n        400: \"The request was malformed. See JSON response for error details.\",  # noqa\n        401: \"The request was unauthorized.\",  # noqa\n        500: \"The request was not handled correctly due to a server error.\",  # noqa\n    }\n\n    json_payload = {\n        \"run_id\": run_id,\n        \"rerun_tasks\": rerun_tasks,\n        \"latest_repair_id\": latest_repair_id,\n        \"rerun_all_failed_tasks\": rerun_all_failed_tasks,\n        \"jar_params\": jar_params,\n        \"notebook_params\": notebook_params,\n        \"python_params\": python_params,\n        \"spark_submit_params\": spark_submit_params,\n        \"python_named_params\": python_named_params,\n        \"pipeline_params\": pipeline_params,\n        \"sql_params\": sql_params,\n        \"dbt_commands\": dbt_commands,\n    }\n\n    response = await execute_endpoint.fn(\n        endpoint,\n        databricks_credentials,\n        http_method=HTTPMethod.POST,\n        json=json_payload,\n    )\n\n    contents = _unpack_contents(response, responses)\n    return contents\n</code></pre>"},{"location":"jobs/#prefect_databricks.jobs.jobs_runs_submit","title":"<code>jobs_runs_submit</code>  <code>async</code>","text":"<p>Submit a one-time run. This endpoint allows you to submit a workload directly without creating a job. Use the <code>jobs/runs/get</code> API to check the run state after the job is submitted.</p> <p>Parameters:</p> Name Type Description Default <code>databricks_credentials</code> <code>DatabricksCredentials</code> <p>Credentials to use for authentication with Databricks.</p> required <code>tasks</code> <code>Optional[List[RunSubmitTaskSettings]]</code> <p>, e.g. <pre><code>[\n    {\n        \"task_key\": \"Sessionize\",\n        \"description\": \"Extracts session data from events\",\n        \"depends_on\": [],\n        \"existing_cluster_id\": \"0923-164208-meows279\",\n        \"spark_jar_task\": {\n            \"main_class_name\": \"com.databricks.Sessionize\",\n            \"parameters\": [\"--data\", \"dbfs:/path/to/data.json\"],\n        },\n        \"libraries\": [{\"jar\": \"dbfs:/mnt/databricks/Sessionize.jar\"}],\n        \"timeout_seconds\": 86400,\n    },\n    {\n        \"task_key\": \"Orders_Ingest\",\n        \"description\": \"Ingests order data\",\n        \"depends_on\": [],\n        \"existing_cluster_id\": \"0923-164208-meows279\",\n        \"spark_jar_task\": {\n            \"main_class_name\": \"com.databricks.OrdersIngest\",\n            \"parameters\": [\"--data\", \"dbfs:/path/to/order-data.json\"],\n        },\n        \"libraries\": [{\"jar\": \"dbfs:/mnt/databricks/OrderIngest.jar\"}],\n        \"timeout_seconds\": 86400,\n    },\n    {\n        \"task_key\": \"Match\",\n        \"description\": \"Matches orders with user sessions\",\n        \"depends_on\": [\n            {\"task_key\": \"Orders_Ingest\"},\n            {\"task_key\": \"Sessionize\"},\n        ],\n        \"new_cluster\": {\n            \"spark_version\": \"7.3.x-scala2.12\",\n            \"node_type_id\": \"i3.xlarge\",\n            \"spark_conf\": {\"spark.speculation\": True},\n            \"aws_attributes\": {\n                \"availability\": \"SPOT\",\n                \"zone_id\": \"us-west-2a\",\n            },\n            \"autoscale\": {\"min_workers\": 2, \"max_workers\": 16},\n        },\n        \"notebook_task\": {\n            \"notebook_path\": \"/Users/user.name@databricks.com/Match\",\n            \"source\": \"WORKSPACE\",\n            \"base_parameters\": {\"name\": \"John Doe\", \"age\": \"35\"},\n        },\n        \"timeout_seconds\": 86400,\n    },\n]\n</code></pre></p> <code>None</code> <code>run_name</code> <code>Optional[str]</code> <p>An optional name for the run. The default value is <code>Untitled</code>, e.g. <code>A multitask job run</code>.</p> <code>None</code> <code>webhook_notifications</code> <code>WebhookNotifications</code> <p>A collection of system notification IDs to notify when runs of this job begin or complete. The default behavior is to not send any system notifications. Key-values: - on_start:     An optional list of notification IDs to call when the run     starts. A maximum of 3 destinations can be specified for the     <code>on_start</code> property, e.g.     <pre><code>[\n    {\"id\": \"03dd86e4-57ef-4818-a950-78e41a1d71ab\"},\n    {\"id\": \"0481e838-0a59-4eff-9541-a4ca6f149574\"},\n]\n</code></pre> - on_success:     An optional list of notification IDs to call when the run     completes successfully. A maximum of 3 destinations can be     specified for the <code>on_success</code> property, e.g.     <pre><code>[{\"id\": \"03dd86e4-57ef-4818-a950-78e41a1d71ab\"}]\n</code></pre> - on_failure:     An optional list of notification IDs to call when the run     fails. A maximum of 3 destinations can be specified for the     <code>on_failure</code> property, e.g.     <pre><code>[{\"id\": \"0481e838-0a59-4eff-9541-a4ca6f149574\"}]\n</code></pre></p> <code>None</code> <code>git_source</code> <code>GitSource</code> <p>This functionality is in Public Preview.  An optional specification for a remote repository containing the notebooks used by this job's notebook tasks, e.g. <code>{     \"git_url\": \"https://github.com/databricks/databricks-cli\",     \"git_branch\": \"main\",     \"git_provider\": \"gitHub\", }</code> Key-values: - git_url:     URL of the repository to be cloned by this job. The maximum     length is 300 characters, e.g.     <code>https://github.com/databricks/databricks-cli</code>. - git_provider:     Unique identifier of the service used to host the Git     repository. The value is case insensitive, e.g. <code>github</code>. - git_branch:     Name of the branch to be checked out and used by this job.     This field cannot be specified in conjunction with git_tag     or git_commit. The maximum length is 255 characters, e.g.     <code>main</code>. - git_tag:     Name of the tag to be checked out and used by this job. This     field cannot be specified in conjunction with git_branch or     git_commit. The maximum length is 255 characters, e.g.     <code>release-1.0.0</code>. - git_commit:     Commit to be checked out and used by this job. This field     cannot be specified in conjunction with git_branch or     git_tag. The maximum length is 64 characters, e.g.     <code>e0056d01</code>. - git_snapshot:     Read-only state of the remote repository at the time the job was run.                 This field is only included on job runs.</p> <code>None</code> <code>timeout_seconds</code> <code>Optional[int]</code> <p>An optional timeout applied to each run of this job. The default behavior is to have no timeout, e.g. <code>86400</code>.</p> <code>None</code> <code>idempotency_token</code> <code>Optional[str]</code> <p>An optional token that can be used to guarantee the idempotency of job run requests. If a run with the provided token already exists, the request does not create a new run but returns the ID of the existing run instead. If a run with the provided token is deleted, an error is returned.  If you specify the idempotency token, upon failure you can retry until the request succeeds. Databricks guarantees that exactly one run is launched with that idempotency token. This token must have at most 64 characters.  For more information, see How to ensure idempotency for jobs, e.g. <code>8f018174-4792-40d5-bcbc-3e6a527352c8</code>.</p> <code>None</code> <code>access_control_list</code> <code>Optional[List[AccessControlRequest]]</code> <p>List of permissions to set on the job.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Upon success, a dict of the response. - <code>run_id: int</code></p> API Endpoint: <p><code>/2.1/jobs/runs/submit</code></p> API Responses: Response Description 200 Run was created and started successfully. 400 The request was malformed. See JSON response for error details. 401 The request was unauthorized. 500 The request was not handled correctly due to a server error. Source code in <code>prefect_databricks/jobs.py</code> <pre><code>@task\nasync def jobs_runs_submit(\n    databricks_credentials: \"DatabricksCredentials\",\n    tasks: Optional[List[\"models.RunSubmitTaskSettings\"]] = None,\n    run_name: Optional[str] = None,\n    webhook_notifications: \"models.WebhookNotifications\" = None,\n    git_source: \"models.GitSource\" = None,\n    timeout_seconds: Optional[int] = None,\n    idempotency_token: Optional[str] = None,\n    access_control_list: Optional[List[\"models.AccessControlRequest\"]] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Submit a one-time run. This endpoint allows you to submit a workload directly\n    without creating a job. Use the `jobs/runs/get` API to check the run state\n    after the job is submitted.\n\n    Args:\n        databricks_credentials:\n            Credentials to use for authentication with Databricks.\n        tasks:\n            , e.g.\n            ```\n            [\n                {\n                    \"task_key\": \"Sessionize\",\n                    \"description\": \"Extracts session data from events\",\n                    \"depends_on\": [],\n                    \"existing_cluster_id\": \"0923-164208-meows279\",\n                    \"spark_jar_task\": {\n                        \"main_class_name\": \"com.databricks.Sessionize\",\n                        \"parameters\": [\"--data\", \"dbfs:/path/to/data.json\"],\n                    },\n                    \"libraries\": [{\"jar\": \"dbfs:/mnt/databricks/Sessionize.jar\"}],\n                    \"timeout_seconds\": 86400,\n                },\n                {\n                    \"task_key\": \"Orders_Ingest\",\n                    \"description\": \"Ingests order data\",\n                    \"depends_on\": [],\n                    \"existing_cluster_id\": \"0923-164208-meows279\",\n                    \"spark_jar_task\": {\n                        \"main_class_name\": \"com.databricks.OrdersIngest\",\n                        \"parameters\": [\"--data\", \"dbfs:/path/to/order-data.json\"],\n                    },\n                    \"libraries\": [{\"jar\": \"dbfs:/mnt/databricks/OrderIngest.jar\"}],\n                    \"timeout_seconds\": 86400,\n                },\n                {\n                    \"task_key\": \"Match\",\n                    \"description\": \"Matches orders with user sessions\",\n                    \"depends_on\": [\n                        {\"task_key\": \"Orders_Ingest\"},\n                        {\"task_key\": \"Sessionize\"},\n                    ],\n                    \"new_cluster\": {\n                        \"spark_version\": \"7.3.x-scala2.12\",\n                        \"node_type_id\": \"i3.xlarge\",\n                        \"spark_conf\": {\"spark.speculation\": True},\n                        \"aws_attributes\": {\n                            \"availability\": \"SPOT\",\n                            \"zone_id\": \"us-west-2a\",\n                        },\n                        \"autoscale\": {\"min_workers\": 2, \"max_workers\": 16},\n                    },\n                    \"notebook_task\": {\n                        \"notebook_path\": \"/Users/user.name@databricks.com/Match\",\n                        \"source\": \"WORKSPACE\",\n                        \"base_parameters\": {\"name\": \"John Doe\", \"age\": \"35\"},\n                    },\n                    \"timeout_seconds\": 86400,\n                },\n            ]\n            ```\n        run_name:\n            An optional name for the run. The default value is `Untitled`, e.g. `A\n            multitask job run`.\n        webhook_notifications:\n            A collection of system notification IDs to notify when runs of this job\n            begin or complete. The default behavior is to not send any\n            system notifications. Key-values:\n            - on_start:\n                An optional list of notification IDs to call when the run\n                starts. A maximum of 3 destinations can be specified for the\n                `on_start` property, e.g.\n                ```\n                [\n                    {\"id\": \"03dd86e4-57ef-4818-a950-78e41a1d71ab\"},\n                    {\"id\": \"0481e838-0a59-4eff-9541-a4ca6f149574\"},\n                ]\n                ```\n            - on_success:\n                An optional list of notification IDs to call when the run\n                completes successfully. A maximum of 3 destinations can be\n                specified for the `on_success` property, e.g.\n                ```\n                [{\"id\": \"03dd86e4-57ef-4818-a950-78e41a1d71ab\"}]\n                ```\n            - on_failure:\n                An optional list of notification IDs to call when the run\n                fails. A maximum of 3 destinations can be specified for the\n                `on_failure` property, e.g.\n                ```\n                [{\"id\": \"0481e838-0a59-4eff-9541-a4ca6f149574\"}]\n                ```\n        git_source:\n            This functionality is in Public Preview.  An optional specification for\n            a remote repository containing the notebooks used by this\n            job's notebook tasks, e.g.\n            ```\n            {\n                \"git_url\": \"https://github.com/databricks/databricks-cli\",\n                \"git_branch\": \"main\",\n                \"git_provider\": \"gitHub\",\n            }\n            ``` Key-values:\n            - git_url:\n                URL of the repository to be cloned by this job. The maximum\n                length is 300 characters, e.g.\n                `https://github.com/databricks/databricks-cli`.\n            - git_provider:\n                Unique identifier of the service used to host the Git\n                repository. The value is case insensitive, e.g. `github`.\n            - git_branch:\n                Name of the branch to be checked out and used by this job.\n                This field cannot be specified in conjunction with git_tag\n                or git_commit. The maximum length is 255 characters, e.g.\n                `main`.\n            - git_tag:\n                Name of the tag to be checked out and used by this job. This\n                field cannot be specified in conjunction with git_branch or\n                git_commit. The maximum length is 255 characters, e.g.\n                `release-1.0.0`.\n            - git_commit:\n                Commit to be checked out and used by this job. This field\n                cannot be specified in conjunction with git_branch or\n                git_tag. The maximum length is 64 characters, e.g.\n                `e0056d01`.\n            - git_snapshot:\n                Read-only state of the remote repository at the time the job was run.\n                            This field is only included on job runs.\n        timeout_seconds:\n            An optional timeout applied to each run of this job. The default\n            behavior is to have no timeout, e.g. `86400`.\n        idempotency_token:\n            An optional token that can be used to guarantee the idempotency of job\n            run requests. If a run with the provided token already\n            exists, the request does not create a new run but returns\n            the ID of the existing run instead. If a run with the\n            provided token is deleted, an error is returned.  If you\n            specify the idempotency token, upon failure you can retry\n            until the request succeeds. Databricks guarantees that\n            exactly one run is launched with that idempotency token.\n            This token must have at most 64 characters.  For more\n            information, see [How to ensure idempotency for\n            jobs](https://kb.databricks.com/jobs/jobs-idempotency.html),\n            e.g. `8f018174-4792-40d5-bcbc-3e6a527352c8`.\n        access_control_list:\n            List of permissions to set on the job.\n\n    Returns:\n        Upon success, a dict of the response. &lt;/br&gt;- `run_id: int`&lt;/br&gt;\n\n    &lt;h4&gt;API Endpoint:&lt;/h4&gt;\n    `/2.1/jobs/runs/submit`\n\n    &lt;h4&gt;API Responses:&lt;/h4&gt;\n    | Response | Description |\n    | --- | --- |\n    | 200 | Run was created and started successfully. |\n    | 400 | The request was malformed. See JSON response for error details. |\n    | 401 | The request was unauthorized. |\n    | 500 | The request was not handled correctly due to a server error. |\n    \"\"\"  # noqa\n    endpoint = \"/2.1/jobs/runs/submit\"  # noqa\n\n    responses = {\n        200: \"Run was created and started successfully.\",  # noqa\n        400: \"The request was malformed. See JSON response for error details.\",  # noqa\n        401: \"The request was unauthorized.\",  # noqa\n        500: \"The request was not handled correctly due to a server error.\",  # noqa\n    }\n\n    json_payload = {\n        \"tasks\": tasks,\n        \"run_name\": run_name,\n        \"webhook_notifications\": webhook_notifications,\n        \"git_source\": git_source,\n        \"timeout_seconds\": timeout_seconds,\n        \"idempotency_token\": idempotency_token,\n        \"access_control_list\": access_control_list,\n    }\n\n    response = await execute_endpoint.fn(\n        endpoint,\n        databricks_credentials,\n        http_method=HTTPMethod.POST,\n        json=json_payload,\n    )\n\n    contents = _unpack_contents(response, responses)\n    return contents\n</code></pre>"},{"location":"jobs/#prefect_databricks.jobs.jobs_update","title":"<code>jobs_update</code>  <code>async</code>","text":"<p>Add, update, or remove specific settings of an existing job. Use the Reset endpoint to overwrite all job settings.</p> <p>Parameters:</p> Name Type Description Default <code>databricks_credentials</code> <code>DatabricksCredentials</code> <p>Credentials to use for authentication with Databricks.</p> required <code>job_id</code> <code>Optional[int]</code> <p>The canonical identifier of the job to update. This field is required, e.g. <code>11223344</code>.</p> <code>None</code> <code>new_settings</code> <code>JobSettings</code> <p>The new settings for the job. Any top-level fields specified in <code>new_settings</code> are completely replaced. Partially updating nested fields is not supported.  Changes to the field <code>JobSettings.timeout_seconds</code> are applied to active runs. Changes to other fields are applied to future runs only. Key-values: - name:     An optional name for the job, e.g. <code>A multitask job</code>. - tags:     A map of tags associated with the job. These are forwarded     to the cluster as cluster tags for jobs clusters, and are     subject to the same limitations as cluster tags. A maximum     of 25 tags can be added to the job, e.g.     <pre><code>{\"cost-center\": \"engineering\", \"team\": \"jobs\"}\n</code></pre> - tasks:     A list of task specifications to be executed by this job, e.g.     <pre><code>[\n    {\n        \"task_key\": \"Sessionize\",\n        \"description\": \"Extracts session data from events\",\n        \"depends_on\": [],\n        \"existing_cluster_id\": \"0923-164208-meows279\",\n        \"spark_jar_task\": {\n            \"main_class_name\": \"com.databricks.Sessionize\",\n            \"parameters\": [\n                \"--data\",\n                \"dbfs:/path/to/data.json\",\n            ],\n        },\n        \"libraries\": [\n            {\"jar\": \"dbfs:/mnt/databricks/Sessionize.jar\"}\n        ],\n        \"timeout_seconds\": 86400,\n        \"max_retries\": 3,\n        \"min_retry_interval_millis\": 2000,\n        \"retry_on_timeout\": False,\n    },\n    {\n        \"task_key\": \"Orders_Ingest\",\n        \"description\": \"Ingests order data\",\n        \"depends_on\": [],\n        \"job_cluster_key\": \"auto_scaling_cluster\",\n        \"spark_jar_task\": {\n            \"main_class_name\": \"com.databricks.OrdersIngest\",\n            \"parameters\": [\n                \"--data\",\n                \"dbfs:/path/to/order-data.json\",\n            ],\n        },\n        \"libraries\": [\n            {\"jar\": \"dbfs:/mnt/databricks/OrderIngest.jar\"}\n        ],\n        \"timeout_seconds\": 86400,\n        \"max_retries\": 3,\n        \"min_retry_interval_millis\": 2000,\n        \"retry_on_timeout\": False,\n    },\n    {\n        \"task_key\": \"Match\",\n        \"description\": \"Matches orders with user sessions\",\n        \"depends_on\": [\n            {\"task_key\": \"Orders_Ingest\"},\n            {\"task_key\": \"Sessionize\"},\n        ],\n        \"new_cluster\": {\n            \"spark_version\": \"7.3.x-scala2.12\",\n            \"node_type_id\": \"i3.xlarge\",\n            \"spark_conf\": {\"spark.speculation\": True},\n            \"aws_attributes\": {\n                \"availability\": \"SPOT\",\n                \"zone_id\": \"us-west-2a\",\n            },\n            \"autoscale\": {\n                \"min_workers\": 2,\n                \"max_workers\": 16,\n            },\n        },\n        \"notebook_task\": {\n            \"notebook_path\": \"/Users/user.name@databricks.com/Match\",\n            \"source\": \"WORKSPACE\",\n            \"base_parameters\": {\n                \"name\": \"John Doe\",\n                \"age\": \"35\",\n            },\n        },\n        \"timeout_seconds\": 86400,\n        \"max_retries\": 3,\n        \"min_retry_interval_millis\": 2000,\n        \"retry_on_timeout\": False,\n    },\n]\n</code></pre> - job_clusters:     A list of job cluster specifications that can be shared and     reused by tasks of this job. Libraries cannot be declared in     a shared job cluster. You must declare dependent libraries     in task settings, e.g.     <pre><code>[\n    {\n        \"job_cluster_key\": \"auto_scaling_cluster\",\n        \"new_cluster\": {\n            \"spark_version\": \"7.3.x-scala2.12\",\n            \"node_type_id\": \"i3.xlarge\",\n            \"spark_conf\": {\"spark.speculation\": True},\n            \"aws_attributes\": {\n                \"availability\": \"SPOT\",\n                \"zone_id\": \"us-west-2a\",\n            },\n            \"autoscale\": {\n                \"min_workers\": 2,\n                \"max_workers\": 16,\n            },\n        },\n    }\n]\n</code></pre> - email_notifications:     An optional set of email addresses that is notified when     runs of this job begin or complete as well as when this job     is deleted. The default behavior is to not send any emails. - webhook_notifications:     A collection of system notification IDs to notify when runs     of this job begin or complete. The default behavior is to     not send any system notifications. - timeout_seconds:     An optional timeout applied to each run of this job. The     default behavior is to have no timeout, e.g. <code>86400</code>. - schedule:     An optional periodic schedule for this job. The default     behavior is that the job only runs when triggered by     clicking \u201cRun Now\u201d in the Jobs UI or sending an API request     to <code>runNow</code>. - max_concurrent_runs:     An optional maximum allowed number of concurrent runs of the     job.  Set this value if you want to be able to execute     multiple runs of the same job concurrently. This is useful     for example if you trigger your job on a frequent schedule     and want to allow consecutive runs to overlap with each     other, or if you want to trigger multiple runs which differ     by their input parameters.  This setting affects only new     runs. For example, suppose the job\u2019s concurrency is 4 and     there are 4 concurrent active runs. Then setting the     concurrency to 3 won\u2019t kill any of the active runs. However,     from then on, new runs are skipped unless there are fewer     than 3 active runs.  This value cannot exceed 1000. Setting     this value to 0 causes all new runs to be skipped. The     default behavior is to allow only 1 concurrent run, e.g.     <code>10</code>. - git_source:     This functionality is in Public Preview.  An optional     specification for a remote repository containing the     notebooks used by this job's notebook tasks, e.g.     <pre><code>{\n    \"git_url\": \"https://github.com/databricks/databricks-cli\",\n    \"git_branch\": \"main\",\n    \"git_provider\": \"gitHub\",\n}\n</code></pre> - format:     Used to tell what is the format of the job. This field is     ignored in Create/Update/Reset calls. When using the Jobs     API 2.1 this value is always set to <code>'MULTI_TASK'</code>, e.g.     <code>MULTI_TASK</code>.</p> <code>None</code> <code>fields_to_remove</code> <code>Optional[List[str]]</code> <p>Remove top-level fields in the job settings. Removing nested fields is not supported. This field is optional, e.g. <pre><code>[\"libraries\", \"schedule\"]\n</code></pre></p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Upon success, an empty dict.</p> API Endpoint: <p><code>/2.1/jobs/update</code></p> API Responses: Response Description 200 Job was updated successfully. 400 The request was malformed. See JSON response for error details. 401 The request was unauthorized. 500 The request was not handled correctly due to a server error. Source code in <code>prefect_databricks/jobs.py</code> <pre><code>@task\nasync def jobs_update(\n    databricks_credentials: \"DatabricksCredentials\",\n    job_id: Optional[int] = None,\n    new_settings: \"models.JobSettings\" = None,\n    fields_to_remove: Optional[List[str]] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Add, update, or remove specific settings of an existing job. Use the Reset\n    endpoint to overwrite all job settings.\n\n    Args:\n        databricks_credentials:\n            Credentials to use for authentication with Databricks.\n        job_id:\n            The canonical identifier of the job to update. This field is required,\n            e.g. `11223344`.\n        new_settings:\n            The new settings for the job. Any top-level fields specified in\n            `new_settings` are completely replaced. Partially updating\n            nested fields is not supported.  Changes to the field\n            `JobSettings.timeout_seconds` are applied to active runs.\n            Changes to other fields are applied to future runs only. Key-values:\n            - name:\n                An optional name for the job, e.g. `A multitask job`.\n            - tags:\n                A map of tags associated with the job. These are forwarded\n                to the cluster as cluster tags for jobs clusters, and are\n                subject to the same limitations as cluster tags. A maximum\n                of 25 tags can be added to the job, e.g.\n                ```\n                {\"cost-center\": \"engineering\", \"team\": \"jobs\"}\n                ```\n            - tasks:\n                A list of task specifications to be executed by this job, e.g.\n                ```\n                [\n                    {\n                        \"task_key\": \"Sessionize\",\n                        \"description\": \"Extracts session data from events\",\n                        \"depends_on\": [],\n                        \"existing_cluster_id\": \"0923-164208-meows279\",\n                        \"spark_jar_task\": {\n                            \"main_class_name\": \"com.databricks.Sessionize\",\n                            \"parameters\": [\n                                \"--data\",\n                                \"dbfs:/path/to/data.json\",\n                            ],\n                        },\n                        \"libraries\": [\n                            {\"jar\": \"dbfs:/mnt/databricks/Sessionize.jar\"}\n                        ],\n                        \"timeout_seconds\": 86400,\n                        \"max_retries\": 3,\n                        \"min_retry_interval_millis\": 2000,\n                        \"retry_on_timeout\": False,\n                    },\n                    {\n                        \"task_key\": \"Orders_Ingest\",\n                        \"description\": \"Ingests order data\",\n                        \"depends_on\": [],\n                        \"job_cluster_key\": \"auto_scaling_cluster\",\n                        \"spark_jar_task\": {\n                            \"main_class_name\": \"com.databricks.OrdersIngest\",\n                            \"parameters\": [\n                                \"--data\",\n                                \"dbfs:/path/to/order-data.json\",\n                            ],\n                        },\n                        \"libraries\": [\n                            {\"jar\": \"dbfs:/mnt/databricks/OrderIngest.jar\"}\n                        ],\n                        \"timeout_seconds\": 86400,\n                        \"max_retries\": 3,\n                        \"min_retry_interval_millis\": 2000,\n                        \"retry_on_timeout\": False,\n                    },\n                    {\n                        \"task_key\": \"Match\",\n                        \"description\": \"Matches orders with user sessions\",\n                        \"depends_on\": [\n                            {\"task_key\": \"Orders_Ingest\"},\n                            {\"task_key\": \"Sessionize\"},\n                        ],\n                        \"new_cluster\": {\n                            \"spark_version\": \"7.3.x-scala2.12\",\n                            \"node_type_id\": \"i3.xlarge\",\n                            \"spark_conf\": {\"spark.speculation\": True},\n                            \"aws_attributes\": {\n                                \"availability\": \"SPOT\",\n                                \"zone_id\": \"us-west-2a\",\n                            },\n                            \"autoscale\": {\n                                \"min_workers\": 2,\n                                \"max_workers\": 16,\n                            },\n                        },\n                        \"notebook_task\": {\n                            \"notebook_path\": \"/Users/user.name@databricks.com/Match\",\n                            \"source\": \"WORKSPACE\",\n                            \"base_parameters\": {\n                                \"name\": \"John Doe\",\n                                \"age\": \"35\",\n                            },\n                        },\n                        \"timeout_seconds\": 86400,\n                        \"max_retries\": 3,\n                        \"min_retry_interval_millis\": 2000,\n                        \"retry_on_timeout\": False,\n                    },\n                ]\n                ```\n            - job_clusters:\n                A list of job cluster specifications that can be shared and\n                reused by tasks of this job. Libraries cannot be declared in\n                a shared job cluster. You must declare dependent libraries\n                in task settings, e.g.\n                ```\n                [\n                    {\n                        \"job_cluster_key\": \"auto_scaling_cluster\",\n                        \"new_cluster\": {\n                            \"spark_version\": \"7.3.x-scala2.12\",\n                            \"node_type_id\": \"i3.xlarge\",\n                            \"spark_conf\": {\"spark.speculation\": True},\n                            \"aws_attributes\": {\n                                \"availability\": \"SPOT\",\n                                \"zone_id\": \"us-west-2a\",\n                            },\n                            \"autoscale\": {\n                                \"min_workers\": 2,\n                                \"max_workers\": 16,\n                            },\n                        },\n                    }\n                ]\n                ```\n            - email_notifications:\n                An optional set of email addresses that is notified when\n                runs of this job begin or complete as well as when this job\n                is deleted. The default behavior is to not send any emails.\n            - webhook_notifications:\n                A collection of system notification IDs to notify when runs\n                of this job begin or complete. The default behavior is to\n                not send any system notifications.\n            - timeout_seconds:\n                An optional timeout applied to each run of this job. The\n                default behavior is to have no timeout, e.g. `86400`.\n            - schedule:\n                An optional periodic schedule for this job. The default\n                behavior is that the job only runs when triggered by\n                clicking \u201cRun Now\u201d in the Jobs UI or sending an API request\n                to `runNow`.\n            - max_concurrent_runs:\n                An optional maximum allowed number of concurrent runs of the\n                job.  Set this value if you want to be able to execute\n                multiple runs of the same job concurrently. This is useful\n                for example if you trigger your job on a frequent schedule\n                and want to allow consecutive runs to overlap with each\n                other, or if you want to trigger multiple runs which differ\n                by their input parameters.  This setting affects only new\n                runs. For example, suppose the job\u2019s concurrency is 4 and\n                there are 4 concurrent active runs. Then setting the\n                concurrency to 3 won\u2019t kill any of the active runs. However,\n                from then on, new runs are skipped unless there are fewer\n                than 3 active runs.  This value cannot exceed 1000\\. Setting\n                this value to 0 causes all new runs to be skipped. The\n                default behavior is to allow only 1 concurrent run, e.g.\n                `10`.\n            - git_source:\n                This functionality is in Public Preview.  An optional\n                specification for a remote repository containing the\n                notebooks used by this job's notebook tasks, e.g.\n                ```\n                {\n                    \"git_url\": \"https://github.com/databricks/databricks-cli\",\n                    \"git_branch\": \"main\",\n                    \"git_provider\": \"gitHub\",\n                }\n                ```\n            - format:\n                Used to tell what is the format of the job. This field is\n                ignored in Create/Update/Reset calls. When using the Jobs\n                API 2.1 this value is always set to `'MULTI_TASK'`, e.g.\n                `MULTI_TASK`.\n        fields_to_remove:\n            Remove top-level fields in the job settings. Removing nested fields is\n            not supported. This field is optional, e.g.\n            ```\n            [\"libraries\", \"schedule\"]\n            ```\n\n    Returns:\n        Upon success, an empty dict.\n\n    &lt;h4&gt;API Endpoint:&lt;/h4&gt;\n    `/2.1/jobs/update`\n\n    &lt;h4&gt;API Responses:&lt;/h4&gt;\n    | Response | Description |\n    | --- | --- |\n    | 200 | Job was updated successfully. |\n    | 400 | The request was malformed. See JSON response for error details. |\n    | 401 | The request was unauthorized. |\n    | 500 | The request was not handled correctly due to a server error. |\n    \"\"\"  # noqa\n    endpoint = \"/2.1/jobs/update\"  # noqa\n\n    responses = {\n        200: \"Job was updated successfully.\",  # noqa\n        400: \"The request was malformed. See JSON response for error details.\",  # noqa\n        401: \"The request was unauthorized.\",  # noqa\n        500: \"The request was not handled correctly due to a server error.\",  # noqa\n    }\n\n    json_payload = {\n        \"job_id\": job_id,\n        \"new_settings\": new_settings,\n        \"fields_to_remove\": fields_to_remove,\n    }\n\n    response = await execute_endpoint.fn(\n        endpoint,\n        databricks_credentials,\n        http_method=HTTPMethod.POST,\n        json=json_payload,\n    )\n\n    contents = _unpack_contents(response, responses)\n    return contents\n</code></pre>"},{"location":"rest/","title":"Rest","text":""},{"location":"rest/#prefect_databricks.rest","title":"<code>prefect_databricks.rest</code>","text":"<p>This is a module containing generic REST tasks.</p>"},{"location":"rest/#prefect_databricks.rest-classes","title":"Classes","text":""},{"location":"rest/#prefect_databricks.rest.HTTPMethod","title":"<code>HTTPMethod</code>","text":"<p>             Bases: <code>Enum</code></p> <p>Available HTTP request methods.</p> Source code in <code>prefect_databricks/rest.py</code> <pre><code>class HTTPMethod(Enum):\n    \"\"\"\n    Available HTTP request methods.\n    \"\"\"\n\n    GET = \"get\"\n    POST = \"post\"\n    PUT = \"put\"\n    DELETE = \"delete\"\n    PATCH = \"patch\"\n</code></pre>"},{"location":"rest/#prefect_databricks.rest-functions","title":"Functions","text":""},{"location":"rest/#prefect_databricks.rest.execute_endpoint","title":"<code>execute_endpoint</code>  <code>async</code>","text":"<p>Generic function for executing REST endpoints.</p> <p>Parameters:</p> Name Type Description Default <code>endpoint</code> <code>str</code> <p>The endpoint route.</p> required <code>databricks_credentials</code> <code>DatabricksCredentials</code> <p>Credentials to use for authentication with Databricks.</p> required <code>http_method</code> <code>HTTPMethod</code> <p>Either GET, POST, PUT, DELETE, or PATCH.</p> <code>GET</code> <code>params</code> <code>Dict[str, Any]</code> <p>URL query parameters in the request.</p> <code>None</code> <code>json</code> <code>Dict[str, Any]</code> <p>JSON serializable object to include in the body of the request.</p> <code>None</code> <code>**kwargs</code> <code>Dict[str, Any]</code> <p>Additional keyword arguments to pass.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Response</code> <p>The httpx.Response from interacting with the endpoint.</p> <p>Examples:</p> <p>Lists jobs on the Databricks instance. <pre><code>from prefect import flow\nfrom prefect_databricks import DatabricksCredentials\nfrom prefect_databricks.rest import execute_endpoint\n@flow\ndef example_execute_endpoint_flow():\n    endpoint = \"/2.1/jobs/list\"\n    databricks_credentials = DatabricksCredentials.load(\"my-block\")\n    params = {\n        \"limit\": 5,\n        \"offset\": None,\n        \"expand_tasks\": True,\n    }\n    response = execute_endpoint(\n        endpoint,\n        databricks_credentials,\n        params=params\n    )\n    return response.json()\n</code></pre></p> Source code in <code>prefect_databricks/rest.py</code> <pre><code>@task\nasync def execute_endpoint(\n    endpoint: str,\n    databricks_credentials: \"DatabricksCredentials\",\n    http_method: HTTPMethod = HTTPMethod.GET,\n    params: Dict[str, Any] = None,\n    json: Dict[str, Any] = None,\n    **kwargs: Dict[str, Any],\n) -&gt; httpx.Response:\n    \"\"\"\n    Generic function for executing REST endpoints.\n\n    Args:\n        endpoint: The endpoint route.\n        databricks_credentials: Credentials to use for authentication with Databricks.\n        http_method: Either GET, POST, PUT, DELETE, or PATCH.\n        params: URL query parameters in the request.\n        json: JSON serializable object to include in the body of the request.\n        **kwargs: Additional keyword arguments to pass.\n\n    Returns:\n        The httpx.Response from interacting with the endpoint.\n\n    Examples:\n        Lists jobs on the Databricks instance.\n        ```python\n        from prefect import flow\n        from prefect_databricks import DatabricksCredentials\n        from prefect_databricks.rest import execute_endpoint\n        @flow\n        def example_execute_endpoint_flow():\n            endpoint = \"/2.1/jobs/list\"\n            databricks_credentials = DatabricksCredentials.load(\"my-block\")\n            params = {\n                \"limit\": 5,\n                \"offset\": None,\n                \"expand_tasks\": True,\n            }\n            response = execute_endpoint(\n                endpoint,\n                databricks_credentials,\n                params=params\n            )\n            return response.json()\n        ```\n    \"\"\"\n    if isinstance(http_method, HTTPMethod):\n        http_method = http_method.value\n\n    if params is not None:\n        stripped_params = strip_kwargs(**params)\n    else:\n        stripped_params = None\n\n    if json is not None:\n        kwargs[\"json\"] = strip_kwargs(**json)\n\n    async with databricks_credentials.get_client() as client:\n        response = await getattr(client, http_method)(\n            endpoint, params=stripped_params, **kwargs\n        )\n\n    return response\n</code></pre>"},{"location":"rest/#prefect_databricks.rest.serialize_model","title":"<code>serialize_model</code>","text":"<p>Recursively serializes <code>pydantic.BaseModel</code> into JSON; returns original obj if not a <code>BaseModel</code>.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>Any</code> <p>Input object to serialize.</p> required <p>Returns:</p> Type Description <code>Any</code> <p>Serialized version of object.</p> Source code in <code>prefect_databricks/rest.py</code> <pre><code>def serialize_model(obj: Any) -&gt; Any:\n    \"\"\"\n    Recursively serializes `pydantic.BaseModel` into JSON;\n    returns original obj if not a `BaseModel`.\n\n    Args:\n        obj: Input object to serialize.\n\n    Returns:\n        Serialized version of object.\n    \"\"\"\n    if isinstance(obj, list):\n        return [serialize_model(o) for o in obj]\n    elif isinstance(obj, Dict):\n        return {k: serialize_model(v) for k, v in obj.items()}\n\n    if isinstance(obj, BaseModel):\n        return {k: serialize_model(v) for k, v in obj.dict().items()}\n    elif isinstance(obj, Enum):\n        return obj.value\n    return obj\n</code></pre>"},{"location":"rest/#prefect_databricks.rest.strip_kwargs","title":"<code>strip_kwargs</code>","text":"<p>Recursively drops keyword arguments if value is None, and serializes any <code>pydantic.BaseModel</code> types.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Dict</code> <p>Input keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict</code> <p>Stripped version of kwargs.</p> Source code in <code>prefect_databricks/rest.py</code> <pre><code>def strip_kwargs(**kwargs: Dict) -&gt; Dict:\n    \"\"\"\n    Recursively drops keyword arguments if value is None,\n    and serializes any `pydantic.BaseModel` types.\n\n    Args:\n        **kwargs: Input keyword arguments.\n\n    Returns:\n        Stripped version of kwargs.\n    \"\"\"\n    stripped_dict = {}\n    for k, v in kwargs.items():\n        v = serialize_model(v)\n        if isinstance(v, dict):\n            v = strip_kwargs(**v)\n        if v is not None:\n            stripped_dict[k] = v\n    return stripped_dict or {}\n</code></pre>"},{"location":"models/jobs/","title":"Jobs","text":""},{"location":"models/jobs/#prefect_databricks.models.jobs","title":"<code>prefect_databricks.models.jobs</code>","text":""},{"location":"models/jobs/#prefect_databricks.models.jobs-classes","title":"Classes","text":""},{"location":"models/jobs/#prefect_databricks.models.jobs.AccessControlList","title":"<code>AccessControlList</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class AccessControlList(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    access_control_list: Optional[List[AccessControlRequest]] = Field(\n        None, description=\"List of permissions to set on the job.\"\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.AccessControlRequest","title":"<code>AccessControlRequest</code>","text":"<p>             Bases: <code>AccessControlRequestForUser</code>, <code>AccessControlRequestForGroup</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class AccessControlRequest(AccessControlRequestForUser, AccessControlRequestForGroup):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.AccessControlRequestForGroup","title":"<code>AccessControlRequestForGroup</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class AccessControlRequestForGroup(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    group_name: Optional[GroupName] = None\n    permission_level: Optional[PermissionLevelForGroup] = None\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.AccessControlRequestForServicePrincipal","title":"<code>AccessControlRequestForServicePrincipal</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class AccessControlRequestForServicePrincipal(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    permission_level: Optional[PermissionLevel] = None\n    service_principal_name: Optional[ServicePrincipalName] = None\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.AccessControlRequestForUser","title":"<code>AccessControlRequestForUser</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class AccessControlRequestForUser(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    permission_level: Optional[PermissionLevel] = None\n    user_name: Optional[UserName] = None\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.AutoScale","title":"<code>AutoScale</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class AutoScale(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    max_workers: Optional[int] = Field(\n        None,\n        description=(\n            \"The maximum number of workers to which the cluster can scale up when\"\n            \" overloaded. max_workers must be strictly greater than min_workers.\"\n        ),\n    )\n    min_workers: Optional[int] = Field(\n        None,\n        description=(\n            \"The minimum number of workers to which the cluster can scale down when\"\n            \" underutilized. It is also the initial number of workers the cluster has\"\n            \" after creation.\"\n        ),\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.AwsAttributes","title":"<code>AwsAttributes</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class AwsAttributes(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    availability: Optional[Literal[\"SPOT\", \"ON_DEMAND\", \"SPOT_WITH_FALLBACK\"]] = Field(\n        None,\n        description=(\n            \"Availability type used for all subsequent nodes past the `first_on_demand`\"\n            \" ones. **Note:** If `first_on_demand` is zero, this availability type is\"\n            \" used for the entire cluster.\\n\\n`SPOT`: use spot instances.\\n`ON_DEMAND`:\"\n            \" use on-demand instances.\\n`SPOT_WITH_FALLBACK`: preferably use spot\"\n            \" instances, but fall back to on-demand instances if spot instances cannot\"\n            \" be acquired (for example, if AWS spot prices are too high).\"\n        ),\n    )\n    ebs_volume_count: Optional[int] = Field(\n        None,\n        description=(\n            \"The number of volumes launched for each instance. You can choose up to 10\"\n            \" volumes. This feature is only enabled for supported node types. Legacy\"\n            \" node types cannot specify custom EBS volumes. For node types with no\"\n            \" instance store, at least one EBS volume needs to be specified; otherwise,\"\n            \" cluster creation fails.\\n\\nThese EBS volumes are mounted at `/ebs0`,\"\n            \" `/ebs1`, and etc. Instance store volumes are mounted at `/local_disk0`,\"\n            \" `/local_disk1`, and etc.\\n\\nIf EBS volumes are attached, Databricks\"\n            \" configures Spark to use only the EBS volumes for scratch storage because\"\n            \" heterogeneously sized scratch devices can lead to inefficient disk\"\n            \" utilization. If no EBS volumes are attached, Databricks configures Spark\"\n            \" to use instance store volumes.\\n\\nIf EBS volumes are specified, then the\"\n            \" Spark configuration `spark.local.dir` is overridden.\"\n        ),\n    )\n    ebs_volume_iops: Optional[int] = Field(\n        None,\n        description=(\n            \"The number of IOPS per EBS gp3 volume.\\n\\nThis value must be between 3000\"\n            \" and 16000.\\n\\nThe value of IOPS and throughput is calculated based on AWS\"\n            \" documentation to match the maximum performance of a gp2 volume with the\"\n            \" same volume size.\\n\\nFor more information, see the [EBS volume limit\"\n            \" calculator](https://github.com/awslabs/aws-support-tools/tree/master/EBS/VolumeLimitCalculator).\"\n        ),\n    )\n    ebs_volume_size: Optional[int] = Field(\n        None,\n        description=(\n            \"The size of each EBS volume (in GiB) launched for each instance. For\"\n            \" general purpose SSD, this value must be within the range 100 - 4096\\\\.\"\n            \" For throughput optimized HDD, this value must be within the range 500 -\"\n            \" 4096\\\\. Custom EBS volumes cannot be specified for the legacy node types\"\n            \" (_memory-optimized_ and _compute-optimized_).\"\n        ),\n    )\n    ebs_volume_throughput: Optional[int] = Field(\n        None,\n        description=(\n            \"The throughput per EBS gp3 volume, in MiB per second.\\n\\nThis value must\"\n            \" be between 125 and 1000.\"\n        ),\n    )\n    ebs_volume_type: Optional[\n        Literal[\"GENERAL_PURPOSE_SSD\", \"THROUGHPUT_OPTIMIZED_HDD\"]\n    ] = Field(\n        None,\n        description=(\n            \"The type of EBS volume that is launched with this\"\n            \" cluster.\\n\\n`GENERAL_PURPOSE_SSD`: provision extra storage using AWS gp2\"\n            \" EBS volumes.\\n`THROUGHPUT_OPTIMIZED_HDD`: provision extra storage using\"\n            \" AWS st1 volumes.\"\n        ),\n    )\n    first_on_demand: Optional[int] = Field(\n        None,\n        description=(\n            \"The first first_on_demand nodes of the cluster are placed on on-demand\"\n            \" instances. If this value is greater than 0, the cluster driver node is\"\n            \" placed on an on-demand instance. If this value is greater than or equal\"\n            \" to the current cluster size, all nodes are placed on on-demand instances.\"\n            \" If this value is less than the current cluster size, first_on_demand\"\n            \" nodes are placed on on-demand instances and the remainder are placed on\"\n            \" `availability` instances. This value does not affect cluster size and\"\n            \" cannot be mutated over the lifetime of a cluster.\"\n        ),\n    )\n    instance_profile_arn: Optional[str] = Field(\n        None,\n        description=(\n            \"Nodes for this cluster are only be placed on AWS instances with this\"\n            \" instance profile. If omitted, nodes are placed on instances without an\"\n            \" instance profile. The instance profile must have previously been added to\"\n            \" the Databricks environment by an account administrator.\\n\\nThis feature\"\n            \" may only be available to certain customer plans.\"\n        ),\n    )\n    spot_bid_price_percent: Optional[int] = Field(\n        None,\n        description=(\n            \"The max price for AWS spot instances, as a percentage of the corresponding\"\n            \" instance type\u2019s on-demand price. For example, if this field is set to 50,\"\n            \" and the cluster needs a new `i3.xlarge` spot instance, then the max price\"\n            \" is half of the price of on-demand `i3.xlarge` instances. Similarly, if\"\n            \" this field is set to 200, the max price is twice the price of on-demand\"\n            \" `i3.xlarge` instances. If not specified, the default value is 100\\\\. When\"\n            \" spot instances are requested for this cluster, only spot instances whose\"\n            \" max price percentage matches this field is considered. For safety, we\"\n            \" enforce this field to be no more than 10000.\"\n        ),\n    )\n    zone_id: Optional[str] = Field(\n        None,\n        description=(\n            \"Identifier for the availability zone/datacenter in which the cluster\"\n            \" resides. You have three options:\\n\\n**Specify an availability zone as a\"\n            \" string**, for example: \u201cus-west-2a\u201d. The provided availability zone must\"\n            \" be in the same region as the Databricks deployment. For example,\"\n            \" \u201cus-west-2a\u201d is not a valid zone ID if the Databricks deployment resides\"\n            \" in the \u201cus-east-1\u201d region.\\n\\n**Enable automatic availability zone\"\n            \" selection (\u201cAuto-AZ\u201d)**, by setting the value \u201cauto\u201d. Databricks selects\"\n            \" the AZ based on available IPs in the workspace subnets and retries in\"\n            \" other availability zones if AWS returns insufficient capacity\"\n            \" errors.\\n\\n**Do not specify a value**. If not specified, a default zone\"\n            \" is used.\\n\\nThe list of available zones as well as the default value can\"\n            \" be found by using the [List\"\n            \" zones](https://docs.databricks.com/dev-tools/api/latest/clusters.html#list-zones)\"\n            \" API.\"\n        ),\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.CanManage","title":"<code>CanManage</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>Permission to manage the job.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class CanManage(str, Enum):\n    \"\"\"\n    Permission to manage the job.\n    \"\"\"\n\n    canmanage = \"CAN_MANAGE\"\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.CanManageRun","title":"<code>CanManageRun</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>Permission to run and/or manage runs for the job.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class CanManageRun(str, Enum):\n    \"\"\"\n    Permission to run and/or manage runs for the job.\n    \"\"\"\n\n    canmanagerun = \"CAN_MANAGE_RUN\"\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.CanView","title":"<code>CanView</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>Permission to view the settings of the job.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class CanView(str, Enum):\n    \"\"\"\n    Permission to view the settings of the job.\n    \"\"\"\n\n    canview = \"CAN_VIEW\"\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.ClusterAttributes","title":"<code>ClusterAttributes</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class ClusterAttributes(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    autotermination_minutes: Optional[int] = Field(\n        None,\n        description=(\n            \"Automatically terminates the cluster after it is inactive for this time in\"\n            \" minutes. If not set, this cluster is not be automatically terminated. If\"\n            \" specified, the threshold must be between 10 and 10000 minutes. You can\"\n            \" also set this value to 0 to explicitly disable automatic termination.\"\n        ),\n    )\n    aws_attributes: Optional[AwsAttributes] = Field(\n        None,\n        description=(\n            \"Attributes related to clusters running on Amazon Web Services. If not\"\n            \" specified at cluster creation, a set of default values are used.\"\n        ),\n    )\n    cluster_log_conf: Optional[ClusterLogConf] = Field(\n        None,\n        description=(\n            \"The configuration for delivering Spark logs to a long-term storage\"\n            \" destination. Only one destination can be specified for one cluster. If\"\n            \" the conf is given, the logs is delivered to the destination every `5\"\n            \" mins`. The destination of driver logs is\"\n            \" `&lt;destination&gt;/&lt;cluster-ID&gt;/driver`, while the destination of executor\"\n            \" logs is `&lt;destination&gt;/&lt;cluster-ID&gt;/executor`.\"\n        ),\n    )\n    cluster_name: Optional[str] = Field(\n        None,\n        description=(\n            \"Cluster name requested by the user. This doesn\u2019t have to be unique. If not\"\n            \" specified at creation, the cluster name is an empty string.\"\n        ),\n    )\n    cluster_source: Optional[ClusterSource] = Field(\n        None,\n        description=(\n            \"Determines whether the cluster was created by a user through the UI,\"\n            \" created by the Databricks Jobs scheduler, or through an API request.\"\n        ),\n    )\n    custom_tags: Optional[ClusterTag] = Field(\n        None,\n        description=(\n            \"An object containing a set of tags for cluster resources. Databricks tags\"\n            \" all cluster resources (such as AWS instances and EBS volumes) with these\"\n            \" tags in addition to default_tags.\\n\\n**Note**:\\n\\n* Tags are not\"\n            \" supported on legacy node types such as compute-optimized and\"\n            \" memory-optimized\\n* Databricks allows at most 45 custom tags\"\n        ),\n    )\n    docker_image: Optional[DockerImage] = Field(\n        None,\n        description=(\n            \"Docker image for a [custom\"\n            \" container](https://docs.databricks.com/clusters/custom-containers.html).\"\n        ),\n    )\n    driver_node_type_id: Optional[str] = Field(\n        None,\n        description=(\n            \"The node type of the Spark driver. This field is optional; if unset, the\"\n            \" driver node type is set as the same value as `node_type_id` defined\"\n            \" above.\"\n        ),\n    )\n    enable_elastic_disk: Optional[bool] = Field(\n        None,\n        description=(\n            \"Autoscaling Local Storage: when enabled, this cluster dynamically acquires\"\n            \" additional disk space when its Spark workers are running low on disk\"\n            \" space. This feature requires specific AWS permissions to function\"\n            \" correctly. Refer to [Autoscaling local\"\n            \" storage](https://docs.databricks.com/clusters/configure.html#autoscaling-local-storage)\"\n            \" for details.\"\n        ),\n    )\n    enable_local_disk_encryption: Optional[bool] = Field(\n        None,\n        description=(\n            \"Determines whether encryption of the disks attached to the cluster locally\"\n            \" is enabled.\"\n        ),\n    )\n    init_scripts: Optional[List[InitScriptInfo]] = Field(\n        None,\n        description=(\n            \"The configuration for storing init scripts. Any number of destinations can\"\n            \" be specified. The scripts are executed sequentially in the order\"\n            \" provided. If `cluster_log_conf` is specified, init script logs are sent\"\n            \" to `&lt;destination&gt;/&lt;cluster-ID&gt;/init_scripts`.\"\n        ),\n    )\n    instance_pool_id: Optional[str] = Field(\n        None,\n        description=(\n            \"The optional ID of the instance pool to which the cluster belongs. Refer\"\n            \" to [Pools](https://docs.databricks.com/clusters/instance-pools/index.html)\"\n            \" for details.\"\n        ),\n    )\n    node_type_id: Optional[str] = Field(\n        None,\n        description=(\n            \"This field encodes, through a single value, the resources available to\"\n            \" each of the Spark nodes in this cluster. For example, the Spark nodes can\"\n            \" be provisioned and optimized for memory or compute intensive workloads A\"\n            \" list of available node types can be retrieved by using the [List node\"\n            \" types](https://docs.databricks.com/dev-tools/api/latest/clusters.html#list-node-types)\"\n            \" API call.\"\n        ),\n    )\n    policy_id: Optional[str] = Field(\n        None,\n        description=(\n            \"A [cluster\"\n            \" policy](https://docs.databricks.com/dev-tools/api/latest/policies.html) ID.\"\n        ),\n    )\n    spark_conf: Optional[SparkConfPair] = Field(\n        None,\n        description=(\n            \"An object containing a set of optional, user-specified Spark configuration\"\n            \" key-value pairs. You can also pass in a string of extra JVM options to\"\n            \" the driver and the executors via `spark.driver.extraJavaOptions` and\"\n            \" `spark.executor.extraJavaOptions` respectively.\\n\\nExample Spark confs:\"\n            ' `{\"spark.speculation\": true, \"spark.streaming.ui.retainedBatches\": 5}` or'\n            ' `{\"spark.driver.extraJavaOptions\": \"-verbose:gc -XX:+PrintGCDetails\"}`'\n        ),\n    )\n    spark_env_vars: Optional[SparkEnvPair] = Field(\n        None,\n        description=(\n            \"An object containing a set of optional, user-specified environment\"\n            \" variable key-value pairs. Key-value pairs of the form (X,Y) are exported\"\n            \" as is (that is, `export X='Y'`) while launching the driver and\"\n            \" workers.\\n\\nIn order to specify an additional set of\"\n            \" `SPARK_DAEMON_JAVA_OPTS`, we recommend appending them to\"\n            \" `$SPARK_DAEMON_JAVA_OPTS` as shown in the following example. This ensures\"\n            \" that all default databricks managed environmental variables are included\"\n            ' as well.\\n\\nExample Spark environment variables: `{\"SPARK_WORKER_MEMORY\":'\n            ' \"28000m\", \"SPARK_LOCAL_DIRS\": \"/local_disk0\"}` or'\n            ' `{\"SPARK_DAEMON_JAVA_OPTS\": \"$SPARK_DAEMON_JAVA_OPTS'\n            ' -Dspark.shuffle.service.enabled=true\"}`'\n        ),\n    )\n    spark_version: Optional[str] = Field(\n        None,\n        description=(\n            \"The runtime version of the cluster, for example \u201c5.0.x-scala2.11\u201d. You can\"\n            \" retrieve a list of available runtime versions by using the [Runtime\"\n            \" versions](https://docs.databricks.com/dev-tools/api/latest/clusters.html#runtime-versions)\"\n            \" API call.\"\n        ),\n    )\n    ssh_public_keys: Optional[List[str]] = Field(\n        None,\n        description=(\n            \"SSH public key contents that is added to each Spark node in this cluster.\"\n            \" The corresponding private keys can be used to login with the user name\"\n            \" `ubuntu` on port `2200`. Up to 10 keys can be specified.\"\n        ),\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.ClusterCloudProviderNodeInfo","title":"<code>ClusterCloudProviderNodeInfo</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class ClusterCloudProviderNodeInfo(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    available_core_quota: Optional[int] = Field(\n        None, description=\"Available CPU core quota.\"\n    )\n    status: Optional[ClusterCloudProviderNodeStatus] = Field(\n        None, description=\"Status as reported by the cloud provider.\"\n    )\n    total_core_quota: Optional[int] = Field(None, description=\"Total CPU core quota.\")\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.ClusterCloudProviderNodeStatus","title":"<code>ClusterCloudProviderNodeStatus</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <pre><code>* NotEnabledOnSubscription: Node type not available for subscription.\n</code></pre> <ul> <li>NotAvailableInRegion: Node type not available in region.</li> </ul> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class ClusterCloudProviderNodeStatus(str, Enum):\n    \"\"\"\n        * NotEnabledOnSubscription: Node type not available for subscription.\n    * NotAvailableInRegion: Node type not available in region.\n\n    \"\"\"\n\n    not_enabled_on_subscription = \"NotEnabledOnSubscription\"\n    not_available_in_region = \"NotAvailableInRegion\"\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.ClusterEvent","title":"<code>ClusterEvent</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class ClusterEvent(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    cluster_id: str = Field(\n        ..., description=\"Canonical identifier for the cluster. This field is required.\"\n    )\n    details: EventDetails = Field(\n        ..., description=\"The event details. This field is required.\"\n    )\n    timestamp: Optional[int] = Field(\n        None,\n        description=(\n            \"The timestamp when the event occurred, stored as the number of\"\n            \" milliseconds since the unix epoch. Assigned by the Timeline service.\"\n        ),\n    )\n    type: ClusterEventType = Field(\n        ..., description=\"The event type. This field is required.\"\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.ClusterEventType","title":"<code>ClusterEventType</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <pre><code>* `CREATING`: Indicates that the cluster is being created.\n</code></pre> <ul> <li><code>DID_NOT_EXPAND_DISK</code>: Indicates that a disk is low on space, but adding disks would put it over the max capacity.</li> <li><code>EXPANDED_DISK</code>: Indicates that a disk was low on space and the disks were expanded.</li> <li><code>FAILED_TO_EXPAND_DISK</code>: Indicates that a disk was low on space and disk space could not be expanded.</li> <li><code>INIT_SCRIPTS_STARTING</code>: Indicates that the cluster scoped init script has started.</li> <li><code>INIT_SCRIPTS_FINISHED</code>: Indicates that the cluster scoped init script has finished.</li> <li><code>STARTING</code>: Indicates that the cluster is being started.</li> <li><code>RESTARTING</code>: Indicates that the cluster is being started.</li> <li><code>TERMINATING</code>: Indicates that the cluster is being terminated.</li> <li><code>EDITED</code>: Indicates that the cluster has been edited.</li> <li><code>RUNNING</code>: Indicates the cluster has finished being created. Includes the number of nodes in the cluster and a failure reason if some nodes could not be acquired.</li> <li><code>RESIZING</code>: Indicates a change in the target size of the cluster (upsize or downsize).</li> <li><code>UPSIZE_COMPLETED</code>: Indicates that nodes finished being added to the cluster. Includes the number of nodes in the cluster and a failure reason if some nodes could not be acquired.</li> <li><code>NODES_LOST</code>: Indicates that some nodes were lost from the cluster.</li> <li><code>DRIVER_HEALTHY</code>: Indicates that the driver is healthy and the cluster is ready for use.</li> <li><code>DRIVER_UNAVAILABLE</code>: Indicates that the driver is unavailable.</li> <li><code>SPARK_EXCEPTION</code>: Indicates that a Spark exception was thrown from the driver.</li> <li><code>DRIVER_NOT_RESPONDING</code>: Indicates that the driver is up but is not responsive, likely due to GC.</li> <li><code>DBFS_DOWN</code>: Indicates that the driver is up but DBFS is down.</li> <li><code>METASTORE_DOWN</code>: Indicates that the driver is up but the metastore is down.</li> <li><code>NODE_BLACKLISTED</code>: Indicates that a node is not allowed by Spark.</li> <li><code>PINNED</code>: Indicates that the cluster was pinned.</li> <li><code>UNPINNED</code>: Indicates that the cluster was unpinned.</li> </ul> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class ClusterEventType(str, Enum):\n    \"\"\"\n        * `CREATING`: Indicates that the cluster is being created.\n    * `DID_NOT_EXPAND_DISK`: Indicates that a disk is low on space, but adding disks would put it over the max capacity.\n    * `EXPANDED_DISK`: Indicates that a disk was low on space and the disks were expanded.\n    * `FAILED_TO_EXPAND_DISK`: Indicates that a disk was low on space and disk space could not be expanded.\n    * `INIT_SCRIPTS_STARTING`: Indicates that the cluster scoped init script has started.\n    * `INIT_SCRIPTS_FINISHED`: Indicates that the cluster scoped init script has finished.\n    * `STARTING`: Indicates that the cluster is being started.\n    * `RESTARTING`: Indicates that the cluster is being started.\n    * `TERMINATING`: Indicates that the cluster is being terminated.\n    * `EDITED`: Indicates that the cluster has been edited.\n    * `RUNNING`: Indicates the cluster has finished being created. Includes the number of nodes in the cluster and a failure reason if some nodes could not be acquired.\n    * `RESIZING`: Indicates a change in the target size of the cluster (upsize or downsize).\n    * `UPSIZE_COMPLETED`: Indicates that nodes finished being added to the cluster. Includes the number of nodes in the cluster and a failure reason if some nodes could not be acquired.\n    * `NODES_LOST`: Indicates that some nodes were lost from the cluster.\n    * `DRIVER_HEALTHY`: Indicates that the driver is healthy and the cluster is ready for use.\n    * `DRIVER_UNAVAILABLE`: Indicates that the driver is unavailable.\n    * `SPARK_EXCEPTION`: Indicates that a Spark exception was thrown from the driver.\n    * `DRIVER_NOT_RESPONDING`: Indicates that the driver is up but is not responsive, likely due to GC.\n    * `DBFS_DOWN`: Indicates that the driver is up but DBFS is down.\n    * `METASTORE_DOWN`: Indicates that the driver is up but the metastore is down.\n    * `NODE_BLACKLISTED`: Indicates that a node is not allowed by Spark.\n    * `PINNED`: Indicates that the cluster was pinned.\n    * `UNPINNED`: Indicates that the cluster was unpinned.\n    \"\"\"\n\n    creating = \"CREATING\"\n    didnotexpanddisk = \"DID_NOT_EXPAND_DISK\"\n    expandeddisk = \"EXPANDED_DISK\"\n    failedtoexpanddisk = \"FAILED_TO_EXPAND_DISK\"\n    initscriptsstarting = \"INIT_SCRIPTS_STARTING\"\n    initscriptsfinished = \"INIT_SCRIPTS_FINISHED\"\n    starting = \"STARTING\"\n    restarting = \"RESTARTING\"\n    terminating = \"TERMINATING\"\n    edited = \"EDITED\"\n    running = \"RUNNING\"\n    resizing = \"RESIZING\"\n    upsizecompleted = \"UPSIZE_COMPLETED\"\n    nodeslost = \"NODES_LOST\"\n    driverhealthy = \"DRIVER_HEALTHY\"\n    driverunavailable = \"DRIVER_UNAVAILABLE\"\n    sparkexception = \"SPARK_EXCEPTION\"\n    drivernotresponding = \"DRIVER_NOT_RESPONDING\"\n    dbfsdown = \"DBFS_DOWN\"\n    metastoredown = \"METASTORE_DOWN\"\n    nodeblacklisted = \"NODE_BLACKLISTED\"\n    pinned = \"PINNED\"\n    unpinned = \"UNPINNED\"\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.ClusterInfo","title":"<code>ClusterInfo</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class ClusterInfo(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    autoscale: Optional[AutoScale] = Field(\n        None,\n        description=(\n            \"If autoscale, parameters needed in order to automatically scale clusters\"\n            \" up and down based on load.\"\n        ),\n    )\n    autotermination_minutes: Optional[int] = Field(\n        None,\n        description=(\n            \"Automatically terminates the cluster after it is inactive for this time in\"\n            \" minutes. If not set, this cluster is not be automatically terminated. If\"\n            \" specified, the threshold must be between 10 and 10000 minutes. You can\"\n            \" also set this value to 0 to explicitly disable automatic termination.\"\n        ),\n    )\n    aws_attributes: Optional[AwsAttributes] = Field(\n        None,\n        description=(\n            \"Attributes related to clusters running on Amazon Web Services. If not\"\n            \" specified at cluster creation, a set of default values is used.\"\n        ),\n    )\n    cluster_cores: Optional[float] = Field(\n        None,\n        description=(\n            \"Number of CPU cores available for this cluster. This can be fractional\"\n            \" since certain node types are configured to share cores between Spark\"\n            \" nodes on the same instance.\"\n        ),\n    )\n    cluster_id: Optional[str] = Field(\n        None,\n        description=(\n            \"Canonical identifier for the cluster. This ID is retained during cluster\"\n            \" restarts and resizes, while each new cluster has a globally unique ID.\"\n        ),\n    )\n    cluster_log_conf: Optional[ClusterLogConf] = Field(\n        None,\n        description=(\n            \"The configuration for delivering Spark logs to a long-term storage\"\n            \" destination. Only one destination can be specified for one cluster. If\"\n            \" the conf is given, the logs are delivered to the destination every `5\"\n            \" mins`. The destination of driver logs is\"\n            \" `&lt;destination&gt;/&lt;cluster-ID&gt;/driver`, while the destination of executor\"\n            \" logs is `&lt;destination&gt;/&lt;cluster-ID&gt;/executor`.\"\n        ),\n    )\n    cluster_log_status: Optional[LogSyncStatus] = Field(\n        None, description=\"Cluster log delivery status.\"\n    )\n    cluster_memory_mb: Optional[int] = Field(\n        None, description=\"Total amount of cluster memory, in megabytes.\"\n    )\n    cluster_name: Optional[str] = Field(\n        None,\n        description=(\n            \"Cluster name requested by the user. This doesn\u2019t have to be unique. If not\"\n            \" specified at creation, the cluster name is an empty string.\"\n        ),\n    )\n    cluster_source: Optional[ClusterSource] = Field(\n        None,\n        description=(\n            \"Determines whether the cluster was created by a user through the UI, by\"\n            \" the Databricks Jobs scheduler, or through an API request.\"\n        ),\n    )\n    creator_user_name: Optional[str] = Field(\n        None,\n        description=(\n            \"Creator user name. The field won\u2019t be included in the response if the user\"\n            \" has already been deleted.\"\n        ),\n    )\n    custom_tags: Optional[List[ClusterTag]] = Field(\n        None,\n        description=(\n            \"An object containing a set of tags for cluster resources. Databricks tags\"\n            \" all cluster resources (such as AWS instances and EBS volumes) with these\"\n            \" tags in addition to default_tags.\\n\\n**Note**:\\n\\n* Tags are not\"\n            \" supported on legacy node types such as compute-optimized and\"\n            \" memory-optimized\\n* Databricks allows at most 45 custom tags\"\n        ),\n    )\n    default_tags: Optional[ClusterTag] = Field(\n        None,\n        description=(\n            \"An object containing a set of tags that are added by Databricks regardless\"\n            \" of any custom_tags, including:\\n\\n* Vendor: Databricks\\n* Creator:\"\n            \" &lt;username-of-creator&gt;\\n* ClusterName: &lt;name-of-cluster&gt;\\n* ClusterId:\"\n            \" &lt;id-of-cluster&gt;\\n* Name: &lt;Databricks internal use&gt;  \\nOn job clusters:\\n*\"\n            \" RunName: &lt;name-of-job&gt;\\n* JobId: &lt;id-of-job&gt;  \\nOn resources used by\"\n            \" Databricks SQL:\\n* SqlEndpointId: &lt;id-of-endpoint&gt;\"\n        ),\n    )\n    docker_image: Optional[DockerImage] = Field(\n        None,\n        description=(\n            \"Docker image for a [custom\"\n            \" container](https://docs.databricks.com/clusters/custom-containers.html).\"\n        ),\n    )\n    driver: Optional[SparkNode] = Field(\n        None,\n        description=(\n            \"Node on which the Spark driver resides. The driver node contains the Spark\"\n            \" master and the Databricks application that manages the per-notebook Spark\"\n            \" REPLs.\"\n        ),\n    )\n    driver_node_type_id: Optional[str] = Field(\n        None,\n        description=(\n            \"The node type of the Spark driver. This field is optional; if unset, the\"\n            \" driver node type is set as the same value as `node_type_id` defined\"\n            \" above.\"\n        ),\n    )\n    enable_elastic_disk: Optional[bool] = Field(\n        None,\n        description=(\n            \"Autoscaling Local Storage: when enabled, this cluster dynamically acquires\"\n            \" additional disk space when its Spark workers are running low on disk\"\n            \" space. This feature requires specific AWS permissions to function\"\n            \" correctly - refer to [Autoscaling local\"\n            \" storage](https://docs.databricks.com/clusters/configure.html#autoscaling-local-storage)\"\n            \" for details.\"\n        ),\n    )\n    executors: Optional[List[SparkNode]] = Field(\n        None, description=\"Nodes on which the Spark executors reside.\"\n    )\n    init_scripts: Optional[List[InitScriptInfo]] = Field(\n        None,\n        description=(\n            \"The configuration for storing init scripts. Any number of destinations can\"\n            \" be specified. The scripts are executed sequentially in the order\"\n            \" provided. If `cluster_log_conf` is specified, init script logs are sent\"\n            \" to `&lt;destination&gt;/&lt;cluster-ID&gt;/init_scripts`.\"\n        ),\n    )\n    instance_pool_id: Optional[str] = Field(\n        None,\n        description=(\n            \"The optional ID of the instance pool to which the cluster belongs. Refer\"\n            \" to [Pools](https://docs.databricks.com/clusters/instance-pools/index.html)\"\n            \" for details.\"\n        ),\n    )\n    jdbc_port: Optional[int] = Field(\n        None,\n        description=(\n            \"Port on which Spark JDBC server is listening in the driver node. No\"\n            \" service listens on this port in executor nodes.\"\n        ),\n    )\n    last_activity_time: Optional[int] = Field(\n        None,\n        description=(\n            \"Time (in epoch milliseconds) when the cluster was last active. A cluster\"\n            \" is active if there is at least one command that has not finished on the\"\n            \" cluster. This field is available after the cluster has reached a\"\n            \" `RUNNING` state. Updates to this field are made as best-effort attempts.\"\n            \" Certain versions of Spark do not support reporting of cluster activity.\"\n            \" Refer to [Automatic\"\n            \" termination](https://docs.databricks.com/clusters/clusters-manage.html#automatic-termination)\"\n            \" for details.\"\n        ),\n    )\n    last_state_loss_time: Optional[int] = Field(\n        None,\n        description=(\n            \"Time when the cluster driver last lost its state (due to a restart or\"\n            \" driver failure).\"\n        ),\n    )\n    node_type_id: Optional[str] = Field(\n        None,\n        description=(\n            \"This field encodes, through a single value, the resources available to\"\n            \" each of the Spark nodes in this cluster. For example, the Spark nodes can\"\n            \" be provisioned and optimized for memory or compute intensive workloads. A\"\n            \" list of available node types can be retrieved by using the [List node\"\n            \" types](https://docs.databricks.com/dev-tools/api/latest/clusters.html#list-node-types)\"\n            \" API call.\"\n        ),\n    )\n    num_workers: Optional[int] = Field(\n        None,\n        description=(\n            \"If num_workers, number of worker nodes that this cluster must have. A\"\n            \" cluster has one Spark driver and num_workers executors for a total of\"\n            \" num_workers + 1 Spark nodes. **Note:** When reading the properties of a\"\n            \" cluster, this field reflects the desired number of workers rather than\"\n            \" the actual number of workers. For instance, if a cluster is resized from\"\n            \" 5 to 10 workers, this field is immediately updated to reflect the target\"\n            \" size of 10 workers, whereas the workers listed in `executors` gradually\"\n            \" increase from 5 to 10 as the new nodes are provisioned.\"\n        ),\n    )\n    spark_conf: Optional[SparkConfPair] = Field(\n        None,\n        description=(\n            \"An object containing a set of optional, user-specified Spark configuration\"\n            \" key-value pairs. You can also pass in a string of extra JVM options to\"\n            \" the driver and the executors via `spark.driver.extraJavaOptions` and\"\n            \" `spark.executor.extraJavaOptions` respectively.\\n\\nExample Spark confs:\"\n            ' `{\"spark.speculation\": true, \"spark.streaming.ui.retainedBatches\": 5}` or'\n            ' `{\"spark.driver.extraJavaOptions\": \"-verbose:gc -XX:+PrintGCDetails\"}`'\n        ),\n    )\n    spark_context_id: Optional[int] = Field(\n        None,\n        description=(\n            \"A canonical SparkContext identifier. This value _does_ change when the\"\n            \" Spark driver restarts. The pair `(cluster_id, spark_context_id)` is a\"\n            \" globally unique identifier over all Spark contexts.\"\n        ),\n    )\n    spark_env_vars: Optional[SparkEnvPair] = Field(\n        None,\n        description=(\n            \"An object containing a set of optional, user-specified environment\"\n            \" variable key-value pairs. Key-value pairs of the form (X,Y) are exported\"\n            \" as is (that is, `export X='Y'`) while launching the driver and\"\n            \" workers.\\n\\nTo specify an additional set of `SPARK_DAEMON_JAVA_OPTS`, we\"\n            \" recommend appending them to `$SPARK_DAEMON_JAVA_OPTS` as shown in the\"\n            \" following example. This ensures that all default databricks managed\"\n            \" environmental variables are included as well.\\n\\nExample Spark\"\n            ' environment variables: `{\"SPARK_WORKER_MEMORY\": \"28000m\",'\n            ' \"SPARK_LOCAL_DIRS\": \"/local_disk0\"}` or `{\"SPARK_DAEMON_JAVA_OPTS\":'\n            ' \"$SPARK_DAEMON_JAVA_OPTS -Dspark.shuffle.service.enabled=true\"}`'\n        ),\n    )\n    spark_version: Optional[str] = Field(\n        None,\n        description=(\n            \"The runtime version of the cluster. You can retrieve a list of available\"\n            \" runtime versions by using the [Runtime\"\n            \" versions](https://docs.databricks.com/dev-tools/api/latest/clusters.html#runtime-versions)\"\n            \" API call.\"\n        ),\n    )\n    ssh_public_keys: Optional[List[str]] = Field(\n        None,\n        description=(\n            \"SSH public key contents that are added to each Spark node in this cluster.\"\n            \" The corresponding private keys can be used to login with the user name\"\n            \" `ubuntu` on port `2200`. Up to 10 keys can be specified.\"\n        ),\n    )\n    start_time: Optional[int] = Field(\n        None,\n        description=(\n            \"Time (in epoch milliseconds) when the cluster creation request was\"\n            \" received (when the cluster entered a `PENDING` state).\"\n        ),\n    )\n    state: Optional[ClusterState] = Field(None, description=\"State of the cluster.\")\n    state_message: Optional[str] = Field(\n        None,\n        description=(\n            \"A message associated with the most recent state transition (for example,\"\n            \" the reason why the cluster entered a `TERMINATED` state). This field is\"\n            \" unstructured, and its exact format is subject to change.\"\n        ),\n    )\n    terminated_time: Optional[int] = Field(\n        None,\n        description=(\n            \"Time (in epoch milliseconds) when the cluster was terminated, if\"\n            \" applicable.\"\n        ),\n    )\n    termination_reason: Optional[TerminationReason] = Field(\n        None,\n        description=(\n            \"Information about why the cluster was terminated. This field only appears\"\n            \" when the cluster is in a `TERMINATING` or `TERMINATED` state.\"\n        ),\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.ClusterInstance","title":"<code>ClusterInstance</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class ClusterInstance(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    cluster_id: Optional[str] = Field(\n        None,\n        description=(\n            \"The canonical identifier for the cluster used by a run. This field is\"\n            \" always available for runs on existing clusters. For runs on new clusters,\"\n            \" it becomes available once the cluster is created. This value can be used\"\n            \" to view logs by browsing to `/#setting/sparkui/$cluster_id/driver-logs`.\"\n            \" The logs continue to be available after the run completes.\\n\\nThe\"\n            \" response won\u2019t include this field if the identifier is not available yet.\"\n        ),\n        example=\"0923-164208-meows279\",\n    )\n    spark_context_id: Optional[str] = Field(\n        None,\n        description=(\n            \"The canonical identifier for the Spark context used by a run. This field\"\n            \" is filled in once the run begins execution. This value can be used to\"\n            \" view the Spark UI by browsing to\"\n            \" `/#setting/sparkui/$cluster_id/$spark_context_id`. The Spark UI continues\"\n            \" to be available after the run has completed.\\n\\nThe response won\u2019t\"\n            \" include this field if the identifier is not available yet.\"\n        ),\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.ClusterLibraryStatuses","title":"<code>ClusterLibraryStatuses</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class ClusterLibraryStatuses(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    cluster_id: Optional[str] = Field(\n        None, description=\"Unique identifier for the cluster.\"\n    )\n    library_statuses: Optional[List[LibraryFullStatus]] = Field(\n        None, description=\"Status of all libraries on the cluster.\"\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.ClusterLogConf","title":"<code>ClusterLogConf</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class ClusterLogConf(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    dbfs: Optional[DbfsStorageInfo] = Field(\n        None,\n        description=(\n            \"DBFS location of cluster log. Destination must be provided. For example,\"\n            ' `{ \"dbfs\" : { \"destination\" : \"dbfs:/home/cluster_log\" } }`'\n        ),\n    )\n    s3: Optional[S3StorageInfo] = Field(\n        None,\n        description=(\n            \"S3 location of cluster log. `destination` and either `region` or\"\n            ' `endpoint` must be provided. For example, `{ \"s3\": { \"destination\" :'\n            ' \"s3://cluster_log_bucket/prefix\", \"region\" : \"us-west-2\" } }`'\n        ),\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.ClusterSize","title":"<code>ClusterSize</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class ClusterSize(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    autoscale: Optional[AutoScale] = Field(\n        None,\n        description=(\n            \"If autoscale, parameters needed in order to automatically scale clusters\"\n            \" up and down based on load.\"\n        ),\n    )\n    num_workers: Optional[int] = Field(\n        None,\n        description=(\n            \"If num_workers, number of worker nodes that this cluster must have. A\"\n            \" cluster has one Spark driver and num_workers executors for a total of\"\n            \" num_workers + 1 Spark nodes. When reading the properties of a cluster,\"\n            \" this field reflects the desired number of workers rather than the actual\"\n            \" number of workers. For instance, if a cluster is resized from 5 to 10\"\n            \" workers, this field is updated to reflect the target size of 10 workers,\"\n            \" whereas the workers listed in executors gradually increase from 5 to 10\"\n            \" as the new nodes are provisioned.\"\n        ),\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.ClusterSource","title":"<code>ClusterSource</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <pre><code>* UI: Cluster created through the UI.\n</code></pre> <ul> <li>JOB: Cluster created by the Databricks job scheduler.</li> <li>API: Cluster created through an API call.</li> </ul> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class ClusterSource(str, Enum):\n    \"\"\"\n        * UI: Cluster created through the UI.\n    * JOB: Cluster created by the Databricks job scheduler.\n    * API: Cluster created through an API call.\n\n    \"\"\"\n\n    ui = \"UI\"\n    job = \"JOB\"\n    api = \"API\"\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.ClusterSpec","title":"<code>ClusterSpec</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class ClusterSpec(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    existing_cluster_id: Optional[str] = Field(\n        None,\n        description=(\n            \"If existing_cluster_id, the ID of an existing cluster that is used for all\"\n            \" runs of this job. When running jobs on an existing cluster, you may need\"\n            \" to manually restart the cluster if it stops responding. We suggest\"\n            \" running jobs on new clusters for greater reliability.\"\n        ),\n        example=\"0923-164208-meows279\",\n    )\n    libraries: Optional[List[Library]] = Field(\n        None,\n        description=(\n            \"An optional list of libraries to be installed on the cluster that executes\"\n            \" the job. The default value is an empty list.\"\n        ),\n    )\n    new_cluster: Optional[NewCluster] = Field(\n        None,\n        description=(\n            \"If new_cluster, a description of a cluster that is created for each run.\"\n        ),\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.ClusterState","title":"<code>ClusterState</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <pre><code>* PENDING: Indicates that a cluster is in the process of being created.\n</code></pre> <ul> <li>RUNNING: Indicates that a cluster has been started and is ready for use.</li> <li>RESTARTING: Indicates that a cluster is in the process of restarting.</li> <li>RESIZING: Indicates that a cluster is in the process of adding or removing nodes.</li> <li>TERMINATING: Indicates that a cluster is in the process of being destroyed.</li> <li>TERMINATED: Indicates that a cluster has been successfully destroyed.</li> <li>ERROR: This state is no longer used. It was used to indicate a cluster that failed to be created. <code>TERMINATING</code> and <code>TERMINATED</code> are used instead.</li> <li>UNKNOWN: Indicates that a cluster is in an unknown state. A cluster should never be in this state.</li> </ul> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class ClusterState(str, Enum):\n    \"\"\"\n        * PENDING: Indicates that a cluster is in the process of being created.\n    * RUNNING: Indicates that a cluster has been started and is ready for use.\n    * RESTARTING: Indicates that a cluster is in the process of restarting.\n    * RESIZING: Indicates that a cluster is in the process of adding or removing nodes.\n    * TERMINATING: Indicates that a cluster is in the process of being destroyed.\n    * TERMINATED: Indicates that a cluster has been successfully destroyed.\n    * ERROR: This state is no longer used. It was used to indicate a cluster that failed to be created. `TERMINATING` and `TERMINATED` are used instead.\n    * UNKNOWN: Indicates that a cluster is in an unknown state. A cluster should never be in this state.\n\n    \"\"\"\n\n    pending = \"PENDING\"\n    running = \"RUNNING\"\n    restarting = \"RESTARTING\"\n    resizing = \"RESIZING\"\n    terminating = \"TERMINATING\"\n    terminated = \"TERMINATED\"\n    error = \"ERROR\"\n    unknown = \"UNKNOWN\"\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.ClusterTag","title":"<code>ClusterTag</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> <p>An object with key value pairs. The key length must be between 1 and 127 UTF-8 characters, inclusive. The value length must be less than or equal to 255 UTF-8 characters. For a list of all restrictions, see AWS Tag Restrictions: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#tag-restrictions</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class ClusterTag(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n\n    An object with key value pairs. The key length must be between 1 and 127 UTF-8 characters, inclusive. The value length must be less than or equal to 255 UTF-8 characters. For a list of all restrictions, see AWS Tag Restrictions: &lt;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#tag-restrictions&gt;\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n\n        allow_mutation = False\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.CronSchedule","title":"<code>CronSchedule</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class CronSchedule(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    pause_status: Optional[Literal[\"PAUSED\", \"UNPAUSED\"]] = Field(\n        None,\n        description=\"Indicate whether this schedule is paused or not.\",\n        example=\"PAUSED\",\n    )\n    quartz_cron_expression: str = Field(\n        ...,\n        description=(\n            \"A Cron expression using Quartz syntax that describes the schedule for a\"\n            \" job. See [Cron\"\n            \" Trigger](http://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html)\"\n            \" for details. This field is required.\"\n        ),\n        example=\"20 30 * * * ?\",\n    )\n    timezone_id: str = Field(\n        ...,\n        description=(\n            \"A Java timezone ID. The schedule for a job is resolved with respect to\"\n            \" this timezone. See [Java\"\n            \" TimeZone](https://docs.oracle.com/javase/7/docs/api/java/util/TimeZone.html)\"\n            \" for details. This field is required.\"\n        ),\n        example=\"Europe/London\",\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.DbfsStorageInfo","title":"<code>DbfsStorageInfo</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class DbfsStorageInfo(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    destination: Optional[str] = Field(\n        None, description=\"DBFS destination. Example: `dbfs:/my/path`\"\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.DbtOutput","title":"<code>DbtOutput</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class DbtOutput(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    artifacts_headers: Optional[Dict[str, Any]] = Field(\n        None,\n        description=(\n            \"An optional map of headers to send when retrieving the artifact from the\"\n            \" `artifacts_link`.\"\n        ),\n    )\n    artifacts_link: Optional[str] = Field(\n        None,\n        description=(\n            \"A pre-signed URL to download the (compressed) dbt artifacts. This link is\"\n            \" valid for a limited time (30 minutes). This information is only available\"\n            \" after the run has finished.\"\n        ),\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.DbtTask","title":"<code>DbtTask</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class DbtTask(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    catalog: Optional[str] = Field(\n        None,\n        description=(\n            \"Optional name of the catalog to use. The value is the top level in the\"\n            \" 3-level namespace of Unity Catalog (catalog / schema / relation). The\"\n            \" catalog value can only be specified if a warehouse_id is specified.\"\n            \" Requires dbt-databricks &gt;= 1.1.1.\"\n        ),\n        example=\"main\",\n    )\n    commands: List = Field(\n        ...,\n        description=(\n            \"A list of dbt commands to execute. All commands must start with `dbt`.\"\n            \" This parameter must not be empty. A maximum of up to 10 commands can be\"\n            \" provided.\"\n        ),\n        example=[\"dbt deps\", \"dbt seed\", \"dbt run --models 123\"],\n    )\n    profiles_directory: Optional[str] = Field(\n        None,\n        description=(\n            \"Optional (relative) path to the profiles directory. Can only be specified\"\n            \" if no warehouse_id is specified. If no warehouse_id is specified and this\"\n            \" folder is unset, the root directory is used.\"\n        ),\n    )\n    project_directory: Optional[str] = Field(\n        None,\n        description=(\n            \"Optional (relative) path to the project directory, if no value is\"\n            \" provided, the root of the git repository is used.\"\n        ),\n    )\n    schema_: Optional[str] = Field(\n        None,\n        alias=\"schema\",\n        description=(\n            \"Optional schema to write to. This parameter is only used when a\"\n            \" warehouse_id is also provided. If not provided, the `default` schema is\"\n            \" used.\"\n        ),\n    )\n    warehouse_id: Optional[str] = Field(\n        None,\n        description=(\n            \"ID of the SQL warehouse to connect to. If provided, we automatically\"\n            \" generate and provide the profile and connection details to dbt. It can be\"\n            \" overridden on a per-command basis by using the `--profiles-dir` command\"\n            \" line argument.\"\n        ),\n        example=\"30dade0507d960d1\",\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.DockerBasicAuth","title":"<code>DockerBasicAuth</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class DockerBasicAuth(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    password: Optional[str] = Field(\n        None, description=\"Password for the Docker repository.\"\n    )\n    username: Optional[str] = Field(\n        None, description=\"User name for the Docker repository.\"\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.DockerImage","title":"<code>DockerImage</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class DockerImage(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    basic_auth: Optional[DockerBasicAuth] = Field(\n        None, description=\"Basic authentication information for Docker repository.\"\n    )\n    url: Optional[str] = Field(None, description=\"URL for the Docker image.\")\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.Error","title":"<code>Error</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class Error(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    error_code: Optional[str] = Field(\n        None, description=\"Error code\", example=\"INTERNAL_ERROR\"\n    )\n    message: Optional[str] = Field(\n        None,\n        description=(\n            \"Human-readable error message that describes the cause of the error.\"\n        ),\n        example=\"Unexpected error.\",\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.EventDetails","title":"<code>EventDetails</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class EventDetails(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    attributes: Optional[AwsAttributes] = Field(\n        None,\n        description=(\n            \"* For created clusters, the attributes of the cluster.\\n* For edited\"\n            \" clusters, the new attributes of the cluster.\"\n        ),\n    )\n    cause: Optional[ResizeCause] = Field(\n        None, description=\"The cause of a change in target size.\"\n    )\n    cluster_size: Optional[ClusterSize] = Field(\n        None,\n        description=\"The cluster size that was set in the cluster creation or edit.\",\n    )\n    current_num_workers: Optional[int] = Field(\n        None, description=\"The number of nodes in the cluster.\"\n    )\n    previous_attributes: Optional[AwsAttributes] = Field(\n        None, description=\"The cluster attributes before a cluster was edited.\"\n    )\n    previous_cluster_size: Optional[ClusterSize] = Field(\n        None, description=\"The size of the cluster before an edit or resize.\"\n    )\n    reason: Optional[TerminationReason] = Field(\n        None,\n        description=(\n            \"A termination reason:\\n\\n* On a `TERMINATED` event, the reason for the\"\n            \" termination.\\n* On a `RESIZE_COMPLETE` event, indicates the reason that\"\n            \" we failed to acquire some nodes.\"\n        ),\n    )\n    target_num_workers: Optional[int] = Field(\n        None, description=\"The targeted number of nodes in the cluster.\"\n    )\n    user: Optional[str] = Field(\n        None,\n        description=(\n            \"The user that caused the event to occur. (Empty if it was done by\"\n            \" Databricks.)\"\n        ),\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.FileStorageInfo","title":"<code>FileStorageInfo</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class FileStorageInfo(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    destination: Optional[str] = Field(\n        None, description=\"File destination. Example: `file:/my/file.sh`\"\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.GitSnapshot","title":"<code>GitSnapshot</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> <p>Read-only state of the remote repository at the time the job was run. This field is only included on job runs.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class GitSnapshot(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n\n    Read-only state of the remote repository at the time the job was run. This field is only included on job runs.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    used_commit: Optional[str] = Field(\n        None,\n        description=(\n            \"Commit that was used to execute the run. If git_branch was specified, this\"\n            \" points to the HEAD of the branch at the time of the run; if git_tag was\"\n            \" specified, this points to the commit the tag points to.\"\n        ),\n        example=\"4506fdf41e9fa98090570a34df7a5bce163ff15f\",\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.GitSource","title":"<code>GitSource</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> <pre><code>This functionality is in Public Preview.\n</code></pre> <p>An optional specification for a remote repository containing the notebooks used by this job's notebook tasks.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class GitSource(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n\n        This functionality is in Public Preview.\n\n    An optional specification for a remote repository containing the notebooks used by this job's notebook tasks.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    git_branch: Optional[str] = Field(\n        None,\n        description=(\n            \"Name of the branch to be checked out and used by this job. This field\"\n            \" cannot be specified in conjunction with git_tag or git_commit.\\nThe\"\n            \" maximum length is 255 characters.\"\n        ),\n        example=\"main\",\n    )\n    git_commit: Optional[str] = Field(\n        None,\n        description=(\n            \"Commit to be checked out and used by this job. This field cannot be\"\n            \" specified in conjunction with git_branch or git_tag.\\nThe maximum length\"\n            \" is 64 characters.\"\n        ),\n        example=\"e0056d01\",\n    )\n    git_provider: Optional[\n        Literal[\n            \"gitHub\",\n            \"bitbucketCloud\",\n            \"azureDevOpsServices\",\n            \"gitHubEnterprise\",\n            \"bitbucketServer\",\n            \"gitLab\",\n            \"gitLabEnterpriseEdition\",\n            \"awsCodeCommit\",\n        ]\n    ] = Field(\n        None,\n        description=(\n            \"Unique identifier of the service used to host the Git repository. The\"\n            \" value is case insensitive.\"\n        ),\n        example=\"github\",\n    )\n    git_snapshot: Optional[GitSnapshot] = None\n    git_tag: Optional[str] = Field(\n        None,\n        description=(\n            \"Name of the tag to be checked out and used by this job. This field cannot\"\n            \" be specified in conjunction with git_branch or git_commit.\\nThe maximum\"\n            \" length is 255 characters.\"\n        ),\n        example=\"release-1.0.0\",\n    )\n    git_url: Optional[str] = Field(\n        None,\n        description=(\n            \"URL of the repository to be cloned by this job.\\nThe maximum length is 300\"\n            \" characters.\"\n        ),\n        example=\"https://github.com/databricks/databricks-cli\",\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.GitSource1","title":"<code>GitSource1</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class GitSource1(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    __root__: Union[GitSource, Any, Any, Any] = Field(\n        ...,\n        description=(\n            \"This functionality is in Public Preview.\\n\\nAn optional specification for\"\n            \" a remote repository containing the notebooks used by this job's notebook\"\n            \" tasks.\"\n        ),\n        example={\n            \"git_branch\": \"main\",\n            \"git_provider\": \"gitHub\",\n            \"git_url\": \"https://github.com/databricks/databricks-cli\",\n        },\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.GroupName","title":"<code>GroupName</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class GroupName(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    __root__: str = Field(\n        ...,\n        description=(\n            \"Group name. There are two built-in groups: `users` for all users, and\"\n            \" `admins` for administrators.\"\n        ),\n        example=\"users\",\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.InitScriptInfo","title":"<code>InitScriptInfo</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class InitScriptInfo(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    s3: Optional[S3StorageInfo] = Field(\n        None,\n        alias=\"S3\",\n        description=(\n            \"S3 location of init script. Destination and either region or endpoint must\"\n            ' be provided. For example, `{ \"s3\": { \"destination\" :'\n            ' \"s3://init_script_bucket/prefix\", \"region\" : \"us-west-2\" } }`'\n        ),\n    )\n    dbfs: Optional[DbfsStorageInfo] = Field(\n        None,\n        description=(\n            \"DBFS location of init script. Destination must be provided. For example,\"\n            ' `{ \"dbfs\" : { \"destination\" : \"dbfs:/home/init_script\" } }`'\n        ),\n    )\n    file: Optional[FileStorageInfo] = Field(\n        None,\n        description=(\n            \"File location of init script. Destination must be provided. For example,\"\n            ' `{ \"file\" : { \"destination\" : \"file:/my/local/file.sh\" } }`'\n        ),\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.IsOwner","title":"<code>IsOwner</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>Perimssion that represents ownership of the job.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class IsOwner(str, Enum):\n    \"\"\"\n    Perimssion that represents ownership of the job.\n    \"\"\"\n\n    isowner = \"IS_OWNER\"\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.Job","title":"<code>Job</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class Job(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    created_time: Optional[int] = Field(\n        None,\n        description=(\n            \"The time at which this job was created in epoch milliseconds (milliseconds\"\n            \" since 1/1/1970 UTC).\"\n        ),\n        example=1601370337343,\n    )\n    creator_user_name: Optional[str] = Field(\n        None,\n        description=(\n            \"The creator user name. This field won\u2019t be included in the response if the\"\n            \" user has already been deleted.\"\n        ),\n        example=\"user.name@databricks.com\",\n    )\n    job_id: Optional[int] = Field(\n        None, description=\"The canonical identifier for this job.\", example=11223344\n    )\n    settings: Optional[JobSettings] = Field(\n        None,\n        description=(\n            \"Settings for this job and all of its runs. These settings can be updated\"\n            \" using the `resetJob` method.\"\n        ),\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.JobCluster","title":"<code>JobCluster</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class JobCluster(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    job_cluster_key: str = Field(\n        ...,\n        description=(\n            \"A unique name for the job cluster. This field is required and must be\"\n            \" unique within the job.\\n`JobTaskSettings` may refer to this field to\"\n            \" determine which cluster to launch for the task execution.\"\n        ),\n        example=\"auto_scaling_cluster\",\n        max_length=100,\n        min_length=1,\n        regex=\"^[\\\\w\\\\-]+$\",\n    )\n    new_cluster: Optional[NewCluster] = None\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.JobEmailNotifications","title":"<code>JobEmailNotifications</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class JobEmailNotifications(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    no_alert_for_skipped_runs: Optional[bool] = Field(\n        None,\n        description=(\n            \"If true, do not send email to recipients specified in `on_failure` if the\"\n            \" run is skipped.\"\n        ),\n        example=False,\n    )\n    on_failure: Optional[List[str]] = Field(\n        None,\n        description=(\n            \"A list of email addresses to notify when a run completes unsuccessfully. A\"\n            \" run is considered unsuccessful if it ends with an `INTERNAL_ERROR`\"\n            \" `life_cycle_state` or a `SKIPPED`, `FAILED`, or `TIMED_OUT`\"\n            \" `result_state`. If not specified on job creation, reset, or update, or\"\n            \" the list is empty, then notifications are not sent. Job-level failure\"\n            \" notifications are sent only once after the entire job run (including all\"\n            \" of its retries) has failed. Notifications are not sent when failed job\"\n            \" runs are retried. To receive a failure notification after every failed\"\n            \" task (including every failed retry), use task-level notifications\"\n            \" instead.\"\n        ),\n        example=[\"user.name@databricks.com\"],\n    )\n    on_start: Optional[List[str]] = Field(\n        None,\n        description=(\n            \"A list of email addresses to be notified when a run begins. If not\"\n            \" specified on job creation, reset, or update, the list is empty, and\"\n            \" notifications are not sent.\"\n        ),\n        example=[\"user.name@databricks.com\"],\n    )\n    on_success: Optional[List[str]] = Field(\n        None,\n        description=(\n            \"A list of email addresses to be notified when a run successfully\"\n            \" completes. A run is considered to have completed successfully if it ends\"\n            \" with a `TERMINATED` `life_cycle_state` and a `SUCCESSFUL` result_state.\"\n            \" If not specified on job creation, reset, or update, the list is empty,\"\n            \" and notifications are not sent.\"\n        ),\n        example=[\"user.name@databricks.com\"],\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.JobSettings","title":"<code>JobSettings</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class JobSettings(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    email_notifications: Optional[JobEmailNotifications] = Field(\n        None,\n        description=(\n            \"An optional set of email addresses that is notified when runs of this job\"\n            \" begin or complete as well as when this job is deleted. The default\"\n            \" behavior is to not send any emails.\"\n        ),\n    )\n    format: Optional[Literal[\"SINGLE_TASK\", \"MULTI_TASK\"]] = Field(\n        None,\n        description=(\n            \"Used to tell what is the format of the job. This field is ignored in\"\n            \" Create/Update/Reset calls. When using the Jobs API 2.1 this value is\"\n            ' always set to `\"MULTI_TASK\"`.'\n        ),\n        example=\"MULTI_TASK\",\n    )\n    git_source: Optional[GitSource1] = Field(\n        None,\n        description=(\n            \"This functionality is in Public Preview.\\n\\nAn optional specification for\"\n            \" a remote repository containing the notebooks used by this job's notebook\"\n            \" tasks.\"\n        ),\n        example={\n            \"git_branch\": \"main\",\n            \"git_provider\": \"gitHub\",\n            \"git_url\": \"https://github.com/databricks/databricks-cli\",\n        },\n    )\n    job_clusters: Optional[List[JobCluster]] = Field(\n        None,\n        description=(\n            \"A list of job cluster specifications that can be shared and reused by\"\n            \" tasks of this job. Libraries cannot be declared in a shared job cluster.\"\n            \" You must declare dependent libraries in task settings.\"\n        ),\n        example=[\n            {\n                \"job_cluster_key\": \"auto_scaling_cluster\",\n                \"new_cluster\": {\n                    \"autoscale\": {\"max_workers\": 16, \"min_workers\": 2},\n                    \"aws_attributes\": {\"availability\": \"SPOT\", \"zone_id\": \"us-west-2a\"},\n                    \"node_type_id\": \"i3.xlarge\",\n                    \"spark_conf\": {\"spark.speculation\": True},\n                    \"spark_version\": \"7.3.x-scala2.12\",\n                },\n            }\n        ],\n        max_items=100,\n    )\n    max_concurrent_runs: Optional[int] = Field(\n        None,\n        description=(\n            \"An optional maximum allowed number of concurrent runs of the job.\\n\\nSet\"\n            \" this value if you want to be able to execute multiple runs of the same\"\n            \" job concurrently. This is useful for example if you trigger your job on a\"\n            \" frequent schedule and want to allow consecutive runs to overlap with each\"\n            \" other, or if you want to trigger multiple runs which differ by their\"\n            \" input parameters.\\n\\nThis setting affects only new runs. For example,\"\n            \" suppose the job\u2019s concurrency is 4 and there are 4 concurrent active\"\n            \" runs. Then setting the concurrency to 3 won\u2019t kill any of the active\"\n            \" runs. However, from then on, new runs are skipped unless there are fewer\"\n            \" than 3 active runs.\\n\\nThis value cannot exceed 1000\\\\. Setting this\"\n            \" value to 0 causes all new runs to be skipped. The default behavior is to\"\n            \" allow only 1 concurrent run.\"\n        ),\n        example=10,\n    )\n    name: Optional[str] = Field(\n        \"Untitled\",\n        description=\"An optional name for the job.\",\n        example=\"A multitask job\",\n    )\n    schedule: Optional[CronSchedule] = Field(\n        None,\n        description=(\n            \"An optional periodic schedule for this job. The default behavior is that\"\n            \" the job only runs when triggered by clicking \u201cRun Now\u201d in the Jobs UI or\"\n            \" sending an API request to `runNow`.\"\n        ),\n    )\n    tags: Optional[Dict[str, Any]] = Field(\n        \"{}\",\n        description=(\n            \"A map of tags associated with the job. These are forwarded to the cluster\"\n            \" as cluster tags for jobs clusters, and are subject to the same\"\n            \" limitations as cluster tags. A maximum of 25 tags can be added to the\"\n            \" job.\"\n        ),\n        example={\"cost-center\": \"engineering\", \"team\": \"jobs\"},\n    )\n    tasks: Optional[List[JobTaskSettings]] = Field(\n        None,\n        description=\"A list of task specifications to be executed by this job.\",\n        example=[\n            {\n                \"depends_on\": [],\n                \"description\": \"Extracts session data from events\",\n                \"existing_cluster_id\": \"0923-164208-meows279\",\n                \"libraries\": [{\"jar\": \"dbfs:/mnt/databricks/Sessionize.jar\"}],\n                \"max_retries\": 3,\n                \"min_retry_interval_millis\": 2000,\n                \"retry_on_timeout\": False,\n                \"spark_jar_task\": {\n                    \"main_class_name\": \"com.databricks.Sessionize\",\n                    \"parameters\": [\"--data\", \"dbfs:/path/to/data.json\"],\n                },\n                \"task_key\": \"Sessionize\",\n                \"timeout_seconds\": 86400,\n            },\n            {\n                \"depends_on\": [],\n                \"description\": \"Ingests order data\",\n                \"job_cluster_key\": \"auto_scaling_cluster\",\n                \"libraries\": [{\"jar\": \"dbfs:/mnt/databricks/OrderIngest.jar\"}],\n                \"max_retries\": 3,\n                \"min_retry_interval_millis\": 2000,\n                \"retry_on_timeout\": False,\n                \"spark_jar_task\": {\n                    \"main_class_name\": \"com.databricks.OrdersIngest\",\n                    \"parameters\": [\"--data\", \"dbfs:/path/to/order-data.json\"],\n                },\n                \"task_key\": \"Orders_Ingest\",\n                \"timeout_seconds\": 86400,\n            },\n            {\n                \"depends_on\": [\n                    {\"task_key\": \"Orders_Ingest\"},\n                    {\"task_key\": \"Sessionize\"},\n                ],\n                \"description\": \"Matches orders with user sessions\",\n                \"max_retries\": 3,\n                \"min_retry_interval_millis\": 2000,\n                \"new_cluster\": {\n                    \"autoscale\": {\"max_workers\": 16, \"min_workers\": 2},\n                    \"aws_attributes\": {\"availability\": \"SPOT\", \"zone_id\": \"us-west-2a\"},\n                    \"node_type_id\": \"i3.xlarge\",\n                    \"spark_conf\": {\"spark.speculation\": True},\n                    \"spark_version\": \"7.3.x-scala2.12\",\n                },\n                \"notebook_task\": {\n                    \"base_parameters\": {\"age\": \"35\", \"name\": \"John Doe\"},\n                    \"notebook_path\": \"/Users/user.name@databricks.com/Match\",\n                    \"source\": \"WORKSPACE\",\n                },\n                \"retry_on_timeout\": False,\n                \"task_key\": \"Match\",\n                \"timeout_seconds\": 86400,\n            },\n        ],\n        max_items=100,\n    )\n    timeout_seconds: Optional[int] = Field(\n        None,\n        description=(\n            \"An optional timeout applied to each run of this job. The default behavior\"\n            \" is to have no timeout.\"\n        ),\n        example=86400,\n    )\n    webhook_notifications: Optional[WebhookNotifications] = Field(\n        None,\n        description=(\n            \"A collection of system notification IDs to notify when runs of this job\"\n            \" begin or complete. The default behavior is to not send any system\"\n            \" notifications.\"\n        ),\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.JobTask","title":"<code>JobTask</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class JobTask(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    dbt_task: Optional[DbtTask] = Field(\n        None,\n        description=(\n            \"If dbt_task, indicates that this must execute a dbt task. It requires both\"\n            \" Databricks SQL and the ability to use a serverless or a pro SQL\"\n            \" warehouse.\"\n        ),\n    )\n    notebook_task: Optional[NotebookTask] = Field(\n        None,\n        description=(\n            \"If notebook_task, indicates that this job must run a notebook. This field\"\n            \" may not be specified in conjunction with spark_jar_task.\"\n        ),\n    )\n    pipeline_task: Optional[PipelineTask] = Field(\n        None,\n        description=(\n            \"If pipeline_task, indicates that this job must execute a Pipeline.\"\n        ),\n    )\n    python_wheel_task: Optional[PythonWheelTask] = Field(\n        None,\n        description=(\n            \"If python_wheel_task, indicates that this job must execute a PythonWheel.\"\n        ),\n    )\n    spark_jar_task: Optional[SparkJarTask] = Field(\n        None,\n        description=\"If spark_jar_task, indicates that this job must run a JAR.\",\n        example=\"\",\n    )\n    spark_python_task: Optional[SparkPythonTask] = Field(\n        None,\n        description=(\n            \"If spark_python_task, indicates that this job must run a Python file.\"\n        ),\n    )\n    spark_submit_task: Optional[SparkSubmitTask] = Field(\n        None,\n        description=(\n            \"If spark_submit_task, indicates that this job must be launched by the\"\n            \" spark submit script.\"\n        ),\n    )\n    sql_task: Optional[SqlTask] = Field(\n        None,\n        description=(\n            \"If sql_task, indicates that this job must execute a SQL task. It requires\"\n            \" both Databricks SQL and a serverless or a pro SQL warehouse.\"\n        ),\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.JobTaskSettings","title":"<code>JobTaskSettings</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class JobTaskSettings(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    dbt_task: Optional[DbtTask] = Field(\n        None,\n        description=(\n            \"If dbt_task, indicates that this must execute a dbt task. It requires both\"\n            \" Databricks SQL and the ability to use a serverless or a pro SQL\"\n            \" warehouse.\"\n        ),\n    )\n    depends_on: Optional[TaskDependencies] = None\n    description: Optional[TaskDescription] = None\n    email_notifications: Optional[JobEmailNotifications] = Field(\n        None,\n        description=(\n            \"An optional set of email addresses that is notified when runs of this task\"\n            \" begin or complete as well as when this task is deleted. The default\"\n            \" behavior is to not send any emails.\"\n        ),\n    )\n    existing_cluster_id: Optional[str] = Field(\n        None,\n        description=(\n            \"If existing_cluster_id, the ID of an existing cluster that is used for all\"\n            \" runs of this task. When running tasks on an existing cluster, you may\"\n            \" need to manually restart the cluster if it stops responding. We suggest\"\n            \" running jobs on new clusters for greater reliability.\"\n        ),\n        example=\"0923-164208-meows279\",\n    )\n    job_cluster_key: Optional[str] = Field(\n        None,\n        description=(\n            \"If job_cluster_key, this task is executed reusing the cluster specified in\"\n            \" `job.settings.job_clusters`.\"\n        ),\n        max_length=100,\n        min_length=1,\n        regex=\"^[\\\\w\\\\-]+$\",\n    )\n    libraries: Optional[List[Library]] = Field(\n        None,\n        description=(\n            \"An optional list of libraries to be installed on the cluster that executes\"\n            \" the task. The default value is an empty list.\"\n        ),\n    )\n    max_retries: Optional[int] = Field(\n        None,\n        description=(\n            \"An optional maximum number of times to retry an unsuccessful run. A run is\"\n            \" considered to be unsuccessful if it completes with the `FAILED`\"\n            \" result_state or `INTERNAL_ERROR` `life_cycle_state`. The value -1 means\"\n            \" to retry indefinitely and the value 0 means to never retry. The default\"\n            \" behavior is to never retry.\"\n        ),\n        example=10,\n    )\n    min_retry_interval_millis: Optional[int] = Field(\n        None,\n        description=(\n            \"An optional minimal interval in milliseconds between the start of the\"\n            \" failed run and the subsequent retry run. The default behavior is that\"\n            \" unsuccessful runs are immediately retried.\"\n        ),\n        example=2000,\n    )\n    new_cluster: Optional[NewCluster] = Field(\n        None,\n        description=(\n            \"If new_cluster, a description of a cluster that is created for each run.\"\n        ),\n    )\n    notebook_task: Optional[NotebookTask] = Field(\n        None,\n        description=(\n            \"If notebook_task, indicates that this task must run a notebook. This field\"\n            \" may not be specified in conjunction with spark_jar_task.\"\n        ),\n    )\n    pipeline_task: Optional[PipelineTask] = Field(\n        None,\n        description=(\n            \"If pipeline_task, indicates that this task must execute a Pipeline.\"\n        ),\n    )\n    python_wheel_task: Optional[PythonWheelTask] = Field(\n        None,\n        description=(\n            \"If python_wheel_task, indicates that this job must execute a PythonWheel.\"\n        ),\n    )\n    retry_on_timeout: Optional[bool] = Field(\n        None,\n        description=(\n            \"An optional policy to specify whether to retry a task when it times out.\"\n            \" The default behavior is to not retry on timeout.\"\n        ),\n        example=True,\n    )\n    spark_jar_task: Optional[SparkJarTask] = Field(\n        None, description=\"If spark_jar_task, indicates that this task must run a JAR.\"\n    )\n    spark_python_task: Optional[SparkPythonTask] = Field(\n        None,\n        description=(\n            \"If spark_python_task, indicates that this task must run a Python file.\"\n        ),\n    )\n    spark_submit_task: Optional[SparkSubmitTask] = Field(\n        None,\n        description=(\n            \"If spark_submit_task, indicates that this task must be launched by the\"\n            \" spark submit script.\"\n        ),\n    )\n    sql_task: Optional[SqlTask] = Field(\n        None,\n        description=(\n            \"If sql_task, indicates that this job must execute a SQL task. It requires\"\n            \" both Databricks SQL and a serverless or a pro SQL warehouse.\"\n        ),\n    )\n    task_key: TaskKey\n    timeout_seconds: Optional[int] = Field(\n        None,\n        description=(\n            \"An optional timeout applied to each run of this job task. The default\"\n            \" behavior is to have no timeout.\"\n        ),\n        example=86400,\n    )\n    webhook_notifications: Optional[WebhookNotifications] = Field(\n        None,\n        description=(\n            \"A collection of system notification IDs to notify when the run begins or\"\n            \" completes. The default behavior is to not send any system notifications.\"\n        ),\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.Library","title":"<code>Library</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class Library(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    cran: Optional[RCranLibrary] = Field(\n        None, description=\"If cran, specification of a CRAN library to be installed.\"\n    )\n    egg: Optional[str] = Field(\n        None,\n        description=(\n            \"If egg, URI of the egg to be installed. DBFS and S3 URIs are supported.\"\n            ' For example: `{ \"egg\": \"dbfs:/my/egg\" }` or `{ \"egg\":'\n            ' \"s3://my-bucket/egg\" }`. If S3 is used, make sure the cluster has read'\n            \" access on the library. You may need to launch the cluster with an\"\n            \" instance profile to access the S3 URI.\"\n        ),\n        example=\"dbfs:/my/egg\",\n    )\n    jar: Optional[str] = Field(\n        None,\n        description=(\n            \"If jar, URI of the JAR to be installed. DBFS and S3 URIs are supported.\"\n            ' For example: `{ \"jar\": \"dbfs:/mnt/databricks/library.jar\" }` or `{ \"jar\":'\n            ' \"s3://my-bucket/library.jar\" }`. If S3 is used, make sure the cluster has'\n            \" read access on the library. You may need to launch the cluster with an\"\n            \" instance profile to access the S3 URI.\"\n        ),\n        example=\"dbfs:/my-jar.jar\",\n    )\n    maven: Optional[MavenLibrary] = Field(\n        None,\n        description=(\n            \"If maven, specification of a Maven library to be installed. For example:\"\n            ' `{ \"coordinates\": \"org.jsoup:jsoup:1.7.2\" }`'\n        ),\n    )\n    pypi: Optional[PythonPyPiLibrary] = Field(\n        None,\n        description=(\n            \"If pypi, specification of a PyPI library to be installed. Specifying the\"\n            \" `repo` field is optional and if not specified, the default pip index is\"\n            ' used. For example: `{ \"package\": \"simplejson\", \"repo\":'\n            ' \"https://my-repo.com\" }`'\n        ),\n    )\n    whl: Optional[str] = Field(\n        None,\n        description=(\n            \"If whl, URI of the wheel or zipped wheels to be installed. DBFS and S3\"\n            ' URIs are supported. For example: `{ \"whl\": \"dbfs:/my/whl\" }` or `{ \"whl\":'\n            ' \"s3://my-bucket/whl\" }`. If S3 is used, make sure the cluster has read'\n            \" access on the library. You may need to launch the cluster with an\"\n            \" instance profile to access the S3 URI. Also the wheel file name needs to\"\n            \" use the [correct\"\n            \" convention](https://www.python.org/dev/peps/pep-0427/#file-format). If\"\n            \" zipped wheels are to be installed, the file name suffix should be\"\n            \" `.wheelhouse.zip`.\"\n        ),\n        example=\"dbfs:/my/whl\",\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.LibraryFullStatus","title":"<code>LibraryFullStatus</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class LibraryFullStatus(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    is_library_for_all_clusters: Optional[bool] = Field(\n        None,\n        description=(\n            \"Whether the library was set to be installed on all clusters via the\"\n            \" libraries UI.\"\n        ),\n    )\n    library: Optional[Library] = Field(\n        None, description=\"Unique identifier for the library.\"\n    )\n    messages: Optional[List[str]] = Field(\n        None,\n        description=(\n            \"All the info and warning messages that have occurred so far for this\"\n            \" library.\"\n        ),\n    )\n    status: Optional[LibraryInstallStatus] = Field(\n        None, description=\"Status of installing the library on the cluster.\"\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.LibraryInstallStatus","title":"<code>LibraryInstallStatus</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <pre><code>* `PENDING`: No action has yet been taken to install the library. This state should be very short lived.\n</code></pre> <ul> <li><code>RESOLVING</code>: Metadata necessary to install the library is being retrieved from the provided repository. For Jar, Egg, and Whl libraries, this step is a no-op.</li> <li><code>INSTALLING</code>: The library is actively being installed, either by adding resources to Spark or executing system commands inside the Spark nodes.</li> <li><code>INSTALLED</code>: The library has been successfully instally.</li> <li><code>SKIPPED</code>: Installation on a Databricks Runtime 7.0 or above cluster was skipped due to Scala version incompatibility.</li> <li><code>FAILED</code>: Some step in installation failed. More information can be found in the messages field.</li> <li><code>UNINSTALL_ON_RESTART</code>: The library has been marked for removal. Libraries can be removed only when clusters are restarted, so libraries that enter this state remains until the cluster is restarted.</li> </ul> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class LibraryInstallStatus(str, Enum):\n    \"\"\"\n        * `PENDING`: No action has yet been taken to install the library. This state should be very short lived.\n    * `RESOLVING`: Metadata necessary to install the library is being retrieved from the provided repository. For Jar, Egg, and Whl libraries, this step is a no-op.\n    * `INSTALLING`: The library is actively being installed, either by adding resources to Spark or executing system commands inside the Spark nodes.\n    * `INSTALLED`: The library has been successfully instally.\n    * `SKIPPED`: Installation on a Databricks Runtime 7.0 or above cluster was skipped due to Scala version incompatibility.\n    * `FAILED`: Some step in installation failed. More information can be found in the messages field.\n    * `UNINSTALL_ON_RESTART`: The library has been marked for removal. Libraries can be removed only when clusters are restarted, so libraries that enter this state remains until the cluster is restarted.\n    \"\"\"\n\n    pending = \"PENDING\"\n    resolving = \"RESOLVING\"\n    installing = \"INSTALLING\"\n    installed = \"INSTALLED\"\n    skipped = \"SKIPPED\"\n    failed = \"FAILED\"\n    uninstallonrestart = \"UNINSTALL_ON_RESTART\"\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.ListOrder","title":"<code>ListOrder</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <pre><code>* `DESC`: Descending order.\n</code></pre> <ul> <li><code>ASC</code>: Ascending order.</li> </ul> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class ListOrder(str, Enum):\n    \"\"\"\n        * `DESC`: Descending order.\n    * `ASC`: Ascending order.\n    \"\"\"\n\n    desc = \"DESC\"\n    asc = \"ASC\"\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.LogSyncStatus","title":"<code>LogSyncStatus</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class LogSyncStatus(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    last_attempted: Optional[int] = Field(\n        None,\n        description=(\n            \"The timestamp of last attempt. If the last attempt fails, last_exception\"\n            \" contains the exception in the last attempt.\"\n        ),\n    )\n    last_exception: Optional[str] = Field(\n        None,\n        description=(\n            \"The exception thrown in the last attempt, it would be null (omitted in the\"\n            \" response) if there is no exception in last attempted.\"\n        ),\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.MavenLibrary","title":"<code>MavenLibrary</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class MavenLibrary(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    coordinates: str = Field(\n        ...,\n        description=(\n            \"Gradle-style Maven coordinates. For example: `org.jsoup:jsoup:1.7.2`. This\"\n            \" field is required.\"\n        ),\n        example=\"org.jsoup:jsoup:1.7.2\",\n    )\n    exclusions: Optional[List[str]] = Field(\n        None,\n        description=(\n            'List of dependences to exclude. For example: `[\"slf4j:slf4j\",'\n            ' \"*:hadoop-client\"]`.\\n\\nMaven dependency exclusions:'\n            \" &lt;https://maven.apache.org/guides/introduction/introduction-to-optional-and-excludes-dependencies.html&gt;.\"\n        ),\n        example=[\"slf4j:slf4j\", \"*:hadoop-client\"],\n    )\n    repo: Optional[str] = Field(\n        None,\n        description=(\n            \"Maven repo to install the Maven package from. If omitted, both Maven\"\n            \" Central Repository and Spark Packages are searched.\"\n        ),\n        example=\"https://my-repo.com\",\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.NewCluster","title":"<code>NewCluster</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class NewCluster(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    autoscale: Optional[AutoScale] = Field(\n        None,\n        description=(\n            \"If autoscale, the required parameters to automatically scale clusters up\"\n            \" and down based on load.\"\n        ),\n    )\n    aws_attributes: Optional[AwsAttributes] = Field(\n        None,\n        description=(\n            \"Attributes related to clusters running on Amazon Web Services. If not\"\n            \" specified at cluster creation, a set of default values is used.\"\n        ),\n    )\n    cluster_log_conf: Optional[ClusterLogConf] = Field(\n        None,\n        description=(\n            \"The configuration for delivering Spark logs to a long-term storage\"\n            \" destination. Only one destination can be specified for one cluster. If\"\n            \" the conf is given, the logs are delivered to the destination every `5\"\n            \" mins`. The destination of driver logs is\"\n            \" `&lt;destination&gt;/&lt;cluster-id&gt;/driver`, while the destination of executor\"\n            \" logs is `&lt;destination&gt;/&lt;cluster-id&gt;/executor`.\"\n        ),\n    )\n    custom_tags: Optional[ClusterTag] = Field(\n        None,\n        description=(\n            \"An object containing a set of tags for cluster resources. Databricks tags\"\n            \" all cluster resources (such as AWS instances and EBS volumes) with these\"\n            \" tags in addition to default_tags.\\n\\n**Note**:\\n\\n* Tags are not\"\n            \" supported on legacy node types such as compute-optimized and\"\n            \" memory-optimized\\n* Databricks allows at most 45 custom tags\"\n        ),\n    )\n    driver_instance_pool_id: Optional[str] = Field(\n        None,\n        description=(\n            \"The optional ID of the instance pool to use for the driver node. You must\"\n            \" also specify `instance_pool_id`. Refer to [Instance Pools\"\n            \" API](https://docs.databricks.com/dev-tools/api/latest/instance-pools.html)\"\n            \" for details.\"\n        ),\n    )\n    driver_node_type_id: Optional[str] = Field(\n        None,\n        description=(\n            \"The node type of the Spark driver. This field is optional; if unset, the\"\n            \" driver node type is set as the same value as `node_type_id` defined\"\n            \" above.\"\n        ),\n    )\n    enable_elastic_disk: Optional[bool] = Field(\n        None,\n        description=(\n            \"Autoscaling Local Storage: when enabled, this cluster dynamically acquires\"\n            \" additional disk space when its Spark workers are running low on disk\"\n            \" space. This feature requires specific AWS permissions to function\"\n            \" correctly - refer to [Autoscaling local\"\n            \" storage](https://docs.databricks.com/clusters/configure.html#autoscaling-local-storage)\"\n            \" for details.\"\n        ),\n    )\n    enable_local_disk_encryption: Optional[bool] = Field(\n        None,\n        description=(\n            \"Determines whether encryption of disks locally attached to the cluster is\"\n            \" enabled.\"\n        ),\n    )\n    init_scripts: Optional[List[InitScriptInfo]] = Field(\n        None,\n        description=(\n            \"The configuration for storing init scripts. Any number of scripts can be\"\n            \" specified. The scripts are executed sequentially in the order provided.\"\n            \" If `cluster_log_conf` is specified, init script logs are sent to\"\n            \" `&lt;destination&gt;/&lt;cluster-id&gt;/init_scripts`.\"\n        ),\n    )\n    instance_pool_id: Optional[str] = Field(\n        None,\n        description=(\n            \"The optional ID of the instance pool to use for cluster nodes. If\"\n            \" `driver_instance_pool_id` is present, `instance_pool_id` is used for\"\n            \" worker nodes only. Otherwise, it is used for both the driver node and\"\n            \" worker nodes. Refer to [Instance Pools\"\n            \" API](https://docs.databricks.com/dev-tools/api/latest/instance-pools.html)\"\n            \" for details.\"\n        ),\n    )\n    node_type_id: Optional[str] = Field(\n        None,\n        description=(\n            \"This field encodes, through a single value, the resources available to\"\n            \" each of the Spark nodes in this cluster. For example, the Spark nodes can\"\n            \" be provisioned and optimized for memory or compute intensive workloads A\"\n            \" list of available node types can be retrieved by using the [List node\"\n            \" types](https://docs.databricks.com/dev-tools/api/latest/clusters.html#list-node-types)\"\n            \" API call.\"\n        ),\n    )\n    num_workers: Optional[int] = Field(\n        None,\n        description=(\n            \"If num_workers, number of worker nodes that this cluster must have. A\"\n            \" cluster has one Spark driver and num_workers executors for a total of\"\n            \" num_workers + 1 Spark nodes. When reading the properties of a cluster,\"\n            \" this field reflects the desired number of workers rather than the actual\"\n            \" current number of workers. For example, if a cluster is resized from 5 to\"\n            \" 10 workers, this field immediately updates to reflect the target size of\"\n            \" 10 workers, whereas the workers listed in `spark_info` gradually increase\"\n            \" from 5 to 10 as the new nodes are provisioned.\"\n        ),\n    )\n    policy_id: Optional[str] = Field(\n        None,\n        description=(\n            \"A [cluster\"\n            \" policy](https://docs.databricks.com/dev-tools/api/latest/policies.html)\"\n            \" ID. Either `node_type_id` or `instance_pool_id` must be specified in the\"\n            \" cluster policy if they are not specified in this job cluster object.\"\n        ),\n    )\n    spark_conf: Optional[SparkConfPair] = Field(\n        None,\n        description=(\n            \"An object containing a set of optional, user-specified Spark configuration\"\n            \" key-value pairs. You can also pass in a string of extra JVM options to\"\n            \" the driver and the executors via `spark.driver.extraJavaOptions` and\"\n            \" `spark.executor.extraJavaOptions` respectively.\\n\\nExample Spark confs:\"\n            ' `{\"spark.speculation\": true, \"spark.streaming.ui.retainedBatches\": 5}` or'\n            ' `{\"spark.driver.extraJavaOptions\": \"-verbose:gc -XX:+PrintGCDetails\"}`'\n        ),\n    )\n    spark_env_vars: Optional[SparkEnvPair] = Field(\n        None,\n        description=(\n            \"An object containing a set of optional, user-specified environment\"\n            \" variable key-value pairs. Key-value pair of the form (X,Y) are exported\"\n            \" as is (for example, `export X='Y'`) while launching the driver and\"\n            \" workers.\\n\\nTo specify an additional set of `SPARK_DAEMON_JAVA_OPTS`, we\"\n            \" recommend appending them to `$SPARK_DAEMON_JAVA_OPTS` as shown in the\"\n            \" following example. This ensures that all default databricks managed\"\n            \" environmental variables are included as well.\\n\\nExample Spark\"\n            ' environment variables: `{\"SPARK_WORKER_MEMORY\": \"28000m\",'\n            ' \"SPARK_LOCAL_DIRS\": \"/local_disk0\"}` or `{\"SPARK_DAEMON_JAVA_OPTS\":'\n            ' \"$SPARK_DAEMON_JAVA_OPTS -Dspark.shuffle.service.enabled=true\"}`'\n        ),\n    )\n    spark_version: str = Field(\n        ...,\n        description=(\n            \"The Spark version of the cluster. A list of available Spark versions can\"\n            \" be retrieved by using the [Runtime\"\n            \" versions](https://docs.databricks.com/dev-tools/api/latest/clusters.html#runtime-versions)\"\n            \" API call.\"\n        ),\n    )\n    runtime_engine: Optional[RuntimeEngine] = Field(\n        None,\n        description=(\n            \"Decides which runtime engine to be use, e.g. Standard vs. Photon. If \"\n            \"unspecified, the runtime engine is inferred from spark_version. \"\n            \"see https://docs.databricks.com/api-explorer/workspace/jobs/create \"\n            \" for more details\"\n        ),\n    )\n    ssh_public_keys: Optional[List[str]] = Field(\n        None,\n        description=(\n            \"SSH public key contents that are added to each Spark node in this cluster.\"\n            \" The corresponding private keys can be used to login with the user name\"\n            \" `ubuntu` on port `2200`. Up to 10 keys can be specified.\"\n        ),\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.NodeType","title":"<code>NodeType</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class NodeType(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    description: str = Field(\n        ...,\n        description=(\n            \"A string description associated with this node type. This field is\"\n            \" required.\"\n        ),\n    )\n    instance_type_id: str = Field(\n        ...,\n        description=(\n            \"An identifier for the type of hardware that this node runs on. This field\"\n            \" is required.\"\n        ),\n    )\n    is_deprecated: Optional[bool] = Field(\n        None,\n        description=(\n            \"Whether the node type is deprecated. Non-deprecated node types offer\"\n            \" greater performance.\"\n        ),\n    )\n    memory_mb: int = Field(\n        ...,\n        description=(\n            \"Memory (in MB) available for this node type. This field is required.\"\n        ),\n    )\n    node_info: Optional[ClusterCloudProviderNodeInfo] = Field(\n        None, description=\"Node type info reported by the cloud provider.\"\n    )\n    node_type_id: str = Field(\n        ..., description=\"Unique identifier for this node type. This field is required.\"\n    )\n    num_cores: Optional[float] = Field(\n        None,\n        description=(\n            \"Number of CPU cores available for this node type. This can be fractional\"\n            \" if the number of cores on a machine instance is not divisible by the\"\n            \" number of Spark nodes on that machine. This field is required.\"\n        ),\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.NotebookOutput","title":"<code>NotebookOutput</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class NotebookOutput(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    result: Optional[str] = Field(\n        None,\n        description=(\n            \"The value passed to\"\n            \" [dbutils.notebook.exit()](https://docs.databricks.com/notebooks/notebook-workflows.html#notebook-workflows-exit).\"\n            \" Databricks restricts this API to return the first 5 MB of the value. For\"\n            \" a larger result, your job can store the results in a cloud storage\"\n            \" service. This field is absent if `dbutils.notebook.exit()` was never\"\n            \" called.\"\n        ),\n        example=\"An arbitrary string passed by calling dbutils.notebook.exit(...)\",\n    )\n    truncated: Optional[bool] = Field(\n        None, description=\"Whether or not the result was truncated.\", example=False\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.NotebookTask","title":"<code>NotebookTask</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class NotebookTask(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    base_parameters: Optional[Dict[str, Any]] = Field(\n        None,\n        description=(\n            \"Base parameters to be used for each run of this job. If the run is\"\n            \" initiated by a call to\"\n            \" [`run-now`](https://docs.databricks.com/dev-tools/api/latest/jobs.html#operation/JobsRunNow)\"\n            \" with parameters specified, the two parameters maps are merged. If the\"\n            \" same key is specified in `base_parameters` and in `run-now`, the value\"\n            \" from `run-now` is used.\\n\\nUse [Task parameter\"\n            \" variables](https://docs.databricks.com/jobs.html#parameter-variables) to\"\n            \" set parameters containing information about job runs.\\n\\nIf the notebook\"\n            \" takes a parameter that is not specified in the job\u2019s `base_parameters` or\"\n            \" the `run-now` override parameters, the default value from the notebook is\"\n            \" used.\\n\\nRetrieve these parameters in a notebook using\"\n            \" [dbutils.widgets.get](https://docs.databricks.com/dev-tools/databricks-utils.html#dbutils-widgets).\"\n        ),\n        example={\"age\": 35, \"name\": \"John Doe\"},\n    )\n    notebook_path: str = Field(\n        ...,\n        description=(\n            \"The path of the notebook to be run in the Databricks workspace or remote\"\n            \" repository. For notebooks stored in the Databricks workspace, the path\"\n            \" must be absolute and begin with a slash. For notebooks stored in a remote\"\n            \" repository, the path must be relative. This field is required.\"\n        ),\n        example=\"/Users/user.name@databricks.com/notebook_to_run\",\n    )\n    source: Optional[Literal[\"WORKSPACE\", \"GIT\"]] = Field(\n        None,\n        description=(\n            \"Optional location type of the notebook. When set to `WORKSPACE`, the\"\n            \" notebook will be retrieved from the local Databricks workspace. When set\"\n            \" to `GIT`, the notebook will be retrieved from a Git repository defined in\"\n            \" `git_source`. If the value is empty, the task will use `GIT` if\"\n            \" `git_source` is defined and `WORKSPACE` otherwise.\"\n        ),\n        example=\"WORKSPACE\",\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.OnFailureItem","title":"<code>OnFailureItem</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class OnFailureItem(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    id: Optional[str] = None\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.OnStartItem","title":"<code>OnStartItem</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class OnStartItem(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    id: Optional[str] = None\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.OnSucces","title":"<code>OnSucces</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class OnSucces(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    id: Optional[str] = None\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.ParameterPair","title":"<code>ParameterPair</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> <p>An object with additional information about why a cluster was terminated. The object keys are one of <code>TerminationParameter</code> and the value is the termination information.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class ParameterPair(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n\n    An object with additional information about why a cluster was terminated. The object keys are one of `TerminationParameter` and the value is the termination information.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n\n        allow_mutation = False\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.PermissionLevel","title":"<code>PermissionLevel</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class PermissionLevel(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    __root__: Union[CanManage, CanManageRun, CanView, IsOwner] = Field(\n        ..., description=\"Permission level to grant.\"\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.PermissionLevelForGroup","title":"<code>PermissionLevelForGroup</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class PermissionLevelForGroup(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    __root__: Union[CanManage, CanManageRun, CanView] = Field(\n        ..., description=\"Permission level to grant.\"\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.PipelineParams","title":"<code>PipelineParams</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class PipelineParams(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    full_refresh: Optional[bool] = Field(\n        None, description=\"If true, triggers a full refresh on the delta live table.\"\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.PipelineTask","title":"<code>PipelineTask</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class PipelineTask(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    full_refresh: Optional[bool] = Field(\n        False,\n        description=(\n            \"If true, a full refresh will be triggered on the delta live table.\"\n        ),\n    )\n    pipeline_id: Optional[str] = Field(\n        None,\n        description=\"The full name of the pipeline task to execute.\",\n        example=\"a12cd3e4-0ab1-1abc-1a2b-1a2bcd3e4fg5\",\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.PoolClusterTerminationCode","title":"<code>PoolClusterTerminationCode</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <pre><code>* INSTANCE_POOL_MAX_CAPACITY_FAILURE: The pool max capacity has been reached.\n</code></pre> <ul> <li>INSTANCE_POOL_NOT_FOUND_FAILURE: The pool specified by the cluster is no longer active or doesn\u2019t exist.</li> </ul> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class PoolClusterTerminationCode(str, Enum):\n    \"\"\"\n        * INSTANCE_POOL_MAX_CAPACITY_FAILURE: The pool max capacity has been reached.\n    * INSTANCE_POOL_NOT_FOUND_FAILURE: The pool specified by the cluster is no longer active or doesn\u2019t exist.\n    \"\"\"\n\n    instancepoolmaxcapacityfailure = \"INSTANCE_POOL_MAX_CAPACITY_FAILURE\"\n    instancepoolnotfoundfailure = \"INSTANCE_POOL_NOT_FOUND_FAILURE\"\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.PythonPyPiLibrary","title":"<code>PythonPyPiLibrary</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class PythonPyPiLibrary(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    package: str = Field(\n        ...,\n        description=(\n            \"The name of the PyPI package to install. An optional exact version\"\n            \" specification is also supported. Examples: `simplejson` and\"\n            \" `simplejson==3.8.0`. This field is required.\"\n        ),\n        example=\"simplejson==3.8.0\",\n    )\n    repo: Optional[str] = Field(\n        None,\n        description=(\n            \"The repository where the package can be found. If not specified, the\"\n            \" default pip index is used.\"\n        ),\n        example=\"https://my-repo.com\",\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.PythonWheelTask","title":"<code>PythonWheelTask</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class PythonWheelTask(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    entry_point: Optional[str] = Field(\n        None,\n        description=(\n            \"Named entry point to use, if it does not exist in the metadata of the\"\n            \" package it executes the function from the package directly using\"\n            \" `$packageName.$entryPoint()`\"\n        ),\n    )\n    named_parameters: Optional[Dict[str, Any]] = Field(\n        None,\n        description=(\n            \"Command-line parameters passed to Python wheel task in the form of\"\n            ' `[\"--name=task\", \"--data=dbfs:/path/to/data.json\"]`. Leave it empty if'\n            \" `parameters` is not null.\"\n        ),\n        example={\"data\": \"dbfs:/path/to/data.json\", \"name\": \"task\"},\n    )\n    package_name: Optional[str] = Field(\n        None, description=\"Name of the package to execute\"\n    )\n    parameters: Optional[List[str]] = Field(\n        None,\n        description=(\n            \"Command-line parameters passed to Python wheel task. Leave it empty if\"\n            \" `named_parameters` is not null.\"\n        ),\n        example=[\"--name=task\", \"one\", \"two\"],\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.RCranLibrary","title":"<code>RCranLibrary</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class RCranLibrary(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    package: str = Field(\n        ...,\n        description=\"The name of the CRAN package to install. This field is required.\",\n        example=\"geojson\",\n    )\n    repo: Optional[str] = Field(\n        None,\n        description=(\n            \"The repository where the package can be found. If not specified, the\"\n            \" default CRAN repo is used.\"\n        ),\n        example=\"https://my-repo.com\",\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.RepairHistory","title":"<code>RepairHistory</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class RepairHistory(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    repair_history: Optional[List[RepairHistoryItem]] = Field(\n        None, description=\"The repair history of the run.\"\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.RepairHistoryItem","title":"<code>RepairHistoryItem</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class RepairHistoryItem(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    end_time: Optional[int] = Field(\n        None, description=\"The end time of the (repaired) run.\", example=1625060863413\n    )\n    id: Optional[int] = Field(\n        None,\n        description=(\n            \"The ID of the repair. Only returned for the items that represent a repair\"\n            \" in `repair_history`.\"\n        ),\n        example=734650698524280,\n    )\n    start_time: Optional[int] = Field(\n        None, description=\"The start time of the (repaired) run.\", example=1625060460483\n    )\n    state: Optional[RunState] = None\n    task_run_ids: Optional[List[int]] = Field(\n        None,\n        description=(\n            \"The run IDs of the task runs that ran as part of this repair history item.\"\n        ),\n        example=[1106460542112844, 988297789683452],\n    )\n    type: Optional[Literal[\"ORIGINAL\", \"REPAIR\"]] = Field(\n        None,\n        description=(\n            \"The repair history item type. Indicates whether a run is the original run\"\n            \" or a repair run.\"\n        ),\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.RepairRunInput","title":"<code>RepairRunInput</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class RepairRunInput(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    latest_repair_id: Optional[int] = Field(\n        None,\n        description=(\n            \"The ID of the latest repair. This parameter is not required when repairing\"\n            \" a run for the first time, but must be provided on subsequent requests to\"\n            \" repair the same run.\"\n        ),\n        example=734650698524280,\n    )\n    rerun_all_failed_tasks: Optional[bool] = Field(\n        False,\n        description=(\n            \"If true, repair all failed tasks. Only one of rerun_tasks or\"\n            \" rerun_all_failed_tasks can be used.\"\n        ),\n    )\n    rerun_tasks: Optional[List[str]] = Field(\n        None,\n        description=\"The task keys of the task runs to repair.\",\n        example=[\"task0\", \"task1\"],\n    )\n    run_id: Optional[int] = Field(\n        None,\n        description=(\n            \"The job run ID of the run to repair. The run must not be in progress.\"\n        ),\n        example=455644833,\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.ResizeCause","title":"<code>ResizeCause</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <pre><code>* `AUTOSCALE`: Automatically resized based on load.\n</code></pre> <ul> <li><code>USER_REQUEST</code>: User requested a new size.</li> <li><code>AUTORECOVERY</code>: Autorecovery monitor resized the cluster after it lost a node.</li> </ul> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class ResizeCause(str, Enum):\n    \"\"\"\n        * `AUTOSCALE`: Automatically resized based on load.\n    * `USER_REQUEST`: User requested a new size.\n    * `AUTORECOVERY`: Autorecovery monitor resized the cluster after it lost a node.\n    \"\"\"\n\n    autoscale = \"AUTOSCALE\"\n    userrequest = \"USER_REQUEST\"\n    autorecovery = \"AUTORECOVERY\"\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.Run","title":"<code>Run</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class Run(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    attempt_number: Optional[int] = Field(\n        None,\n        description=(\n            \"The sequence number of this run attempt for a triggered job run. The\"\n            \" initial attempt of a run has an attempt_number of 0\\\\. If the initial run\"\n            \" attempt fails, and the job has a retry policy (`max_retries` \\\\&gt; 0),\"\n            \" subsequent runs are created with an `original_attempt_run_id` of the\"\n            \" original attempt\u2019s ID and an incrementing `attempt_number`. Runs are\"\n            \" retried only until they succeed, and the maximum `attempt_number` is the\"\n            \" same as the `max_retries` value for the job.\"\n        ),\n        example=0,\n    )\n    cleanup_duration: Optional[int] = Field(\n        None,\n        description=(\n            \"The time in milliseconds it took to terminate the cluster and clean up any\"\n            \" associated artifacts. The total duration of the run is the sum of the\"\n            \" setup_duration, the execution_duration, and the cleanup_duration.\"\n        ),\n        example=0,\n    )\n    cluster_instance: Optional[ClusterInstance] = Field(\n        None,\n        description=(\n            \"The cluster used for this run. If the run is specified to use a new\"\n            \" cluster, this field is set once the Jobs service has requested a cluster\"\n            \" for the run.\"\n        ),\n    )\n    cluster_spec: Optional[ClusterSpec] = Field(\n        None,\n        description=(\n            \"A snapshot of the job\u2019s cluster specification when this run was created.\"\n        ),\n    )\n    creator_user_name: Optional[str] = Field(\n        None,\n        description=(\n            \"The creator user name. This field won\u2019t be included in the response if the\"\n            \" user has already been deleted.\"\n        ),\n        example=\"user.name@databricks.com\",\n    )\n    end_time: Optional[int] = Field(\n        None,\n        description=(\n            \"The time at which this run ended in epoch milliseconds (milliseconds since\"\n            \" 1/1/1970 UTC). This field is set to 0 if the job is still running.\"\n        ),\n        example=1625060863413,\n    )\n    execution_duration: Optional[int] = Field(\n        None,\n        description=(\n            \"The time in milliseconds it took to execute the commands in the JAR or\"\n            \" notebook until they completed, failed, timed out, were cancelled, or\"\n            \" encountered an unexpected error.\"\n        ),\n        example=0,\n    )\n    git_source: Optional[GitSource1] = Field(\n        None,\n        description=(\n            \"This functionality is in Public Preview.\\n\\nAn optional specification for\"\n            \" a remote repository containing the notebooks used by this job's notebook\"\n            \" tasks.\"\n        ),\n        example={\n            \"git_branch\": \"main\",\n            \"git_provider\": \"gitHub\",\n            \"git_url\": \"https://github.com/databricks/databricks-cli\",\n        },\n    )\n    job_clusters: Optional[List[JobCluster]] = Field(\n        None,\n        description=(\n            \"A list of job cluster specifications that can be shared and reused by\"\n            \" tasks of this job. Libraries cannot be declared in a shared job cluster.\"\n            \" You must declare dependent libraries in task settings.\"\n        ),\n        example=[\n            {\n                \"job_cluster_key\": \"auto_scaling_cluster\",\n                \"new_cluster\": {\n                    \"autoscale\": {\"max_workers\": 16, \"min_workers\": 2},\n                    \"aws_attributes\": {\"availability\": \"SPOT\", \"zone_id\": \"us-west-2a\"},\n                    \"node_type_id\": \"i3.xlarge\",\n                    \"spark_conf\": {\"spark.speculation\": True},\n                    \"spark_version\": \"7.3.x-scala2.12\",\n                },\n            }\n        ],\n        max_items=100,\n    )\n    job_id: Optional[int] = Field(\n        None,\n        description=\"The canonical identifier of the job that contains this run.\",\n        example=11223344,\n    )\n    number_in_job: Optional[int] = Field(\n        None,\n        deprecated=True,\n        description=(\n            \"A unique identifier for this job run. This is set to the same value as\"\n            \" `run_id`.\"\n        ),\n        example=455644833,\n    )\n    original_attempt_run_id: Optional[int] = Field(\n        None,\n        description=(\n            \"If this run is a retry of a prior run attempt, this field contains the\"\n            \" run_id of the original attempt; otherwise, it is the same as the run_id.\"\n        ),\n        example=455644833,\n    )\n    overriding_parameters: Optional[RunParameters] = Field(\n        None, description=\"The parameters used for this run.\"\n    )\n    run_id: Optional[int] = Field(\n        None,\n        description=(\n            \"The canonical identifier of the run. This ID is unique across all runs of\"\n            \" all jobs.\"\n        ),\n        example=455644833,\n    )\n    run_name: Optional[str] = Field(\n        \"Untitled\",\n        description=(\n            \"An optional name for the run. The maximum allowed length is 4096 bytes in\"\n            \" UTF-8 encoding.\"\n        ),\n        example=\"A multitask job run\",\n    )\n    run_page_url: Optional[str] = Field(\n        None,\n        description=\"The URL to the detail page of the run.\",\n        example=\"https://my-workspace.cloud.databricks.com/#job/11223344/run/123\",\n    )\n    run_type: Optional[RunType] = None\n    schedule: Optional[CronSchedule] = Field(\n        None,\n        description=(\n            \"The cron schedule that triggered this run if it was triggered by the\"\n            \" periodic scheduler.\"\n        ),\n    )\n    setup_duration: Optional[int] = Field(\n        None,\n        description=(\n            \"The time it took to set up the cluster in milliseconds. For runs that run\"\n            \" on new clusters this is the cluster creation time, for runs that run on\"\n            \" existing clusters this time should be very short.\"\n        ),\n        example=0,\n    )\n    start_time: Optional[int] = Field(\n        None,\n        description=(\n            \"The time at which this run was started in epoch milliseconds (milliseconds\"\n            \" since 1/1/1970 UTC). This may not be the time when the job task starts\"\n            \" executing, for example, if the job is scheduled to run on a new cluster,\"\n            \" this is the time the cluster creation call is issued.\"\n        ),\n        example=1625060460483,\n    )\n    state: Optional[RunState] = Field(\n        None, description=\"The result and lifecycle states of the run.\"\n    )\n    tasks: Optional[List[RunTask]] = Field(\n        None,\n        description=(\n            \"The list of tasks performed by the run. Each task has its own `run_id`\"\n            \" which you can use to call `JobsGetOutput` to retrieve the run resutls.\"\n        ),\n        example=[\n            {\n                \"attempt_number\": 0,\n                \"cleanup_duration\": 0,\n                \"cluster_instance\": {\n                    \"cluster_id\": \"0923-164208-meows279\",\n                    \"spark_context_id\": \"4348585301701786933\",\n                },\n                \"description\": \"Ingests order data\",\n                \"end_time\": 1629989930171,\n                \"execution_duration\": 0,\n                \"job_cluster_key\": \"auto_scaling_cluster\",\n                \"libraries\": [{\"jar\": \"dbfs:/mnt/databricks/OrderIngest.jar\"}],\n                \"run_id\": 2112892,\n                \"run_page_url\": (\n                    \"https://my-workspace.cloud.databricks.com/#job/39832/run/20\"\n                ),\n                \"setup_duration\": 0,\n                \"spark_jar_task\": {\"main_class_name\": \"com.databricks.OrdersIngest\"},\n                \"start_time\": 1629989929660,\n                \"state\": {\n                    \"life_cycle_state\": \"INTERNAL_ERROR\",\n                    \"result_state\": \"FAILED\",\n                    \"state_message\": (\n                        \"Library installation failed for library due to user error.\"\n                        \" Error messages:\\n'Manage' permissions are required to install\"\n                        \" libraries on a cluster\"\n                    ),\n                    \"user_cancelled_or_timedout\": False,\n                },\n                \"task_key\": \"Orders_Ingest\",\n            },\n            {\n                \"attempt_number\": 0,\n                \"cleanup_duration\": 0,\n                \"cluster_instance\": {\"cluster_id\": \"0923-164208-meows279\"},\n                \"depends_on\": [\n                    {\"task_key\": \"Orders_Ingest\"},\n                    {\"task_key\": \"Sessionize\"},\n                ],\n                \"description\": \"Matches orders with user sessions\",\n                \"end_time\": 1629989930238,\n                \"execution_duration\": 0,\n                \"new_cluster\": {\n                    \"autoscale\": {\"max_workers\": 16, \"min_workers\": 2},\n                    \"aws_attributes\": {\"availability\": \"SPOT\", \"zone_id\": \"us-west-2a\"},\n                    \"node_type_id\": \"i3.xlarge\",\n                    \"spark_conf\": {\"spark.speculation\": True},\n                    \"spark_version\": \"7.3.x-scala2.12\",\n                },\n                \"notebook_task\": {\n                    \"notebook_path\": \"/Users/user.name@databricks.com/Match\",\n                    \"source\": \"WORKSPACE\",\n                },\n                \"run_id\": 2112897,\n                \"run_page_url\": (\n                    \"https://my-workspace.cloud.databricks.com/#job/39832/run/21\"\n                ),\n                \"setup_duration\": 0,\n                \"start_time\": 0,\n                \"state\": {\n                    \"life_cycle_state\": \"SKIPPED\",\n                    \"state_message\": \"An upstream task failed.\",\n                    \"user_cancelled_or_timedout\": False,\n                },\n                \"task_key\": \"Match\",\n            },\n            {\n                \"attempt_number\": 0,\n                \"cleanup_duration\": 0,\n                \"cluster_instance\": {\n                    \"cluster_id\": \"0923-164208-meows279\",\n                    \"spark_context_id\": \"4348585301701786933\",\n                },\n                \"description\": \"Extracts session data from events\",\n                \"end_time\": 1629989930144,\n                \"execution_duration\": 0,\n                \"existing_cluster_id\": \"0923-164208-meows279\",\n                \"libraries\": [{\"jar\": \"dbfs:/mnt/databricks/Sessionize.jar\"}],\n                \"run_id\": 2112902,\n                \"run_page_url\": (\n                    \"https://my-workspace.cloud.databricks.com/#job/39832/run/22\"\n                ),\n                \"setup_duration\": 0,\n                \"spark_jar_task\": {\"main_class_name\": \"com.databricks.Sessionize\"},\n                \"start_time\": 1629989929668,\n                \"state\": {\n                    \"life_cycle_state\": \"INTERNAL_ERROR\",\n                    \"result_state\": \"FAILED\",\n                    \"state_message\": (\n                        \"Library installation failed for library due to user error.\"\n                        \" Error messages:\\n'Manage' permissions are required to install\"\n                        \" libraries on a cluster\"\n                    ),\n                    \"user_cancelled_or_timedout\": False,\n                },\n                \"task_key\": \"Sessionize\",\n            },\n        ],\n        max_items=100,\n    )\n    trigger: Optional[TriggerType] = Field(\n        None, description=\"The type of trigger that fired this run.\"\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.RunLifeCycleState","title":"<code>RunLifeCycleState</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <pre><code>* `PENDING`: The run has been triggered. If there is not already an active run of the same job, the cluster and execution context are being prepared. If there is already an active run of the same job, the run immediately transitions into the `SKIPPED` state without preparing any resources.\n</code></pre> <ul> <li><code>RUNNING</code>: The task of this run is being executed.</li> <li><code>TERMINATING</code>: The task of this run has completed, and the cluster and execution context are being cleaned up.</li> <li><code>TERMINATED</code>: The task of this run has completed, and the cluster and execution context have been cleaned up. This state is terminal.</li> <li><code>SKIPPED</code>: This run was aborted because a previous run of the same job was already active. This state is terminal.</li> <li><code>INTERNAL_ERROR</code>: An exceptional state that indicates a failure in the Jobs service, such as network failure over a long period. If a run on a new cluster ends in the <code>INTERNAL_ERROR</code> state, the Jobs service terminates the cluster as soon as possible. This state is terminal.</li> <li><code>BLOCKED</code>: The run is blocked on an upstream dependency.</li> <li><code>WAITING_FOR_RETRY</code>: The run is waiting for a retry.</li> </ul> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class RunLifeCycleState(str, Enum):\n    \"\"\"\n        * `PENDING`: The run has been triggered. If there is not already an active run of the same job, the cluster and execution context are being prepared. If there is already an active run of the same job, the run immediately transitions into the `SKIPPED` state without preparing any resources.\n    * `RUNNING`: The task of this run is being executed.\n    * `TERMINATING`: The task of this run has completed, and the cluster and execution context are being cleaned up.\n    * `TERMINATED`: The task of this run has completed, and the cluster and execution context have been cleaned up. This state is terminal.\n    * `SKIPPED`: This run was aborted because a previous run of the same job was already active. This state is terminal.\n    * `INTERNAL_ERROR`: An exceptional state that indicates a failure in the Jobs service, such as network failure over a long period. If a run on a new cluster ends in the `INTERNAL_ERROR` state, the Jobs service terminates the cluster as soon as possible. This state is terminal.\n    * `BLOCKED`: The run is blocked on an upstream dependency.\n    * `WAITING_FOR_RETRY`: The run is waiting for a retry.\n    \"\"\"\n\n    terminated = \"TERMINATED\"\n    pending = \"PENDING\"\n    running = \"RUNNING\"\n    terminating = \"TERMINATING\"\n    skipped = \"SKIPPED\"\n    internalerror = \"INTERNAL_ERROR\"\n    blocked = \"BLOCKED\"\n    waitingforretry = \"WAITING_FOR_RETRY\"\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.RunNowInput","title":"<code>RunNowInput</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class RunNowInput(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    idempotency_token: Optional[str] = Field(\n        None,\n        description=(\n            \"An optional token to guarantee the idempotency of job run requests. If a\"\n            \" run with the provided token already exists, the request does not create a\"\n            \" new run but returns the ID of the existing run instead. If a run with the\"\n            \" provided token is deleted, an error is returned.\\n\\nIf you specify the\"\n            \" idempotency token, upon failure you can retry until the request succeeds.\"\n            \" Databricks guarantees that exactly one run is launched with that\"\n            \" idempotency token.\\n\\nThis token must have at most 64 characters.\\n\\nFor\"\n            \" more information, see [How to ensure idempotency for\"\n            \" jobs](https://kb.databricks.com/jobs/jobs-idempotency.html).\"\n        ),\n        example=\"8f018174-4792-40d5-bcbc-3e6a527352c8\",\n    )\n    job_id: Optional[int] = Field(\n        None, description=\"The ID of the job to be executed\", example=11223344\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.RunParameters","title":"<code>RunParameters</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class RunParameters(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    dbt_commands: Optional[List] = Field(\n        None,\n        description=(\n            \"An array of commands to execute for jobs with the dbt task, for example\"\n            ' `\"dbt_commands\": [\"dbt deps\", \"dbt seed\", \"dbt run\"]`'\n        ),\n        example=[\"dbt deps\", \"dbt seed\", \"dbt run\"],\n    )\n    jar_params: Optional[List[str]] = Field(\n        None,\n        description=(\n            \"A list of parameters for jobs with Spark JAR tasks, for example\"\n            ' `\"jar_params\": [\"john doe\", \"35\"]`. The parameters are used to invoke the'\n            \" main function of the main class specified in the Spark JAR task. If not\"\n            \" specified upon `run-now`, it defaults to an empty list. jar_params cannot\"\n            \" be specified in conjunction with notebook_params. The JSON representation\"\n            ' of this field (for example `{\"jar_params\":[\"john doe\",\"35\"]}`) cannot'\n            \" exceed 10,000 bytes.\\n\\nUse [Task parameter\"\n            \" variables](https://docs.databricks.com/jobs.html#parameter-variables) to\"\n            \" set parameters containing information about job runs.\"\n        ),\n        example=[\"john\", \"doe\", \"35\"],\n    )\n    notebook_params: Optional[Dict[str, Any]] = Field(\n        None,\n        description=(\n            \"A map from keys to values for jobs with notebook task, for example\"\n            ' `\"notebook_params\": {\"name\": \"john doe\", \"age\": \"35\"}`. The map is passed'\n            \" to the notebook and is accessible through the\"\n            \" [dbutils.widgets.get](https://docs.databricks.com/dev-tools/databricks-utils.html#dbutils-widgets)\"\n            \" function.\\n\\nIf not specified upon `run-now`, the triggered run uses the\"\n            \" job\u2019s base parameters.\\n\\nnotebook_params cannot be specified in\"\n            \" conjunction with jar_params.\\n\\nUse [Task parameter\"\n            \" variables](https://docs.databricks.com/jobs.html#parameter-variables) to\"\n            \" set parameters containing information about job runs.\\n\\nThe JSON\"\n            \" representation of this field (for example\"\n            ' `{\"notebook_params\":{\"name\":\"john doe\",\"age\":\"35\"}}`) cannot exceed'\n            \" 10,000 bytes.\"\n        ),\n        example={\"age\": \"35\", \"name\": \"john doe\"},\n    )\n    pipeline_params: Optional[PipelineParams] = None\n    python_named_params: Optional[Dict[str, Any]] = Field(\n        None,\n        description=(\n            \"A map from keys to values for jobs with Python wheel task, for example\"\n            ' `\"python_named_params\": {\"name\": \"task\", \"data\":'\n            ' \"dbfs:/path/to/data.json\"}`.'\n        ),\n        example={\"data\": \"dbfs:/path/to/data.json\", \"name\": \"task\"},\n    )\n    python_params: Optional[List[str]] = Field(\n        None,\n        description=(\n            \"A list of parameters for jobs with Python tasks, for example\"\n            ' `\"python_params\": [\"john doe\", \"35\"]`. The parameters are passed to'\n            \" Python file as command-line parameters. If specified upon `run-now`, it\"\n            \" would overwrite the parameters specified in job setting. The JSON\"\n            ' representation of this field (for example `{\"python_params\":[\"john'\n            ' doe\",\"35\"]}`) cannot exceed 10,000 bytes.\\n\\nUse [Task parameter'\n            \" variables](https://docs.databricks.com/jobs.html#parameter-variables) to\"\n            \" set parameters containing information about job\"\n            \" runs.\\n\\nImportant\\n\\nThese parameters accept only Latin characters\"\n            \" (ASCII character set). Using non-ASCII characters returns an error.\"\n            \" Examples of invalid, non-ASCII characters are Chinese, Japanese kanjis,\"\n            \" and emojis.\"\n        ),\n        example=[\"john doe\", \"35\"],\n    )\n    spark_submit_params: Optional[List[str]] = Field(\n        None,\n        description=(\n            \"A list of parameters for jobs with spark submit task, for example\"\n            ' `\"spark_submit_params\": [\"--class\",'\n            ' \"org.apache.spark.examples.SparkPi\"]`. The parameters are passed to'\n            \" spark-submit script as command-line parameters. If specified upon\"\n            \" `run-now`, it would overwrite the parameters specified in job setting.\"\n            \" The JSON representation of this field (for example\"\n            ' `{\"python_params\":[\"john doe\",\"35\"]}`) cannot exceed 10,000 bytes.\\n\\nUse'\n            \" [Task parameter\"\n            \" variables](https://docs.databricks.com/jobs.html#parameter-variables) to\"\n            \" set parameters containing information about job\"\n            \" runs.\\n\\nImportant\\n\\nThese parameters accept only Latin characters\"\n            \" (ASCII character set). Using non-ASCII characters returns an error.\"\n            \" Examples of invalid, non-ASCII characters are Chinese, Japanese kanjis,\"\n            \" and emojis.\"\n        ),\n        example=[\"--class\", \"org.apache.spark.examples.SparkPi\"],\n    )\n    sql_params: Optional[Dict[str, Any]] = Field(\n        None,\n        description=(\n            'A map from keys to values for SQL tasks, for example `\"sql_params\":'\n            ' {\"name\": \"john doe\", \"age\": \"35\"}`. The SQL alert task does not support'\n            \" custom parameters.\"\n        ),\n        example={\"age\": \"35\", \"name\": \"john doe\"},\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.RunResultState","title":"<code>RunResultState</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <pre><code>* `SUCCESS`: The task completed successfully.\n</code></pre> <ul> <li><code>FAILED</code>: The task completed with an error.</li> <li><code>TIMEDOUT</code>: The run was stopped after reaching the timeout.</li> <li><code>CANCELED</code>: The run was canceled at user request.</li> </ul> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class RunResultState(str, Enum):\n    \"\"\"\n        * `SUCCESS`: The task completed successfully.\n    * `FAILED`: The task completed with an error.\n    * `TIMEDOUT`: The run was stopped after reaching the timeout.\n    * `CANCELED`: The run was canceled at user request.\n    \"\"\"\n\n    success = \"SUCCESS\"\n    failed = \"FAILED\"\n    timedout = \"TIMEDOUT\"\n    canceled = \"CANCELED\"\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.RunState","title":"<code>RunState</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> <p>The result and lifecycle state of the run.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class RunState(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n\n    The result and lifecycle state of the run.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    life_cycle_state: Optional[RunLifeCycleState] = Field(\n        None,\n        description=(\n            \"A description of a run\u2019s current location in the run lifecycle. This field\"\n            \" is always available in the response.\"\n        ),\n    )\n    result_state: Optional[RunResultState] = None\n    state_message: Optional[str] = Field(\n        None,\n        description=(\n            \"A descriptive message for the current state. This field is unstructured,\"\n            \" and its exact format is subject to change.\"\n        ),\n        example=\"\",\n    )\n    user_cancelled_or_timedout: Optional[bool] = Field(\n        None,\n        description=(\n            \"Whether a run was canceled manually by a user or by the scheduler because\"\n            \" the run timed out.\"\n        ),\n        example=False,\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.RunSubmitSettings","title":"<code>RunSubmitSettings</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class RunSubmitSettings(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    git_source: Optional[GitSource1] = Field(\n        None,\n        description=(\n            \"This functionality is in Public Preview.\\n\\nAn optional specification for\"\n            \" a remote repository containing the notebooks used by this job's notebook\"\n            \" tasks.\"\n        ),\n        example={\n            \"git_branch\": \"main\",\n            \"git_provider\": \"gitHub\",\n            \"git_url\": \"https://github.com/databricks/databricks-cli\",\n        },\n    )\n    idempotency_token: Optional[str] = Field(\n        None,\n        description=(\n            \"An optional token that can be used to guarantee the idempotency of job run\"\n            \" requests. If a run with the provided token already exists, the request\"\n            \" does not create a new run but returns the ID of the existing run instead.\"\n            \" If a run with the provided token is deleted, an error is returned.\\n\\nIf\"\n            \" you specify the idempotency token, upon failure you can retry until the\"\n            \" request succeeds. Databricks guarantees that exactly one run is launched\"\n            \" with that idempotency token.\\n\\nThis token must have at most 64\"\n            \" characters.\\n\\nFor more information, see [How to ensure idempotency for\"\n            \" jobs](https://kb.databricks.com/jobs/jobs-idempotency.html).\"\n        ),\n        example=\"8f018174-4792-40d5-bcbc-3e6a527352c8\",\n    )\n    run_name: Optional[str] = Field(\n        None,\n        description=\"An optional name for the run. The default value is `Untitled`.\",\n        example=\"A multitask job run\",\n    )\n    tasks: Optional[List[RunSubmitTaskSettings]] = Field(\n        None,\n        example=[\n            {\n                \"depends_on\": [],\n                \"description\": \"Extracts session data from events\",\n                \"existing_cluster_id\": \"0923-164208-meows279\",\n                \"libraries\": [{\"jar\": \"dbfs:/mnt/databricks/Sessionize.jar\"}],\n                \"spark_jar_task\": {\n                    \"main_class_name\": \"com.databricks.Sessionize\",\n                    \"parameters\": [\"--data\", \"dbfs:/path/to/data.json\"],\n                },\n                \"task_key\": \"Sessionize\",\n                \"timeout_seconds\": 86400,\n            },\n            {\n                \"depends_on\": [],\n                \"description\": \"Ingests order data\",\n                \"existing_cluster_id\": \"0923-164208-meows279\",\n                \"libraries\": [{\"jar\": \"dbfs:/mnt/databricks/OrderIngest.jar\"}],\n                \"spark_jar_task\": {\n                    \"main_class_name\": \"com.databricks.OrdersIngest\",\n                    \"parameters\": [\"--data\", \"dbfs:/path/to/order-data.json\"],\n                },\n                \"task_key\": \"Orders_Ingest\",\n                \"timeout_seconds\": 86400,\n            },\n            {\n                \"depends_on\": [\n                    {\"task_key\": \"Orders_Ingest\"},\n                    {\"task_key\": \"Sessionize\"},\n                ],\n                \"description\": \"Matches orders with user sessions\",\n                \"new_cluster\": {\n                    \"autoscale\": {\"max_workers\": 16, \"min_workers\": 2},\n                    \"aws_attributes\": {\"availability\": \"SPOT\", \"zone_id\": \"us-west-2a\"},\n                    \"node_type_id\": \"i3.xlarge\",\n                    \"spark_conf\": {\"spark.speculation\": True},\n                    \"spark_version\": \"7.3.x-scala2.12\",\n                },\n                \"notebook_task\": {\n                    \"base_parameters\": {\"age\": \"35\", \"name\": \"John Doe\"},\n                    \"notebook_path\": \"/Users/user.name@databricks.com/Match\",\n                    \"source\": \"WORKSPACE\",\n                },\n                \"task_key\": \"Match\",\n                \"timeout_seconds\": 86400,\n            },\n        ],\n        max_items=100,\n    )\n    timeout_seconds: Optional[int] = Field(\n        None,\n        description=(\n            \"An optional timeout applied to each run of this job. The default behavior\"\n            \" is to have no timeout.\"\n        ),\n        example=86400,\n    )\n    webhook_notifications: Optional[WebhookNotifications] = Field(\n        None,\n        description=(\n            \"A collection of system notification IDs to notify when runs of this job\"\n            \" begin or complete. The default behavior is to not send any system\"\n            \" notifications.\"\n        ),\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.RunSubmitTaskSettings","title":"<code>RunSubmitTaskSettings</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class RunSubmitTaskSettings(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    dbt_task: Optional[DbtTask] = Field(\n        None,\n        description=(\n            \"If dbt_task, indicates that this must execute a dbt task. It requires both\"\n            \" Databricks SQL and the ability to use a serverless or a pro SQL\"\n            \" warehouse.\"\n        ),\n    )\n    depends_on: Optional[TaskDependencies] = None\n    existing_cluster_id: Optional[str] = Field(\n        None,\n        description=(\n            \"If existing_cluster_id, the ID of an existing cluster that is used for all\"\n            \" runs of this task. When running tasks on an existing cluster, you may\"\n            \" need to manually restart the cluster if it stops responding. We suggest\"\n            \" running jobs on new clusters for greater reliability.\"\n        ),\n        example=\"0923-164208-meows279\",\n    )\n    libraries: Optional[List[Library]] = Field(\n        None,\n        description=(\n            \"An optional list of libraries to be installed on the cluster that executes\"\n            \" the task. The default value is an empty list.\"\n        ),\n    )\n    new_cluster: Optional[NewCluster] = Field(\n        None,\n        description=(\n            \"If new_cluster, a description of a cluster that is created for each run.\"\n        ),\n    )\n    notebook_task: Optional[NotebookTask] = Field(\n        None,\n        description=(\n            \"If notebook_task, indicates that this task must run a notebook. This field\"\n            \" may not be specified in conjunction with spark_jar_task.\"\n        ),\n    )\n    pipeline_task: Optional[PipelineTask] = Field(\n        None,\n        description=(\n            \"If pipeline_task, indicates that this task must execute a Pipeline.\"\n        ),\n    )\n    python_wheel_task: Optional[PythonWheelTask] = Field(\n        None,\n        description=(\n            \"If python_wheel_task, indicates that this job must execute a PythonWheel.\"\n        ),\n    )\n    spark_jar_task: Optional[SparkJarTask] = Field(\n        None, description=\"If spark_jar_task, indicates that this task must run a JAR.\"\n    )\n    spark_python_task: Optional[SparkPythonTask] = Field(\n        None,\n        description=(\n            \"If spark_python_task, indicates that this task must run a Python file.\"\n        ),\n    )\n    spark_submit_task: Optional[SparkSubmitTask] = Field(\n        None,\n        description=(\n            \"If spark_submit_task, indicates that this task must be launched by the\"\n            \" spark submit script.\"\n        ),\n    )\n    sql_task: Optional[SqlTask] = Field(\n        None,\n        description=(\n            \"If sql_task, indicates that this job must execute a SQL task. It requires\"\n            \" both Databricks SQL and a serverless or a pro SQL warehouse.\"\n        ),\n    )\n    task_key: TaskKey\n    timeout_seconds: Optional[int] = Field(\n        None,\n        description=(\n            \"An optional timeout applied to each run of this job task. The default\"\n            \" behavior is to have no timeout.\"\n        ),\n        example=86400,\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.RunTask","title":"<code>RunTask</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class RunTask(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    attempt_number: Optional[int] = Field(\n        None,\n        description=(\n            \"The sequence number of this run attempt for a triggered job run. The\"\n            \" initial attempt of a run has an attempt_number of 0\\\\. If the initial run\"\n            \" attempt fails, and the job has a retry policy (`max_retries` \\\\&gt; 0),\"\n            \" subsequent runs are created with an `original_attempt_run_id` of the\"\n            \" original attempt\u2019s ID and an incrementing `attempt_number`. Runs are\"\n            \" retried only until they succeed, and the maximum `attempt_number` is the\"\n            \" same as the `max_retries` value for the job.\"\n        ),\n        example=0,\n    )\n    cleanup_duration: Optional[int] = Field(\n        None,\n        description=(\n            \"The time in milliseconds it took to terminate the cluster and clean up any\"\n            \" associated artifacts. The total duration of the run is the sum of the\"\n            \" setup_duration, the execution_duration, and the cleanup_duration.\"\n        ),\n        example=0,\n    )\n    cluster_instance: Optional[ClusterInstance] = Field(\n        None,\n        description=(\n            \"The cluster used for this run. If the run is specified to use a new\"\n            \" cluster, this field is set once the Jobs service has requested a cluster\"\n            \" for the run.\"\n        ),\n    )\n    dbt_task: Optional[DbtTask] = Field(\n        None,\n        description=(\n            \"If dbt_task, indicates that this must execute a dbt task. It requires both\"\n            \" Databricks SQL and the ability to use a serverless or a pro SQL\"\n            \" warehouse.\"\n        ),\n    )\n    depends_on: Optional[TaskDependencies] = None\n    description: Optional[TaskDescription] = None\n    end_time: Optional[int] = Field(\n        None,\n        description=(\n            \"The time at which this run ended in epoch milliseconds (milliseconds since\"\n            \" 1/1/1970 UTC). This field is set to 0 if the job is still running.\"\n        ),\n        example=1625060863413,\n    )\n    execution_duration: Optional[int] = Field(\n        None,\n        description=(\n            \"The time in milliseconds it took to execute the commands in the JAR or\"\n            \" notebook until they completed, failed, timed out, were cancelled, or\"\n            \" encountered an unexpected error.\"\n        ),\n        example=0,\n    )\n    existing_cluster_id: Optional[str] = Field(\n        None,\n        description=(\n            \"If existing_cluster_id, the ID of an existing cluster that is used for all\"\n            \" runs of this job. When running jobs on an existing cluster, you may need\"\n            \" to manually restart the cluster if it stops responding. We suggest\"\n            \" running jobs on new clusters for greater reliability.\"\n        ),\n    )\n    git_source: Optional[GitSource1] = Field(\n        None,\n        description=(\n            \"This functionality is in Public Preview.\\n\\nAn optional specification for\"\n            \" a remote repository containing the notebooks used by this job's notebook\"\n            \" tasks.\"\n        ),\n        example={\n            \"git_branch\": \"main\",\n            \"git_provider\": \"gitHub\",\n            \"git_url\": \"https://github.com/databricks/databricks-cli\",\n        },\n    )\n    libraries: Optional[List[Library]] = Field(\n        None,\n        description=(\n            \"An optional list of libraries to be installed on the cluster that executes\"\n            \" the job. The default value is an empty list.\"\n        ),\n    )\n    new_cluster: Optional[NewCluster] = Field(\n        None,\n        description=(\n            \"If new_cluster, a description of a cluster that is created for each run.\"\n        ),\n    )\n    notebook_task: Optional[NotebookTask] = Field(\n        None,\n        description=(\n            \"If notebook_task, indicates that this job must run a notebook. This field\"\n            \" may not be specified in conjunction with spark_jar_task.\"\n        ),\n    )\n    pipeline_task: Optional[PipelineTask] = Field(\n        None,\n        description=(\n            \"If pipeline_task, indicates that this job must execute a Pipeline.\"\n        ),\n    )\n    python_wheel_task: Optional[PythonWheelTask] = Field(\n        None,\n        description=(\n            \"If python_wheel_task, indicates that this job must execute a PythonWheel.\"\n        ),\n    )\n    run_id: Optional[int] = Field(\n        None, description=\"The ID of the task run.\", example=99887766\n    )\n    setup_duration: Optional[int] = Field(\n        None,\n        description=(\n            \"The time it took to set up the cluster in milliseconds. For runs that run\"\n            \" on new clusters this is the cluster creation time, for runs that run on\"\n            \" existing clusters this time should be very short.\"\n        ),\n        example=0,\n    )\n    spark_jar_task: Optional[SparkJarTask] = Field(\n        None, description=\"If spark_jar_task, indicates that this job must run a JAR.\"\n    )\n    spark_python_task: Optional[SparkPythonTask] = Field(\n        None,\n        description=(\n            \"If spark_python_task, indicates that this job must run a Python file.\"\n        ),\n    )\n    spark_submit_task: Optional[SparkSubmitTask] = Field(\n        None,\n        description=(\n            \"If spark_submit_task, indicates that this job must be launched by the\"\n            \" spark submit script.\"\n        ),\n    )\n    sql_task: Optional[SqlTask] = Field(\n        None,\n        description=(\n            \"If sql_task, indicates that this job must execute a SQL task. It requires\"\n            \" both Databricks SQL and a serverless or a pro SQL warehouse.\"\n        ),\n    )\n    start_time: Optional[int] = Field(\n        None,\n        description=(\n            \"The time at which this run was started in epoch milliseconds (milliseconds\"\n            \" since 1/1/1970 UTC). This may not be the time when the job task starts\"\n            \" executing, for example, if the job is scheduled to run on a new cluster,\"\n            \" this is the time the cluster creation call is issued.\"\n        ),\n        example=1625060460483,\n    )\n    state: Optional[RunState] = Field(\n        None, description=\"The result and lifecycle states of the run.\"\n    )\n    task_key: Optional[TaskKey] = None\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.RunType","title":"<code>RunType</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <pre><code>The type of the run.\n</code></pre> <ul> <li><code>JOB_RUN</code> - Normal job run. A run created with Run now.</li> <li><code>WORKFLOW_RUN</code> - Workflow run. A run created with dbutils.notebook.run.</li> <li><code>SUBMIT_RUN</code> - Submit run. A run created with Run Submit.</li> </ul> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class RunType(str, Enum):\n    \"\"\"\n        The type of the run.\n    * `JOB_RUN` \\- Normal job run. A run created with [Run now](https://docs.databricks.com/dev-tools/api/latest/jobs.html#operation/JobsRunNow).\n    * `WORKFLOW_RUN` \\- Workflow run. A run created with [dbutils.notebook.run](https://docs.databricks.com/dev-tools/databricks-utils.html#dbutils-workflow).\n    * `SUBMIT_RUN` \\- Submit run. A run created with [Run Submit](https://docs.databricks.com/dev-tools/api/latest/jobs.html#operation/JobsRunsSubmit).\n    \"\"\"\n\n    jobrun = \"JOB_RUN\"\n    workflowrun = \"WORKFLOW_RUN\"\n    submitrun = \"SUBMIT_RUN\"\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.RuntimeEngine","title":"<code>RuntimeEngine</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <p>Decides which runtime engine to be use, e.g. Standard vs. Photon. If unspecified, the runtime engine is inferred from spark_version.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class RuntimeEngine(str, Enum):\n    \"\"\"\n    Decides which runtime engine to be use, e.g. Standard vs. Photon. If unspecified, the runtime engine is inferred from spark_version.\n    \"\"\"\n\n    standard = \"STANDARD\"\n    photon = \"PHOTON\"\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.S3StorageInfo","title":"<code>S3StorageInfo</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class S3StorageInfo(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    canned_acl: Optional[str] = Field(\n        None,\n        description=(\n            \"(Optional) Set canned access control list. For example:\"\n            \" `bucket-owner-full-control`. If canned_acl is set, the cluster instance\"\n            \" profile must have `s3:PutObjectAcl` permission on the destination bucket\"\n            \" and prefix. The full list of possible canned ACLs can be found at\"\n            \" &lt;https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl&gt;.\"\n            \" By default only the object owner gets full control. If you are using\"\n            \" cross account role for writing data, you may want to set\"\n            \" `bucket-owner-full-control` to make bucket owner able to read the logs.\"\n        ),\n    )\n    destination: Optional[str] = Field(\n        None,\n        description=(\n            \"S3 destination. For example: `s3://my-bucket/some-prefix` You must\"\n            \" configure the cluster with an instance profile and the instance profile\"\n            \" must have write access to the destination. You _cannot_ use AWS keys.\"\n        ),\n    )\n    enable_encryption: Optional[bool] = Field(\n        None, description=\"(Optional)Enable server side encryption, `false` by default.\"\n    )\n    encryption_type: Optional[str] = Field(\n        None,\n        description=(\n            \"(Optional) The encryption type, it could be `sse-s3` or `sse-kms`. It is\"\n            \" used only when encryption is enabled and the default type is `sse-s3`.\"\n        ),\n    )\n    endpoint: Optional[str] = Field(\n        None,\n        description=(\n            \"S3 endpoint. For example: `https://s3-us-west-2.amazonaws.com`. Either\"\n            \" region or endpoint must be set. If both are set, endpoint is used.\"\n        ),\n    )\n    kms_key: Optional[str] = Field(\n        None,\n        description=(\n            \"(Optional) KMS key used if encryption is enabled and encryption type is\"\n            \" set to `sse-kms`.\"\n        ),\n    )\n    region: Optional[str] = Field(\n        None,\n        description=(\n            \"S3 region. For example: `us-west-2`. Either region or endpoint must be\"\n            \" set. If both are set, endpoint is used.\"\n        ),\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.ServicePrincipalName","title":"<code>ServicePrincipalName</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class ServicePrincipalName(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    __root__: str = Field(\n        ...,\n        description=\"Name of an Azure service principal.\",\n        example=\"9f0621ee-b52b-11ea-b3de-0242ac130004\",\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.SparkConfPair","title":"<code>SparkConfPair</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> <p>An arbitrary object where the object key is a configuration propery name and the value is a configuration property value.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class SparkConfPair(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n\n    An arbitrary object where the object key is a configuration propery name and the value is a configuration property value.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n\n        allow_mutation = False\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.SparkEnvPair","title":"<code>SparkEnvPair</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> <p>An arbitrary object where the object key is an environment variable name and the value is an environment variable value.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class SparkEnvPair(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n\n    An arbitrary object where the object key is an environment variable name and the value is an environment variable value.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n\n        allow_mutation = False\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.SparkJarTask","title":"<code>SparkJarTask</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class SparkJarTask(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    jar_uri: Optional[str] = Field(\n        None,\n        deprecated=True,\n        description=(\n            \"Deprecated since 04/2016\\\\. Provide a `jar` through the `libraries` field\"\n            \" instead. For an example, see\"\n            \" [Create](https://docs.databricks.com/dev-tools/api/latest/jobs.html#operation/JobsCreate).\"\n        ),\n    )\n    main_class_name: Optional[str] = Field(\n        None,\n        description=(\n            \"The full name of the class containing the main method to be executed. This\"\n            \" class must be contained in a JAR provided as a library.\\n\\nThe code must\"\n            \" use `SparkContext.getOrCreate` to obtain a Spark context; otherwise, runs\"\n            \" of the job fail.\"\n        ),\n        example=\"com.databricks.ComputeModels\",\n    )\n    parameters: Optional[List[str]] = Field(\n        None,\n        description=(\n            \"Parameters passed to the main method.\\n\\nUse [Task parameter\"\n            \" variables](https://docs.databricks.com/jobs.html#parameter-variables) to\"\n            \" set parameters containing information about job runs.\"\n        ),\n        example=[\"--data\", \"dbfs:/path/to/data.json\"],\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.SparkNode","title":"<code>SparkNode</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class SparkNode(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    host_private_ip: Optional[str] = Field(\n        None, description=\"The private IP address of the host instance.\"\n    )\n    instance_id: Optional[str] = Field(\n        None,\n        description=(\n            \"Globally unique identifier for the host instance from the cloud provider.\"\n        ),\n    )\n    node_aws_attributes: Optional[SparkNodeAwsAttributes] = Field(\n        None, description=\"Attributes specific to AWS for a Spark node.\"\n    )\n    node_id: Optional[str] = Field(\n        None, description=\"Globally unique identifier for this node.\"\n    )\n    private_ip: Optional[str] = Field(\n        None,\n        description=(\n            \"Private IP address (typically a 10.x.x.x address) of the Spark node. This\"\n            \" is different from the private IP address of the host instance.\"\n        ),\n    )\n    public_dns: Optional[str] = Field(\n        None,\n        description=(\n            \"Public DNS address of this node. This address can be used to access the\"\n            \" Spark JDBC server on the driver node. To communicate with the JDBC\"\n            \" server, traffic must be manually authorized by adding security group\"\n            \" rules to the \u201cworker-unmanaged\u201d security group via the AWS console.\"\n        ),\n    )\n    start_timestamp: Optional[int] = Field(\n        None,\n        description=\"The timestamp (in millisecond) when the Spark node is launched.\",\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.SparkNodeAwsAttributes","title":"<code>SparkNodeAwsAttributes</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class SparkNodeAwsAttributes(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    is_spot: Optional[bool] = Field(\n        None, description=\"Whether this node is on an Amazon spot instance.\"\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.SparkPythonTask","title":"<code>SparkPythonTask</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class SparkPythonTask(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    parameters: Optional[List[str]] = Field(\n        None,\n        description=(\n            \"Command line parameters passed to the Python file.\\n\\nUse [Task parameter\"\n            \" variables](https://docs.databricks.com/jobs.html#parameter-variables) to\"\n            \" set parameters containing information about job runs.\"\n        ),\n        example=[\"--data\", \"dbfs:/path/to/data.json\"],\n    )\n    python_file: str = Field(\n        ...,\n        description=(\n            \"The Python file to be executed. Cloud file URIs (such as dbfs:/, s3:/,\"\n            \" adls:/, gcs:/) and workspace paths are supported. For python files stored\"\n            \" in the Databricks workspace, the path must be absolute and begin with\"\n            \" `/Repos`. This field is required.\"\n        ),\n        example=\"dbfs:/path/to/file.py\",\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.SparkSubmitTask","title":"<code>SparkSubmitTask</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class SparkSubmitTask(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    parameters: Optional[List[str]] = Field(\n        None,\n        description=(\n            \"Command-line parameters passed to spark submit.\\n\\nUse [Task parameter\"\n            \" variables](https://docs.databricks.com/jobs.html#parameter-variables) to\"\n            \" set parameters containing information about job runs.\"\n        ),\n        example=[\n            \"--class\",\n            \"org.apache.spark.examples.SparkPi\",\n            \"dbfs:/path/to/examples.jar\",\n            \"10\",\n        ],\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.SparkVersion","title":"<code>SparkVersion</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class SparkVersion(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    key: Optional[str] = Field(\n        None,\n        description=(\n            \"[Databricks Runtime\"\n            \" version](https://docs.databricks.com/dev-tools/api/latest/index.html#programmatic-version)\"\n            \" key, for example `7.3.x-scala2.12`. The value that must be provided as\"\n            \" the `spark_version` when creating a new cluster. The exact runtime\"\n            \" version may change over time for a \u201cwildcard\u201d version (that is,\"\n            \" `7.3.x-scala2.12` is a \u201cwildcard\u201d version) with minor bug fixes.\"\n        ),\n    )\n    name: Optional[str] = Field(\n        None,\n        description=(\n            \"A descriptive name for the runtime version, for example \u201cDatabricks\"\n            \" Runtime 7.3 LTS\u201d.\"\n        ),\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.SqlAlertOutput","title":"<code>SqlAlertOutput</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class SqlAlertOutput(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    output_link: Optional[str] = Field(\n        None, description=\"The link to find the output results.\"\n    )\n    query_text: Optional[str] = Field(\n        None,\n        description=(\n            \"The text of the SQL query. Can Run permission of the SQL query associated\"\n            \" with the SQL alert is required to view this field.\"\n        ),\n    )\n    sql_statements: Optional[SqlStatementOutput] = Field(\n        None, description=\"Information about SQL statements executed in the run.\"\n    )\n    warehouse_id: Optional[str] = Field(\n        None, description=\"The canonical identifier of the SQL warehouse.\"\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.SqlDashboardOutput","title":"<code>SqlDashboardOutput</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class SqlDashboardOutput(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    widgets: Optional[SqlDashboardWidgetOutput] = Field(\n        None,\n        description=(\n            \"Widgets executed in the run. Only SQL query based widgets are listed.\"\n        ),\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.SqlDashboardWidgetOutput","title":"<code>SqlDashboardWidgetOutput</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class SqlDashboardWidgetOutput(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    end_time: Optional[int] = Field(\n        None,\n        description=(\n            \"Time (in epoch milliseconds) when execution of the SQL widget ends.\"\n        ),\n    )\n    error: Optional[SqlOutputError] = Field(\n        None, description=\"The information about the error when execution fails.\"\n    )\n    output_link: Optional[str] = Field(\n        None, description=\"The link to find the output results.\"\n    )\n    start_time: Optional[int] = Field(\n        None,\n        description=(\n            \"Time (in epoch milliseconds) when execution of the SQL widget starts.\"\n        ),\n    )\n    status: Optional[\n        Literal[\"PENDING\", \"RUNNING\", \"SUCCESS\", \"FAILED\", \"CANCELLED\"]\n    ] = Field(None, description=\"The execution status of the SQL widget.\")\n    widget_id: Optional[str] = Field(\n        None, description=\"The canonical identifier of the SQL widget.\"\n    )\n    widget_title: Optional[str] = Field(\n        None, description=\"The title of the SQL widget.\"\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.SqlOutput","title":"<code>SqlOutput</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class SqlOutput(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    alert_output: Optional[SqlAlertOutput] = Field(\n        None, description=\"The output of a SQL alert task, if available.\"\n    )\n    dashboard_output: Optional[SqlDashboardOutput] = Field(\n        None, description=\"The output of a SQL dashboard task, if available.\"\n    )\n    query_output: Optional[SqlQueryOutput] = Field(\n        None, description=\"The output of a SQL query task, if available.\"\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.SqlOutputError","title":"<code>SqlOutputError</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class SqlOutputError(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    message: Optional[str] = Field(\n        None, description=\"The error message when execution fails.\"\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.SqlQueryOutput","title":"<code>SqlQueryOutput</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class SqlQueryOutput(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    output_link: Optional[str] = Field(\n        None, description=\"The link to find the output results.\"\n    )\n    query_text: Optional[str] = Field(\n        None,\n        description=(\n            \"The text of the SQL query. Can Run permission of the SQL query is required\"\n            \" to view this field.\"\n        ),\n    )\n    sql_statements: Optional[SqlStatementOutput] = Field(\n        None, description=\"Information about SQL statements executed in the run.\"\n    )\n    warehouse_id: Optional[str] = Field(\n        None, description=\"The canonical identifier of the SQL warehouse.\"\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.SqlStatementOutput","title":"<code>SqlStatementOutput</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class SqlStatementOutput(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    lookup_key: Optional[str] = Field(\n        None, description=\"A key that can be used to look up query details.\"\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.SqlTask","title":"<code>SqlTask</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class SqlTask(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    alert: Optional[SqlTaskAlert] = Field(\n        None, description=\"If alert, indicates that this job must refresh a SQL alert.\"\n    )\n    dashboard: Optional[SqlTaskDashboard] = Field(\n        None,\n        description=(\n            \"If dashboard, indicates that this job must refresh a SQL dashboard.\"\n        ),\n    )\n    parameters: Optional[Dict[str, Any]] = Field(\n        None,\n        description=(\n            \"Parameters to be used for each run of this job. The SQL alert task does\"\n            \" not support custom parameters.\"\n        ),\n        example={\"age\": 35, \"name\": \"John Doe\"},\n    )\n    query: Optional[SqlTaskQuery] = Field(\n        None, description=\"If query, indicates that this job must execute a SQL query.\"\n    )\n    warehouse_id: str = Field(\n        ...,\n        description=(\n            \"The canonical identifier of the SQL warehouse. Only serverless and pro SQL\"\n            \" warehouses are supported.\"\n        ),\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.SqlTaskAlert","title":"<code>SqlTaskAlert</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class SqlTaskAlert(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    alert_id: str = Field(..., description=\"The canonical identifier of the SQL alert.\")\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.SqlTaskDashboard","title":"<code>SqlTaskDashboard</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class SqlTaskDashboard(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    dashboard_id: str = Field(\n        ..., description=\"The canonical identifier of the SQL dashboard.\"\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.SqlTaskQuery","title":"<code>SqlTaskQuery</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class SqlTaskQuery(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    query_id: str = Field(..., description=\"The canonical identifier of the SQL query.\")\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.TaskDependencies","title":"<code>TaskDependencies</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> <pre><code>An optional array of objects specifying the dependency graph of the task. All tasks specified in this field must complete successfully before executing this task.\n</code></pre> <p>The key is <code>task_key</code>, and the value is the name assigned to the dependent task. This field is required when a job consists of more than one task.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class TaskDependencies(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n\n        An optional array of objects specifying the dependency graph of the task. All tasks specified in this field must complete successfully before executing this task.\n    The key is `task_key`, and the value is the name assigned to the dependent task.\n    This field is required when a job consists of more than one task.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    __root__: List[TaskDependency] = Field(\n        ...,\n        description=(\n            \"An optional array of objects specifying the dependency graph of the task.\"\n            \" All tasks specified in this field must complete successfully before\"\n            \" executing this task.\\nThe key is `task_key`, and the value is the name\"\n            \" assigned to the dependent task.\\nThis field is required when a job\"\n            \" consists of more than one task.\"\n        ),\n        example=[{\"task_key\": \"Previous_Task_Key\"}, {\"task_key\": \"Other_Task_Key\"}],\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.TaskDependency","title":"<code>TaskDependency</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class TaskDependency(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    task_key: Optional[str] = None\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.TaskDescription","title":"<code>TaskDescription</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class TaskDescription(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    __root__: str = Field(\n        ...,\n        description=(\n            \"An optional description for this task.\\nThe maximum length is 4096 bytes.\"\n        ),\n        example=\"This is the description for this task.\",\n        max_length=4096,\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.TaskKey","title":"<code>TaskKey</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class TaskKey(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    __root__: str = Field(\n        ...,\n        description=(\n            \"A unique name for the task. This field is used to refer to this task from\"\n            \" other tasks.\\nThis field is required and must be unique within its parent\"\n            \" job.\\nOn Update or Reset, this field is used to reference the tasks to be\"\n            \" updated or reset.\\nThe maximum length is 100 characters.\"\n        ),\n        example=\"Task_Key\",\n        max_length=100,\n        min_length=1,\n        regex=\"^[\\\\w\\\\-]+$\",\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.TerminationCode","title":"<code>TerminationCode</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <pre><code>* USER_REQUEST: A user terminated the cluster directly. Parameters should include a `username` field that indicates the specific user who terminated the cluster.\n</code></pre> <ul> <li>JOB_FINISHED: The cluster was launched by a job, and terminated when the job completed.</li> <li>INACTIVITY: The cluster was terminated since it was idle.</li> <li>CLOUD_PROVIDER_SHUTDOWN: The instance that hosted the Spark driver was terminated by the cloud provider. In AWS, for example, AWS may retire instances and directly shut them down. Parameters should include an <code>aws_instance_state_reason</code> field indicating the AWS-provided reason why the instance was terminated.</li> <li>COMMUNICATION_LOST: Databricks lost connection to services on the driver instance. For example, this can happen when problems arise in cloud networking infrastructure, or when the instance itself becomes unhealthy.</li> <li>CLOUD_PROVIDER_LAUNCH_FAILURE: Databricks experienced a cloud provider failure when requesting instances to launch clusters. For example, AWS limits the number of running instances and EBS volumes. If you ask Databricks to launch a cluster that requires instances or EBS volumes that exceed your AWS limit, the cluster fails with this status code. Parameters should include one of <code>aws_api_error_code</code>, <code>aws_instance_state_reason</code>, or <code>aws_spot_request_status</code> to indicate the AWS-provided reason why Databricks could not request the required instances for the cluster.</li> <li>SPARK_STARTUP_FAILURE: The cluster failed to initialize. Possible reasons may include failure to create the environment for Spark or issues launching the Spark master and worker processes.</li> <li>INVALID_ARGUMENT: Cannot launch the cluster because the user specified an invalid argument. For example, the user might specify an invalid runtime version for the cluster.</li> <li>UNEXPECTED_LAUNCH_FAILURE: While launching this cluster, Databricks failed to complete critical setup steps, terminating the cluster.</li> <li>INTERNAL_ERROR: Databricks encountered an unexpected error that forced the running cluster to be terminated. Contact Databricks support for additional details.</li> <li>SPARK_ERROR: The Spark driver failed to start. Possible reasons may include incompatible libraries and initialization scripts that corrupted the Spark container.</li> <li>METASTORE_COMPONENT_UNHEALTHY: The cluster failed to start because the external metastore could not be reached. Refer to Troubleshooting.</li> <li>DBFS_COMPONENT_UNHEALTHY: The cluster failed to start because Databricks File System (DBFS) could not be reached.</li> <li>DRIVER_UNREACHABLE: Databricks was not able to access the Spark driver, because it was not reachable.</li> <li>DRIVER_UNRESPONSIVE: Databricks was not able to access the Spark driver, because it was unresponsive.</li> <li>INSTANCE_UNREACHABLE: Databricks was not able to access instances in order to start the cluster. This can be a transient networking issue. If the problem persists, this usually indicates a networking environment misconfiguration.</li> <li>CONTAINER_LAUNCH_FAILURE: Databricks was unable to launch containers on worker nodes for the cluster. Have your admin check your network configuration.</li> <li>INSTANCE_POOL_CLUSTER_FAILURE: Pool backed cluster specific failure. Refer to Pools for details.</li> <li>REQUEST_REJECTED: Databricks cannot handle the request at this moment. Try again later and contact Databricks if the problem persists.</li> <li>INIT_SCRIPT_FAILURE: Databricks cannot load and run a cluster-scoped init script on one of the cluster\u2019s nodes, or the init script terminates with a non-zero exit code. Refer to Init script logs.</li> <li>TRIAL_EXPIRED: The Databricks trial subscription expired.</li> </ul> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class TerminationCode(str, Enum):\n    \"\"\"\n        * USER_REQUEST: A user terminated the cluster directly. Parameters should include a `username` field that indicates the specific user who terminated the cluster.\n    * JOB_FINISHED: The cluster was launched by a job, and terminated when the job completed.\n    * INACTIVITY: The cluster was terminated since it was idle.\n    * CLOUD_PROVIDER_SHUTDOWN: The instance that hosted the Spark driver was terminated by the cloud provider. In AWS, for example, AWS may retire instances and directly shut them down. Parameters should include an `aws_instance_state_reason` field indicating the AWS-provided reason why the instance was terminated.\n    * COMMUNICATION_LOST: Databricks lost connection to services on the driver instance. For example, this can happen when problems arise in cloud networking infrastructure, or when the instance itself becomes unhealthy.\n    * CLOUD_PROVIDER_LAUNCH_FAILURE: Databricks experienced a cloud provider failure when requesting instances to launch clusters. For example, AWS limits the number of running instances and EBS volumes. If you ask Databricks to launch a cluster that requires instances or EBS volumes that exceed your AWS limit, the cluster fails with this status code. Parameters should include one of `aws_api_error_code`, `aws_instance_state_reason`, or `aws_spot_request_status` to indicate the AWS-provided reason why Databricks could not request the required instances for the cluster.\n    * SPARK_STARTUP_FAILURE: The cluster failed to initialize. Possible reasons may include failure to create the environment for Spark or issues launching the Spark master and worker processes.\n    * INVALID_ARGUMENT: Cannot launch the cluster because the user specified an invalid argument. For example, the user might specify an invalid runtime version for the cluster.\n    * UNEXPECTED_LAUNCH_FAILURE: While launching this cluster, Databricks failed to complete critical setup steps, terminating the cluster.\n    * INTERNAL_ERROR: Databricks encountered an unexpected error that forced the running cluster to be terminated. Contact Databricks support for additional details.\n    * SPARK_ERROR: The Spark driver failed to start. Possible reasons may include incompatible libraries and initialization scripts that corrupted the Spark container.\n    * METASTORE_COMPONENT_UNHEALTHY: The cluster failed to start because the external metastore could not be reached. Refer to [Troubleshooting](https://docs.databricks.com/data/metastores/external-hive-metastore.html#troubleshooting).\n    * DBFS_COMPONENT_UNHEALTHY: The cluster failed to start because Databricks File System (DBFS) could not be reached.\n    * DRIVER_UNREACHABLE: Databricks was not able to access the Spark driver, because it was not reachable.\n    * DRIVER_UNRESPONSIVE: Databricks was not able to access the Spark driver, because it was unresponsive.\n    * INSTANCE_UNREACHABLE: Databricks was not able to access instances in order to start the cluster. This can be a transient networking issue. If the problem persists, this usually indicates a networking environment misconfiguration.\n    * CONTAINER_LAUNCH_FAILURE: Databricks was unable to launch containers on worker nodes for the cluster. Have your admin check your network configuration.\n    * INSTANCE_POOL_CLUSTER_FAILURE: Pool backed cluster specific failure. Refer to [Pools](https://docs.databricks.com/clusters/instance-pools/index.html) for details.\n    * REQUEST_REJECTED: Databricks cannot handle the request at this moment. Try again later and contact Databricks if the problem persists.\n    * INIT_SCRIPT_FAILURE: Databricks cannot load and run a cluster-scoped init script on one of the cluster\u2019s nodes, or the init script terminates with a non-zero exit code. Refer to [Init script logs](https://docs.databricks.com/clusters/init-scripts.html#init-script-log).\n    * TRIAL_EXPIRED: The Databricks trial subscription expired.\n    \"\"\"\n\n    userrequest = \"USER_REQUEST\"\n    jobfinished = \"JOB_FINISHED\"\n    inactivity = \"INACTIVITY\"\n    cloudprovidershutdown = \"CLOUD_PROVIDER_SHUTDOWN\"\n    communicationlost = \"COMMUNICATION_LOST\"\n    cloudproviderlaunchfailure = \"CLOUD_PROVIDER_LAUNCH_FAILURE\"\n    sparkstartupfailure = \"SPARK_STARTUP_FAILURE\"\n    invalidargument = \"INVALID_ARGUMENT\"\n    unexpectedlaunchfailure = \"UNEXPECTED_LAUNCH_FAILURE\"\n    internalerror = \"INTERNAL_ERROR\"\n    sparkerror = \"SPARK_ERROR\"\n    metastorecomponentunhealthy = \"METASTORE_COMPONENT_UNHEALTHY\"\n    dbfscomponentunhealthy = \"DBFS_COMPONENT_UNHEALTHY\"\n    driverunreachable = \"DRIVER_UNREACHABLE\"\n    driverunresponsive = \"DRIVER_UNRESPONSIVE\"\n    instanceunreachable = \"INSTANCE_UNREACHABLE\"\n    containerlaunchfailure = \"CONTAINER_LAUNCH_FAILURE\"\n    instancepoolclusterfailure = \"INSTANCE_POOL_CLUSTER_FAILURE\"\n    requestrejected = \"REQUEST_REJECTED\"\n    initscriptfailure = \"INIT_SCRIPT_FAILURE\"\n    trialexpired = \"TRIAL_EXPIRED\"\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.TerminationParameter","title":"<code>TerminationParameter</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class TerminationParameter(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    aws_api_error_code: Optional[str] = Field(\n        None,\n        description=(\n            \"The AWS provided error code describing why cluster nodes could not be\"\n            \" provisioned. For example, `InstanceLimitExceeded` indicates that the\"\n            \" limit of EC2 instances for a specific instance type has been exceeded.\"\n            \" For reference, see:\"\n            \" &lt;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/query-api-troubleshooting.html&gt;.\"\n        ),\n    )\n    aws_error_message: Optional[str] = Field(\n        None,\n        description=(\n            \"Human-readable context of various failures from AWS. This field is\"\n            \" unstructured, and its exact format is subject to change.\"\n        ),\n    )\n    aws_impaired_status_details: Optional[str] = Field(\n        None,\n        description=(\n            \"The AWS provided status check which failed and induced a node loss. This\"\n            \" status may correspond to a failed instance or system check. For\"\n            \" reference, see\"\n            \" &lt;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-system-instance-status-check.html&gt;.\"\n        ),\n    )\n    aws_instance_state_reason: Optional[str] = Field(\n        None,\n        description=(\n            \"The AWS provided state reason describing why the driver node was\"\n            \" terminated. For example, `Client.VolumeLimitExceeded` indicates that the\"\n            \" limit of EBS volumes or total EBS volume storage has been exceeded. For\"\n            \" reference, see\"\n            \" &lt;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_StateReason.html&gt;.\"\n        ),\n    )\n    aws_instance_status_event: Optional[str] = Field(\n        None,\n        description=(\n            \"The AWS provided scheduled event (for example reboot) which induced a node\"\n            \" loss. For reference, see\"\n            \" &lt;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-instances-status-check_sched.html&gt;.\"\n        ),\n    )\n    aws_spot_request_fault_code: Optional[str] = Field(\n        None,\n        description=(\n            \"Provides additional details when a spot request fails. For example\"\n            \" `InsufficientFreeAddressesInSubnet` indicates the subnet does not have\"\n            \" free IP addresses to accommodate the new instance. For reference, see\"\n            \" &lt;https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-spot-instance-requests.html&gt;.\"\n        ),\n    )\n    aws_spot_request_status: Optional[str] = Field(\n        None,\n        description=(\n            \"Describes why a spot request could not be fulfilled. For example,\"\n            \" `price-too-low` indicates that the max price was lower than the current\"\n            \" spot price. For reference, see:\"\n            \" &lt;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-bid-status.html#spot-instance-bid-status-understand&gt;.\"\n        ),\n    )\n    databricks_error_message: Optional[str] = Field(\n        None,\n        description=(\n            \"Additional context that may explain the reason for cluster termination.\"\n            \" This field is unstructured, and its exact format is subject to change.\"\n        ),\n    )\n    inactivity_duration_min: Optional[str] = Field(\n        None,\n        description=(\n            \"An idle cluster was shut down after being inactive for this duration.\"\n        ),\n    )\n    instance_id: Optional[str] = Field(\n        None, description=\"The ID of the instance that was hosting the Spark driver.\"\n    )\n    instance_pool_error_code: Optional[str] = Field(\n        None,\n        description=(\n            \"The [error\"\n            \" code](https://docs.databricks.com/dev-tools/api/latest/clusters.html#clusterterminationreasonpoolclusterterminationcode)\"\n            \" for cluster failures specific to a pool.\"\n        ),\n    )\n    instance_pool_id: Optional[str] = Field(\n        None, description=\"The ID of the instance pool the cluster is using.\"\n    )\n    username: Optional[str] = Field(\n        None, description=\"The username of the user who terminated the cluster.\"\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.TerminationReason","title":"<code>TerminationReason</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class TerminationReason(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    code: Optional[TerminationCode] = Field(\n        None, description=\"Status code indicating why a cluster was terminated.\"\n    )\n    parameters: Optional[ParameterPair] = Field(\n        None,\n        description=(\n            \"Object containing a set of parameters that provide information about why a\"\n            \" cluster was terminated.\"\n        ),\n    )\n    type: Optional[TerminationType] = Field(\n        None, description=\"Reason indicating why a cluster was terminated.\"\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.TerminationType","title":"<code>TerminationType</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <pre><code>* SUCCESS: Termination succeeded.\n</code></pre> <ul> <li>CLIENT_ERROR: Non-retriable. Client must fix parameters before reattempting the cluster creation.</li> <li>SERVICE_FAULT: Databricks service issue. Client can retry.</li> <li>CLOUD_FAILURECloud provider infrastructure issue. Client can retry after the underlying issue is resolved.</li> </ul> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class TerminationType(str, Enum):\n    \"\"\"\n        * SUCCESS: Termination succeeded.\n    * CLIENT_ERROR: Non-retriable. Client must fix parameters before reattempting the cluster creation.\n    * SERVICE_FAULT: Databricks service issue. Client can retry.\n    * CLOUD_FAILURECloud provider infrastructure issue. Client can retry after the underlying issue is resolved.\n\n    \"\"\"\n\n    success = \"SUCCESS\"\n    clienterror = \"CLIENT_ERROR\"\n    servicefault = \"SERVICE_FAULT\"\n    cloudfailure = \"CLOUD_FAILURE\"\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.TriggerType","title":"<code>TriggerType</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <pre><code>* `PERIODIC`: Schedules that periodically trigger runs, such as a cron scheduler.\n</code></pre> <ul> <li><code>ONE_TIME</code>: One time triggers that fire a single run. This occurs you triggered a single run on demand through the UI or the API.</li> <li><code>RETRY</code>: Indicates a run that is triggered as a retry of a previously failed run. This occurs when you request to re-run the job in case of failures.</li> </ul> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class TriggerType(str, Enum):\n    \"\"\"\n        * `PERIODIC`: Schedules that periodically trigger runs, such as a cron scheduler.\n    * `ONE_TIME`: One time triggers that fire a single run. This occurs you triggered a single run on demand through the UI or the API.\n    * `RETRY`: Indicates a run that is triggered as a retry of a previously failed run. This occurs when you request to re-run the job in case of failures.\n    \"\"\"\n\n    periodic = \"PERIODIC\"\n    onetime = \"ONE_TIME\"\n    retry = \"RETRY\"\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.UserName","title":"<code>UserName</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class UserName(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    __root__: str = Field(\n        ..., description=\"Email address for the user.\", example=\"jsmith@example.com\"\n    )\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.ViewItem","title":"<code>ViewItem</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class ViewItem(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    content: Optional[str] = Field(None, description=\"Content of the view.\")\n    name: Optional[str] = Field(\n        None,\n        description=(\n            \"Name of the view item. In the case of code view, it would be the\"\n            \" notebook\u2019s name. In the case of dashboard view, it would be the\"\n            \" dashboard\u2019s name.\"\n        ),\n    )\n    type: Optional[ViewType] = Field(None, description=\"Type of the view item.\")\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.ViewType","title":"<code>ViewType</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <pre><code>* `NOTEBOOK`: Notebook view item.\n</code></pre> <ul> <li><code>DASHBOARD</code>: Dashboard view item.</li> </ul> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class ViewType(str, Enum):\n    \"\"\"\n        * `NOTEBOOK`: Notebook view item.\n    * `DASHBOARD`: Dashboard view item.\n    \"\"\"\n\n    notebook = \"NOTEBOOK\"\n    dashboard = \"DASHBOARD\"\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.ViewsToExport","title":"<code>ViewsToExport</code>","text":"<p>             Bases: <code>str</code>, <code>Enum</code></p> <pre><code>* `CODE`: Code view of the notebook.\n</code></pre> <ul> <li><code>DASHBOARDS</code>: All dashboard views of the notebook.</li> <li><code>ALL</code>: All views of the notebook.</li> </ul> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class ViewsToExport(str, Enum):\n    \"\"\"\n        * `CODE`: Code view of the notebook.\n    * `DASHBOARDS`: All dashboard views of the notebook.\n    * `ALL`: All views of the notebook.\n    \"\"\"\n\n    code = \"CODE\"\n    dashboards = \"DASHBOARDS\"\n    all = \"ALL\"\n</code></pre>"},{"location":"models/jobs/#prefect_databricks.models.jobs.WebhookNotifications","title":"<code>WebhookNotifications</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>See source code for the fields' description.</p> Source code in <code>prefect_databricks/models/jobs.py</code> <pre><code>class WebhookNotifications(BaseModel):\n    \"\"\"\n    See source code for the fields' description.\n    \"\"\"\n\n    class Config:\n        extra = Extra.allow\n        allow_mutation = False\n\n    on_failure: Optional[List[OnFailureItem]] = Field(\n        None,\n        description=(\n            \"An optional list of notification IDs to call when the run fails. A maximum\"\n            \" of 3 destinations can be specified for the `on_failure` property.\"\n        ),\n        example=[{\"id\": \"0481e838-0a59-4eff-9541-a4ca6f149574\"}],\n    )\n    on_start: Optional[List[OnStartItem]] = Field(\n        None,\n        description=(\n            \"An optional list of notification IDs to call when the run starts. A\"\n            \" maximum of 3 destinations can be specified for the `on_start` property.\"\n        ),\n        example=[\n            {\"id\": \"03dd86e4-57ef-4818-a950-78e41a1d71ab\"},\n            {\"id\": \"0481e838-0a59-4eff-9541-a4ca6f149574\"},\n        ],\n    )\n    on_success: Optional[List[OnSucces]] = Field(\n        None,\n        description=(\n            \"An optional list of notification IDs to call when the run completes\"\n            \" successfully. A maximum of 3 destinations can be specified for the\"\n            \" `on_success` property.\"\n        ),\n        example=[{\"id\": \"03dd86e4-57ef-4818-a950-78e41a1d71ab\"}],\n    )\n</code></pre>"}]}