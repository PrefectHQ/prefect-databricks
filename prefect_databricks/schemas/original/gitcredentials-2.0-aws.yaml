components:
  responses:
    BadRequestPost:
      content:
        application/json:
          examples:
            credential_already_exists:
              value:
                error_code: CREDENTIAL_ALREADY_EXISTS
                message: Only one Git credential is supported. To update your credential,
                  use the PATCH endpoint.
            git_username_missing:
              value:
                error_code: GIT_USERNAME_MISSING
                message: Git username is a required field for all Git providers.
            personal_access_token_missing:
              value:
                error_code: TOKEN_MISSING
                message: Personal access token is a required field for all Git providers.
          schema:
            $ref: '#/components/schemas/Error'
      description: Request is invalid
    CredentialNotFound:
      content:
        application/json:
          examples:
            credential_not_found:
              value:
                error_code: CREDENTIAL_NOT_FOUND
                message: Credential with the specified ID not found.
          schema:
            $ref: '#/components/schemas/Error'
      description: Credential with the specified ID does not exist.
    InternalError:
      content:
        application/json:
          examples:
            internal_error:
              value:
                error_code: INTERNAL_ERROR
                message: There was an error performing the operation. Please try again
                  or open a support ticket.
          schema:
            $ref: '#/components/schemas/Error'
      description: The request was not handled correctly due to a server error.
    InvalidGitProvider:
      content:
        application/json:
          examples:
            bad_request:
              value:
                error_code: INVALID_GIT_PROVIDER
                message: The specified Git provider is invalid. The available Git
                  providers are awsCodeCommit, azureDevOpsServices, bitbucketCloud,
                  bitbucketServer, gitHub, gitHubEnterprise, gitLab, and gitLabEnterpriseEdition.
          schema:
            $ref: '#/components/schemas/Error'
      description: The specified Git provider is invalid.
  schemas:
    CreateCredentialRequest:
      properties:
        git_provider:
          $ref: '#/components/schemas/git_provider'
        git_username:
          $ref: '#/components/schemas/git_username'
        personal_access_token:
          $ref: '#/components/schemas/personal_access_token'
      required:
      - git_provider
      - personal_access_token
      - git_username
      type: object
    Error:
      properties:
        error_code:
          description: Error code
          type: string
        message:
          description: Human-readable error message describing the cause of the error.
          type: string
      type: object
    GetCredentialResponse:
      properties:
        credential_id:
          $ref: '#/components/schemas/credential_id'
        git_provider:
          $ref: '#/components/schemas/git_provider'
        git_username:
          $ref: '#/components/schemas/git_username'
      type: object
    GetCredentialsResponse:
      properties:
        credentials:
          items:
            $ref: '#/components/schemas/GetCredentialResponse'
          type: array
      type: object
    UpdateCredentialRequest:
      properties:
        git_provider:
          $ref: '#/components/schemas/git_provider'
        git_username:
          $ref: '#/components/schemas/git_username'
        personal_access_token:
          $ref: '#/components/schemas/personal_access_token'
      required:
      - personal_access_token
      type: object
    credential_id:
      description: ID of the credential object in the workspace.
      example: 93488329053511
      format: int64
      type: integer
    git_provider:
      description: Git provider. This field is case-insensitive. The available Git
        providers are awsCodeCommit, azureDevOpsServices, bitbucketCloud, bitbucketServer,
        gitHub, gitHubEnterprise, gitLab, and gitLabEnterpriseEdition.
      example: gitHub
      type: string
    git_username:
      description: Git username.
      example: testuser
      type: string
    personal_access_token:
      description: The personal access token used to authenticate to the corresponding
        Git provider.
      example: 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
      type: string
  securitySchemes:
    basicAuth:
      description: HTTP Basic authentication with a name and password for non-SSO
        authentication.
      in: header
      name: HTTP Basic authentication
      scheme: basic
      type: http
    bearerAuth:
      bearerFormat: String
      description: You can authenticate with a Databricks personal access token that
        you create for yourself within the application user interface.
      in: header
      name: Token
      scheme: bearer
      type: http
info:
  description: The Git credentials API allows users to manage their [Git credentials](https://docs.databricks.com/repos.html#configure-your-git-integration-with-databricks)
    to use [Databricks Repos](https://docs.databricks.com/repos.html).
  title: Git Credentials API
  version: 2.0.0
openapi: 3.0.0
paths:
  /git-credentials:
    description: This endpoint manages Git credentials for the calling user.
    get:
      description: Returns the calling user's Git credentials. One credential per
        user is supported.
      operationId: get-git-credential-list
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCredentialsResponse'
          description: Git credentials were successfully returned.
        '500':
          $ref: '#/components/responses/InternalError'
      summary: Get Git credentials
    post:
      description: Creates a Git credential entry for the user. Only one Git credential
        per user is supported, so any attempts to create credentials if an entry already
        exists will fail. Use the PATCH endpoint to update existing credentials, or
        the DELETE endpoint to delete existing credentials.
      operationId: create-git-credential
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCredentialRequest'
        description: Details required to create a Git credential entry
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCredentialResponse'
          description: The credential was successfully configured.
        '400':
          $ref: '#/components/responses/BadRequestPost'
        '500':
          $ref: '#/components/responses/InternalError'
      summary: Create a Git credential entry
  /git-credentials/{credential_id}:
    delete:
      description: Deletes the specified credential
      operationId: delete-git-credential
      responses:
        '200':
          description: The credential was successfully deleted.
        '404':
          $ref: '#/components/responses/CredentialNotFound'
        '500':
          $ref: '#/components/responses/InternalError'
      summary: Deletes the credential
    description: This endpoint manages a specific Git credential entry.
    get:
      description: Returns the credential with the given credential ID.
      operationId: get-git-credential
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCredentialResponse'
          description: The credential was successfully returned.
        '404':
          $ref: '#/components/responses/CredentialNotFound'
        '500':
          $ref: '#/components/responses/InternalError'
      summary: Get a credential entry
    parameters:
    - description: The ID for the corresponding credential to access.
      in: path
      name: credential_id
      required: true
      schema:
        type: string
    patch:
      description: Updates the credential.
      operationId: update-git-credential
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCredentialRequest'
        description: Details required to update the credential
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCredentialResponse'
          description: The credential was successfully updated.
        '400':
          $ref: '#/components/responses/InvalidGitProvider'
        '404':
          $ref: '#/components/responses/CredentialNotFound'
        '500':
          $ref: '#/components/responses/InternalError'
      summary: Updates the credential
security:
- bearerAuth: []
- basicAuth: []
servers:
- description: In the URL, substitute `<databricks-instance>` with the domain name
    of your deployment. Use the form `<account>.cloud.databricks.com`.
  url: https://<databricks-instance>/api/2.0
