components:
  responses:
    BadRequest:
      content:
        application/json:
          examples:
            invalid_repo_path:
              value:
                error_code: BAD_REQUEST
                message: Invalid repo path specified
          schema:
            $ref: '#/components/schemas/Error'
      description: The request is invalid.
    DirectoryNotFound:
      content:
        application/json:
          examples:
            directory_not_found:
              value:
                error_code: RESOURCE_DOES_NOT_EXIST
                message: 'RESOURCE_DOES_NOT_EXIST: Parent directory /Repos/testfolder
                  does not exist.'
          schema:
            $ref: '#/components/schemas/Error'
      description: The specified directory does not exist.
    Forbidden:
      content:
        application/json:
          examples:
            bad_request:
              value:
                error_code: PERMISSION_DENIED
                message: 'PERMISSION_DENIED: jsmith@example.com does not have Manage
                  permissions on /Repos/Production/testrepo. Please contact the owner
                  or an administrator for access.'
          schema:
            $ref: '#/components/schemas/Error'
      description: The user does not have access to the requested resource.
    InternalError:
      content:
        application/json:
          examples:
            internal_error:
              value:
                error_code: INTERNAL_ERROR
                message: There was an error performing the operation. Please try again
                  or open a support ticket.
          schema:
            $ref: '#/components/schemas/Error'
      description: The request is not handled correctly due to a server error.
    RepoNotFound:
      content:
        application/json:
          examples:
            repo_not_found:
              value:
                error_code: RESOURCE_DOES_NOT_EXIST
                message: Repo could not be found
          schema:
            $ref: '#/components/schemas/Error'
      description: The specified repo does not exist.
    ReposNotEnabled:
      content:
        application/json:
          examples:
            bad_request:
              value:
                error_code: FEATURE_DISABLED
                message: 'FEATURE_DISABLED: Repos is not enabled.'
          schema:
            $ref: '#/components/schemas/Error'
      description: Repos is not enabled for the workspace.
    UnknownRef:
      content:
        application/json:
          examples:
            unknown_ref:
              value:
                error_code: GIT_UNKNOWN_REF
                message: Remote branch does not exist
          schema:
            $ref: '#/components/schemas/Error'
      description: The specified ref is invalid.
  schemas:
    Branch:
      properties:
        branch:
          $ref: '#/components/schemas/branch'
      required:
      - branch
      type: object
    CreateRepoRequest:
      properties:
        path:
          $ref: '#/components/schemas/path'
        provider:
          $ref: '#/components/schemas/provider'
        url:
          $ref: '#/components/schemas/url'
      required:
      - url
      - provider
      type: object
    Error:
      properties:
        error_code:
          description: Error code
          type: string
        message:
          description: Human-readable error message describing the cause of the error.
          type: string
      type: object
    GetRepoResponse:
      properties:
        branch:
          $ref: '#/components/schemas/branch'
        head_commit_id:
          $ref: '#/components/schemas/head_commit_id'
        id:
          $ref: '#/components/schemas/id'
        path:
          $ref: '#/components/schemas/path'
        provider:
          $ref: '#/components/schemas/provider'
        url:
          $ref: '#/components/schemas/url'
      type: object
    GetReposResponse:
      properties:
        next_page_token:
          $ref: '#/components/schemas/next_page_token'
        repos:
          items:
            $ref: '#/components/schemas/GetRepoResponse'
          type: array
      type: object
    Tag:
      properties:
        tag:
          $ref: '#/components/schemas/tag'
      required:
      - tag
      type: object
    branch:
      description: Branch that the local version of the repo is checked out to.
      example: main
      type: string
    head_commit_id:
      description: SHA-1 hash representing the commit ID of the current HEAD of the
        repo.
      example: 7e0847ede61f07adede22e2bcce6050216489171
      type: string
    id:
      description: ID of the repo object in the workspace.
      example: 5249608814509279
      format: int64
      type: integer
    next_page_token:
      description: Token that can be specified as a query parameter to the GET /repos
        endpoint to retrieve the next page of results.
      example: eyJyZXBvX3RyZWVub2RlX2lkIjo1MjQ5NjA4ODE0NTA5Mjc5fQ==
      type: string
    path:
      description: Desired path for the repo in the workspace. Must be in the format
        /Repos/{folder}/{repo-name}.
      example: /Repos/Production/testrepo
      type: string
    provider:
      description: Git provider. This field is case-insensitive. The available Git
        providers are gitHub, bitbucketCloud, gitLab, azureDevOpsServices, gitHubEnterprise,
        bitbucketServer, gitLabEnterpriseEdition and awsCodeCommit.
      example: gitHub
      type: string
    tag:
      description: Tag that the local version of the repo is checked out to. Updating
        the repo to a tag puts the repo in a detached HEAD state. Before committing
        new changes, you must update the repo to a branch instead of the detached
        HEAD.
      example: v1.0
      type: string
    url:
      description: URL of the Git repository to be linked.
      example: https://github.com/jsmith/test
      type: string
  securitySchemes:
    basicAuth:
      description: HTTP Basic authentication with a name and password for non-SSO
        authentication.
      in: header
      name: HTTP Basic authentication
      scheme: basic
      type: http
    bearerAuth:
      bearerFormat: String
      description: You can authenticate with a Databricks personal access token that
        you create for yourself within the application user interface.
      in: header
      name: Token
      scheme: bearer
      type: http
info:
  description: The repos API allows users to manage their [repos](https://docs.databricks.com/repos.html).
    Users can use the API to access all repos that they have manage permissions on.
  title: Repos API
  version: 2.0.0
openapi: 3.0.0
paths:
  /repos:
    description: This endpoint manages repos for a workspace.
    get:
      description: Returns repos that the calling user has Manage permissions on.
        Results are paginated with each page containing twenty repos.
      operationId: get-repos
      parameters:
      - description: Filters repos that have paths starting with the given path prefix.
        in: query
        name: path_prefix
        schema:
          type: string
      - description: Token used to get the next page of results. If not specified,
          returns the first page of results as well as a next page token if there
          are more results.
        in: query
        name: next_page_token
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetReposResponse'
          description: Repos were successfully returned.
        '404':
          $ref: '#/components/responses/ReposNotEnabled'
        '500':
          $ref: '#/components/responses/InternalError'
      summary: Get repos
    post:
      description: Creates a repo in the workspace and links it to the remote Git
        repo specified. Note that repos created programmatically must be linked to
        a remote Git repo, unlike repos created in the browser.
      operationId: create-repo
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRepoRequest'
        description: Details required to create and clone a repo object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRepoResponse'
          description: The repo was successfully created.
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/DirectoryNotFound'
        '500':
          $ref: '#/components/responses/InternalError'
      summary: Create a repo
  /repos/{repo_id}:
    delete:
      description: Deletes the specified repo
      operationId: delete-repo
      responses:
        '200':
          description: The repo was successfully deleted.
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/RepoNotFound'
        '500':
          $ref: '#/components/responses/InternalError'
      summary: Deletes the repo
    description: This endpoint manages a specific repo.
    get:
      description: Returns the repo with the given repo ID.
      operationId: get-repo
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRepoResponse'
          description: The repo was successfully returned.
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/RepoNotFound'
        '500':
          $ref: '#/components/responses/InternalError'
      summary: Get a repo
    parameters:
    - description: The ID for the corresponding repo to access.
      in: path
      name: repo_id
      required: true
      schema:
        type: string
    patch:
      description: Updates the repo to a different branch or tag, or updates the repo
        to the latest commit on the same branch.
      operationId: update-repo
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - $ref: '#/components/schemas/Branch'
              - $ref: '#/components/schemas/Tag'
        description: Details required to update the repo
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRepoResponse'
          description: The repo was successfully updated.
        '400':
          $ref: '#/components/responses/UnknownRef'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/RepoNotFound'
        '500':
          $ref: '#/components/responses/InternalError'
      summary: Updates the repo to the given branch or tag
security:
- bearerAuth: []
- basicAuth: []
servers:
- description: In the URL, substitute `<databricks-instance>` with the domain name
    of your deployment. Use the form `<account>.cloud.databricks.com`.
  url: https://<databricks-instance>/api/2.0
