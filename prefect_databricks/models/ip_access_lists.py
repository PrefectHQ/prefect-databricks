# generated by datamodel-codegen:
#   filename:  ip-access-list-aws.yaml
#   timestamp: 2022-06-29T19:47:30+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, List, Literal, Optional
from uuid import UUID

from pydantic import BaseModel, Field


class Error(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    error_code: Optional[str] = Field(None, description='Error code')
    message: Optional[str] = Field(
        None,
        description='Human-readable error message describe the cause of the error.',
    )


class WorkspaceConf(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    enable_ip_access_lists: Optional[Literal[True, False]] = Field(
        None,
        alias='enableIpAccessLists',
        description=(
            'The IP access list feature is enabled for the workspace if `true` and it'
            ' is disabled if `false`. Note that these are String values, not booleans.'
        ),
        example='false',
    )


class AddressCount(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: float = Field(
        ..., description='Total number of IP or CIDR values.', example=2
    )


class CreatedAt(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: float = Field(
        ..., description='Creation timestamp in milliseconds', example=1580265020299
    )


class CreatedBy(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: float = Field(
        ...,
        description='User ID of the user who created this list',
        example=202480738464078,
    )


class Enabled(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: bool = Field(
        ..., description='Specifies whether this IP access list is enabled.'
    )


class IpAddresses(BaseModel, extra=Extra.allow):
    """
    Array of IP addresses or CIDR values to be added to the IP access list.
    """

    class Config:
        allow_mutation = False

    __root__: List[Any] = Field(
        ...,
        description=(
            'Array of IP addresses or CIDR values to be added to the IP access list.'
        ),
        example=['32.19.112.0', '192.168.100.0/22'],
        min_length=1,
    )


class Label(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: str = Field(
        ...,
        description='Label for the IP access list. This **cannot** be empty.',
        example='Office VPN',
    )


class ListId(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: UUID = Field(..., description='UUID of the IP access list')


class ListType(Enum):
    """
        Type of IP access list. Valid values are as follows and are case-sensitive:
    * `ALLOW` — An allow list. Include this IP or range.

    * `BLOCK` — A block list. Exclude this IP or range. IP addresses in the block list are excluded even if they are included in an allow list.
    """

    allow = 'ALLOW'
    block = 'BLOCK'


class UpdatedAt(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: float = Field(
        ..., description='Update timestamp in milliseconds', example=1580265020299
    )


class UpdatedBy(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: float = Field(
        ...,
        description='User ID of the user who updated this list',
        example=202480738464089,
    )


class CreateIPAccessListRequest(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    ip_addresses: IpAddresses
    label: Label
    list_type: ListType


class CreateIPAccessListResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    address_count: Optional[AddressCount] = None
    created_at: Optional[CreatedAt] = None
    created_by: Optional[CreatedBy] = None
    enabled: Optional[Enabled] = None
    ip_addresses: Optional[IpAddresses] = None
    label: Optional[Label] = None
    list_id: Optional[ListId] = None
    list_type: Optional[ListType] = None
    updated_at: Optional[UpdatedAt] = None
    updated_by: Optional[UpdatedBy] = None


class GetIPAccessListResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    ip_access_lists: Optional[List[CreateIPAccessListResponse]] = None


class ReplaceIPAccessListRequest(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    enabled: Enabled
    ip_addresses: IpAddresses
    label: Label
    list_id: Optional[ListId] = None
    list_type: ListType


class UpdateIPAccessListRequest(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    enabled: Optional[Enabled] = None
    ip_addresses: Optional[IpAddresses] = None
    label: Optional[Label] = None
    list_id: Optional[ListId] = None
    list_type: Optional[ListType] = None
