# generated by datamodel-codegen:
#   filename:  gitcredentials-2.0-aws.yaml
#   timestamp: 2022-06-29T19:47:29+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field


class Error(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    error_code: Optional[str] = Field(None, description='Error code')
    message: Optional[str] = Field(
        None,
        description='Human-readable error message describing the cause of the error.',
    )


class CredentialId(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: int = Field(
        ...,
        description='ID of the credential object in the workspace.',
        example=93488329053511,
    )


class GitProvider(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: str = Field(
        ...,
        description=(
            'Git provider. This field is case-insensitive. The available Git providers'
            ' are awsCodeCommit, azureDevOpsServices, bitbucketCloud, bitbucketServer,'
            ' gitHub, gitHubEnterprise, gitLab, and gitLabEnterpriseEdition.'
        ),
        example='gitHub',
    )


class GitUsername(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: str = Field(..., description='Git username.', example='testuser')


class PersonalAccessToken(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: str = Field(
        ...,
        description=(
            'The personal access token used to authenticate to the corresponding Git'
            ' provider.'
        ),
        example='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',
    )


class CreateCredentialRequest(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    git_provider: GitProvider
    git_username: GitUsername
    personal_access_token: PersonalAccessToken


class GetCredentialResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    credential_id: Optional[CredentialId] = None
    git_provider: Optional[GitProvider] = None
    git_username: Optional[GitUsername] = None


class GetCredentialsResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    credentials: Optional[List[GetCredentialResponse]] = None


class UpdateCredentialRequest(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    git_provider: Optional[GitProvider] = None
    git_username: Optional[GitUsername] = None
    personal_access_token: PersonalAccessToken
