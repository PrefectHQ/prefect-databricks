# generated by datamodel-codegen:
#   filename:  global-init-scripts-2.0-aws.yaml
#   timestamp: 2022-06-29T19:47:29+00:00

from __future__ import annotations

from typing import Optional

from pydantic import BaseModel, EmailStr, Field, conint, constr


class Error(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    error_code: Optional[str] = Field(
        None, description='Error code', example='INTERNAL_ERROR'
    )
    message: Optional[str] = Field(
        None,
        description=(
            'Human-readable error message that describes the cause of the error.'
        ),
        example='Unexpected error.',
    )


class ScriptContent(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: str = Field(
        ...,
        description='The Base64-encoded content of the script.',
        example='ZWNobyBoZWxsbw==',
    )


class ScriptEnabled(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: bool = Field(
        ...,
        description=(
            'Specifies whether the script is enabled. The script runs only if enabled.'
        ),
        example=False,
    )


class ScriptEnabledWithDefault(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: bool = Field(
        ...,
        description=(
            'Specifies whether the script is enabled. The script runs only if enabled.'
        ),
        example=False,
    )


class ScriptId(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: str = Field(
        ..., description='The global init script ID.', example='714B166709FBD56F'
    )


class ScriptName(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: constr(
        regex=r'^[a-zA-Z0-9_\-\. ]*$', min_length=1, max_length=100
    ) = Field(
        ..., description='The name of the script', example='My example script name'
    )


class ScriptPositionCreate(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: conint(ge=0) = Field(
        ...,
        description=(
            'The position of a global init script, where 0 represents the first global'
            ' init script to run, 1 is the second global init script to run, and so'
            ' on.\n\nIf you omit the position for a new global init script, it gets the'
            ' last position. It runs after all current global init scripts.\nSetting'
            ' any value greater than the position of the last script is equivalent to'
            ' the last position. For example, suppose there are three existing scripts'
            ' with positions 0, 1 and 2. Any position value of 3 or greater puts the'
            ' script in the last position (3)\nIf an explicit position value conflicts'
            ' with an existing script, your request succeeds. The original script at'
            ' that position and all later scripts have their position incremented by 1.'
        ),
        example=0,
    )


class ScriptPositionOutput(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: conint(ge=0) = Field(
        ...,
        description=(
            'The position of a script, where 0 represents the first script to run, 1 is'
            ' the second script to run, and so on.'
        ),
        example=0,
    )


class ScriptPositionUpdate(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: conint(ge=0) = Field(
        ...,
        description=(
            'The position of a script, where 0 represents the first script to run, 1 is'
            ' the second script to run, and so on.\n\nTo move the script so that it'
            ' runs first, set its position to 0.\n\nTo move the script to the end, set'
            ' it to any value greater or equal to the position of the last script. For'
            ' example, suppose there are three existing scripts with positions 0, 1 and'
            ' 2. Any position value of 2 or greater puts the script in the last'
            ' position (2).\n\nIf an explicit position value conflicts with an existing'
            ' script, your request succeeds. The original script at that position and'
            ' all later scripts have their position incremented by 1.'
        ),
        example=0,
    )


class GlobalInitScriptCreateRequest(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    enabled: Optional[ScriptEnabledWithDefault] = None
    name: ScriptName
    position: Optional[ScriptPositionCreate] = None
    script: ScriptContent


class GlobalInitScriptDetails(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    created_at: Optional[int] = Field(
        None,
        description='When the script was created, as a Unix timestamp in milliseconds.',
        example=1594437249910,
    )
    created_by: Optional[EmailStr] = Field(
        None,
        description='The username of the user who created the script.',
        example='john.doe@databricks.com',
    )
    enabled: Optional[ScriptEnabled] = None
    name: Optional[ScriptName] = None
    position: Optional[ScriptPositionOutput] = None
    script_id: Optional[ScriptId] = None
    updated_at: Optional[int] = Field(
        None,
        description='When the script was updated, as a Unix timestamp in milliseconds.',
        example=1594444684786,
    )
    updated_by: Optional[EmailStr] = Field(
        None,
        description='The username of the user who last updated the script',
        example='jane.smith@example.com',
    )


class GlobalInitScriptDetailsWithContent(GlobalInitScriptDetails):
    class Config:
        allow_mutation = False

    script: Optional[ScriptContent] = None


class GlobalInitScriptUpdateRequest(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    enabled: Optional[ScriptEnabled] = None
    name: Optional[ScriptName] = None
    position: Optional[ScriptPositionUpdate] = None
    script: Optional[ScriptContent] = None
