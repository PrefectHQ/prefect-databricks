# generated by datamodel-codegen:
#   filename:  queries-dashboards-2.0-aws.yaml
#   timestamp: 2022-06-29T19:47:27+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Literal, Optional, Union
from uuid import UUID

from pydantic import BaseModel, EmailStr, Field


class Options(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    moved_to_trash_at: Optional[datetime] = Field(
        None,
        description=(
            'The timestamp when this dashboard was moved to trash. Only present when'
            ' the `is_archived` property is `true`. Trashed items are deleted after'
            ' thirty days.'
        ),
        example='2020-12-15T18:39:15.837Z',
    )


class DataSourceObject(BaseModel, extra=Extra.allow):
    """
    A JSON object representing a DBSQL data source / SQL warehouse.
    """

    class Config:
        allow_mutation = False

    id: Optional[str] = Field(
        None,
        description=(
            'The unique identifier for this data source / SQL warehouse. Can be used'
            ' when creating / modifying queries and dashboards.'
        ),
        example='f7df1dfd-565d-4506-accb-8a1e0f8fad09',
    )
    name: Optional[str] = Field(
        None,
        description=(
            'The string name of this data source / SQL warehouse as it appears in the'
            ' Databricks SQL web application'
        ),
        example='starter-warehouse',
    )
    pause_reason: Optional[str] = Field(None, description='Undocumented field')
    paused: Optional[float] = Field(None, description='Undocumented field', example=0)
    supports_auto_limit: Optional[bool] = Field(
        None, description='Undocumented field', example=True
    )
    syntax: Optional[str] = Field(None, description='Undocumented field', example='sql')
    type: Optional[str] = Field(
        None, description='Undocumented field', example='databricks_internal'
    )
    view_only: Optional[bool] = Field(
        None, description='Undocumented field', example=False
    )
    warehouse_id: Optional[str] = Field(
        None, description='Undocumented field', example='3d939b0cc668be06'
    )


class DateParameterValue(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    name: Optional[str] = Field(
        None,
        description=(
            'The name of this parameter that appears between curly braces in the query'
            ' definition.'
        ),
    )
    value: Optional[datetime] = Field(
        None,
        description=(
            'Date value in format as defined by RFC 3339, section 5.6. The required'
            ' granularity of date and time depends on the resolution expected by the'
            ' parameter: date, date and time, or date and time with seconds.'
        ),
        example='1991-08-03 09:21:21',
    )


class DropdownParameterValue(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    name: Optional[str] = Field(
        None,
        description=(
            'The name of this parameter that appears between curly braces in the query'
            ' definition.'
        ),
    )
    value: Optional[Union[str, List[str]]] = None


class IntegerMax100(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: int = Field(..., example=50)


class JobObject(BaseModel, extra=Extra.allow):
    """
    A JSON object that represents the status of a query run job.
    """

    class Config:
        allow_mutation = False

    error: Optional[str] = Field(
        None,
        description=(
            'Error message. This is `null` unless the job has a `FAILURE` status (code'
            ' 4). This is the error that resulted in the failure.'
        ),
    )
    id: Optional[str] = Field(
        None,
        description='A tuple of the organization ID, user ID, and query ID.',
        example='org:6051921418418893:user:899619779028913:id:cb9a11e8-68c4-4531-8d0c-104b921f7306',
    )
    query_result_id: Optional[str] = Field(
        None,
        description='Same as `result` above.',
        example='7ae47ad7-c401-4c2e-884e-51249058b9b3',
    )
    result: Optional[str] = Field(
        None,
        description=(
            'Result ID. This is `null` unless the job has a `SUCCESS` status (code 3).'
            ' This is the UUID for the query result object that was cached following'
            ' this query run.'
        ),
        example='7ae47ad7-c401-4c2e-884e-51249058b9b3',
    )
    status: Optional[Literal[1, 2, 3, 4, 5]] = Field(
        None,
        description=(
            '\n1. `PENDING` (waiting to run)\n2. `STARTED` (running)\n3. `SUCCESS`\n4.'
            ' `FAILURE`\n5. `CANCELLED` '
        ),
        example=3,
    )
    updated_at: Optional[datetime] = Field(
        None, description='Timestamp when this job was last updated by Databricks SQL.'
    )


class NumberParameterValue(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    name: Optional[str] = Field(
        None,
        description=(
            'The name of this parameter that appears between curly braces in the query'
            ' definition.'
        ),
    )
    value: Optional[float] = Field(
        None, description='An integer or floating-point number.'
    )


class ObjectId(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: UUID = Field(
        ...,
        description='A UUID generated by the application.',
        example='2cca1687-60ff-4886-a445-0230578c864d',
    )


class ObjectType(Enum):
    """
    A singular noun object type
    """

    alert = 'alert'
    dashboard = 'dashboard'
    data_source = 'data_source'
    query = 'query'


class ObjectTypeAndId(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: str = Field(
        ...,
        description=(
            "An object's type and UUID, separated by a forward slash (/) character."
        ),
        example='query/2cca1687-60ff-4886-a445-0230578c864d',
    )


class ObjectTypePlural(Enum):
    """
    Always a plural of the object type.
    """

    alerts = 'alerts'
    dashboards = 'dashboards'
    data_sources = 'data_sources'
    queries = 'queries'


class OwnableObjectType(Enum):
    """
    The singular form of the type of object which can be owned.
    """

    alert = 'alert'
    dashboard = 'dashboard'
    query = 'query'


class ParameterObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    name: Optional[str] = Field(
        None,
        description=(
            'The literal parameter marker that appears between double curly braces in'
            ' the query text.'
        ),
    )
    title: Optional[str] = Field(
        None, description='The text displayed in a parameter picking widget.'
    )
    type: Optional[Literal['text', 'datetime', 'number', 'dropdown-list']] = Field(
        None,
        description='Parameters can have several different types.',
        value={
            'description': 'The default value for this parameter.',
            'type': 'string',
        },
    )


class PermissionLevel(Enum):
    canview = 'CAN_VIEW'
    canrun = 'CAN_RUN'
    canmanage = 'CAN_MANAGE'


class Options1(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    moved_to_trash_at: Optional[datetime] = Field(
        None,
        description=(
            'The timestamp when this query was moved to trash. Only present when the'
            ' `is_archived` property is `true`. Trashed items are deleted after thirty'
            ' days.'
        ),
        example='2020-12-15T18:39:15.837Z',
    )
    parameters: Optional[List[ParameterObject]] = None


class QueryPostContent(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    data_source_id: Optional[str] = Field(
        None,
        description=(
            'The ID of the data source / SQL warehouse where this query will run.'
        ),
        example='2cca1687-60ff-4886-a445-0230578c864d',
    )
    description: Optional[str] = Field(
        None,
        description=(
            'General description that can convey additional information about this'
            ' query such as usage notes.'
        ),
        example=(
            'Summarizes total order dollars for customers in the Europe/Asia region.'
        ),
    )
    name: Optional[str] = Field(
        None,
        description='The name or title of this query to display in list views.',
        example='Orders by month by customer',
    )
    options: Optional[Dict[str, Any]] = Field(
        None,
        description=(
            'Exclusively used for storing a list parameter definitions. A parameter is'
            ' an object with `title`, `name`, `type`, and `value` properties. The'
            ' `value` field here is the default value. It can be overridden at runtime.'
        ),
        example={
            'parameters': [
                {'name': 'param', 'title': 'customer', 'type': 'text', 'value': 'acme'}
            ]
        },
    )
    query: Optional[str] = Field(
        None,
        description='The text of the query.',
        example='SELECT field FROM table WHERE field = {{ param }}',
    )
    schedule: Optional[Dict[str, Any]] = Field(
        None,
        description=(
            'JSON object that describes the scheduled execution frequency. A schedule'
            ' object includes `interval`, `time`, `day_of_week`, and `until` fields. If'
            ' a scheduled is supplied, then only `interval` is required. All other'
            ' field can be `null`.'
        ),
        example={
            'day_of_week': 'Wednesday',
            'interval': 86400,
            'time': '06:15',
            'until': '1991-08-03',
        },
        schema_={'$ref': '#/components/schemas/query_interval_object'},
    )


class QueryResultColumnDescription(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    friendly_name: Optional[str] = None
    name: Optional[str] = None
    type: Optional[str] = None


class QueryResultRowDescription(BaseModel, extra=Extra.allow):
    """
    A JSON object whose keys are the names of each column in this query result and whose values constitute a single row of the result.
    """

    pass

    class Config:
        allow_mutation = False


class QueryIntervalObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    day_of_week: Optional[Any] = Field(
        None,
        description='For weekly runs, a day of the week for run to start.',
        example='Wednesday',
    )
    interval: Optional[int] = Field(
        None, description='Integer number of seconds between runs.', example=900
    )
    time: Optional[Any] = Field(
        None,
        description=(
            'For daily, weekly, and monthly runs, the time-of-day for run to start.'
        ),
        example='00:15',
    )
    until: Optional[Any] = Field(
        None,
        description='A date after which this schedule no longer applies.',
        example='2021-01-07',
    )


class TagString(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: str = Field(
        ...,
        description=(
            'Tags can be applied to dashboards and queries. They are used for filtering'
            ' list views.'
        ),
        example='Payroll',
    )


class TextParameterValue(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    name: Optional[str] = Field(
        None,
        description=(
            'The name of this parameter that appears between curly braces in the query'
            ' definition.'
        ),
    )
    value: Optional[str] = Field(None, description='The parameter value as text.')


class UserObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    email: Optional[EmailStr] = Field(None, example='user@example.com')
    id: Optional[int] = Field(None, example=899619779028913)
    is_db_admin: Optional[bool] = Field(
        None,
        description='Whether this user is an admin in the Databricks workspace.',
        example=True,
    )
    name: Optional[str] = Field(None, example='user@example.com')
    profile_image_url: Optional[str] = Field(
        None,
        description=(
            "The URL for the gravatar profile picture tied to this user's email address"
        ),
        example='https://www.gravatar.com/avatar/732f2b4824846f9a0253f233e0d79bf0?s=40&d=identicon',
    )


class UserAcl(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    permission_level: Optional[PermissionLevel] = None
    user_name: Optional[EmailStr] = None


class VisualizationObject(BaseModel, extra=Extra.allow):
    """
    The visualization description API changes frequently and is unsupported. You can duplicate a visualization by copying description objects received _from the API_ and then using them to create a new one with a POST request to the same endpoint. Databricks does not recommend constructing ad-hoc visualizations entirely in JSON.
    """

    class Config:
        allow_mutation = False

    created_at: Optional[datetime] = None
    description: Optional[str] = Field(
        None,
        description=(
            'A short description of this visualization. This is not displayed in'
            ' the UI.'
        ),
        example='A table of data from this query.',
    )
    id: Optional[int] = Field(
        None, description='The integer ID for this visualization.', example=29830
    )
    name: Optional[str] = Field(
        None,
        description=(
            'The name of the visualization that appears on dashboards and the query'
            ' screen.'
        ),
        example='Chart',
    )
    options: Optional[Dict[str, Any]] = Field(
        None,
        description=(
            'The options object varies widely from one visualization type to the next'
            ' and is unsupported. Databricks does not recommend modifying visualization'
            ' settings in JSON.'
        ),
    )
    type: Optional[str] = Field(
        None,
        description='The type of visualization: chart, table, pivot table, and so on.',
        example='TABLE',
    )
    updated_at: Optional[datetime] = None


class Options2(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    created_at: Optional[Any] = Field(
        None, description='Timestamp when this object was created'
    )
    dashboard_id: Optional[Any] = Field(
        None,
        description=(
            'The dashboard ID to which this widget belongs. Each widget can belong to'
            ' one dashboard.'
        ),
        example='a6d3a7a9-693d-472f-96b2-912622c2ffcd',
    )
    is_hidden: Optional[bool] = Field(
        False,
        alias='isHidden',
        description='Whether this widget is hidden on the dashboard.',
        example=False,
    )
    parameter_mappings: Optional[Dict[str, Any]] = Field(
        None,
        alias='parameterMappings',
        description=(
            'How parameters used by the visualization in this widget relate to other'
            ' widgets on the dashboard. Databricks does not recommend modifying this'
            ' definition in JSON.'
        ),
        example={
            'param': {
                'mapTo': 'param',
                'name': 'param',
                'title': 'This is a parameter',
                'type': 'dashboard-level',
                'value': None,
            }
        },
    )
    position: Optional[Dict[str, Any]] = Field(
        None,
        description=(
            'Coordinates of this widget on a dashboard. This portion of the API changes'
            ' frequently and is unsupported.'
        ),
    )
    text: Optional[Any] = Field(
        None,
        description=(
            'If this is a textbox widget, the application displays this text. This'
            ' field is ignored if the widget contains a visualization in the'
            ' `visualization` field.'
        ),
    )
    updated_at: Optional[Any] = Field(
        None, description='Timestamp of the last time this object was updated.'
    )


class WidgetObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    id: Optional[int] = Field(
        None, description='The unique ID for this widget.', example=11536
    )
    options: Optional[Options2] = None
    visualization: Optional[VisualizationObject] = None
    width: Optional[int] = Field(None, description='Unused field.', example=1)


class DashboardObject(BaseModel, extra=Extra.allow):
    """
    A JSON representing a dashboard containing widgets of visualizations and text boxes.
    """

    class Config:
        allow_mutation = False

    can_edit: Optional[bool] = Field(
        None,
        description='Whether the authenticated user can edit the query definition.',
        example=True,
    )
    created_at: Optional[datetime] = Field(
        None, description='Timestamp when this dashboard was created.'
    )
    dashboard_filters_enabled: Optional[bool] = Field(
        False,
        description=(
            'In the web application, query filters that share a name are coupled to a'
            ' single selection box if this value is `true`.'
        ),
        example=False,
    )
    id: Optional[str] = Field(
        None,
        description='The ID for this dashboard.',
        example='4e443c27-9f61-4f2e-a12d-ea5668460bf1',
    )
    is_archived: Optional[bool] = Field(
        None,
        description=(
            "Whether a dashboard is trashed. Trashed dashboards won't appear in list"
            " views.  If this boolean is `true`, the `options` property for this"
            " dashboard will include a `moved_to_trash_at` timestamp. Items in Trash"
            " are permanently deleted after 30 days."
        ),
    )
    is_draft: Optional[bool] = Field(
        None,
        description=(
            'Whether a dashboard is a draft. Draft dashboards only appear in list views'
            ' for their owners.'
        ),
    )
    is_favorite: Optional[bool] = Field(
        None,
        description=(
            "Whether this query object appears in the current user's favorites list."
            " This flag determines whether the star icon for favorites is colored in."
        ),
    )
    layout: Optional[List] = Field(None, description='Unused field.', example=[])
    name: Optional[str] = Field(
        None,
        description=(
            'The title of the dashboard that appears in list views and at the top of'
            ' the dashboard page.'
        ),
        example='Sales Dashboard',
    )
    options: Optional[Options] = None
    permission_tier: Optional[PermissionLevel] = None
    refresh_schedules: Optional[List] = Field(
        None, description='Unsupported field.', example=[]
    )
    slug: Optional[str] = Field(
        None,
        description=(
            'URL slug. Usually mirrors the query name with dashes (`-`) instead of'
            ' spaces. Appears in the URL for this query.'
        ),
        example='sales-dashboard',
    )
    tags: Optional[List[TagString]] = None
    updated_at: Optional[datetime] = Field(
        None, description='Timestamp when this dashboard was last updated.'
    )
    user: Optional[UserObject] = None
    user_id: Optional[int] = Field(
        None,
        description='The ID of the user that created and owns this dashboard.',
        example=7878537523656153,
    )
    version: Optional[str] = Field(None, description='Unused field.')
    widgets: Optional[WidgetObject] = None


class GroupAcl(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    group_name: Optional[str] = Field(None, example='admins')
    permission_level: Optional[PermissionLevel] = None


class QueryObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    api_key: Optional[str] = Field(
        None, description='This field is unsupported and is for internal use only.'
    )
    can_edit: Optional[bool] = Field(
        None,
        description=(
            'Describes whether the authenticated user may edit the definition of this'
            ' query.'
        ),
        example=True,
    )
    created_at: Optional[datetime] = Field(
        None,
        description='The timestamp when this query was created.',
        example='2020-12-15T18:39:15.837Z',
    )
    data_source_id: Optional[str] = Field(
        None,
        description=(
            'Data Source ID. The UUID that uniquely identifies this data source / SQL'
            ' warehouse across the API.'
        ),
        example='0c205e24-5db2-4940-adb1-fb13c7ce960b',
    )
    description: Optional[str] = Field(
        None,
        description=(
            'General description that conveys additional information about this query'
            ' such as usage notes.'
        ),
        example=(
            'Summarizes total order dollars for customers in the Europe/Asia region.'
        ),
    )
    id: Optional[UUID] = Field(None, example='dee5cca8-1c79-4b5e-a711-e7f9d241bdf6')
    is_archived: Optional[bool] = Field(
        None,
        description=(
            "Whether the query is trashed. Trashed queries can't be used in dashboards,"
            " or appear in search results. If this boolean is `true`, the `options`"
            " property for this query will include a `moved_to_trash_at` timestamp."
            " Trashed queries are permanently deleted after 30 days."
        ),
    )
    is_draft: Optional[bool] = Field(
        None,
        description=(
            'Whether the query is a draft. Draft queries only appear in list views for'
            ' their owners. Visualizations from draft queries cannot appear on'
            ' dashboards.'
        ),
    )
    is_favorite: Optional[bool] = Field(
        None,
        description=(
            "Whether this query object appears in the current user's favorites list."
            " This flag determines whether the star icon for favorites is colored in."
        ),
        example=True,
    )
    is_safe: Optional[bool] = Field(
        None,
        description=(
            'Text parameter types are not safe from SQL injection for all types of data'
            ' source. Set this Boolean parameter to `true` if a query either does not'
            ' use any text type parameters or uses a data source type where text type'
            ' parameters are handled safely.'
        ),
        example=False,
    )
    last_modified_by: Optional[UserObject] = None
    last_modified_by_id: Optional[int] = Field(
        None,
        description='The ID of the user who last saved changes to this query.',
        example=899619779028913,
    )
    latest_query_data_id: Optional[UUID] = Field(
        None,
        description=(
            'If there is a cached result for this query and user, this field includes'
            ' the query result ID. If this query uses parameters, this field is always'
            ' null.'
        ),
        example='ab281b1a-527a-4789-bcf7-cfc3ba08d910',
    )
    name: Optional[str] = Field(
        None,
        description=(
            'The title of this query that appears in list views, widget headings, and'
            ' on the query page.'
        ),
        example='Orders by month by customer',
    )
    options: Optional[Options1] = None
    permission_tier: Optional[PermissionLevel] = None
    query: Optional[str] = Field(
        None,
        description='The text of the query to be run.',
        example='SELECT field FROM table WHERE field = {{ param }}',
    )
    query_hash: Optional[str] = Field(
        None,
        description=(
            'A SHA-256 hash of the query text along with the authenticated user ID.'
        ),
        example='08314a3361c4795528acd1139a2b7c58',
    )
    schedule: Optional[QueryIntervalObject] = None
    tags: Optional[List[TagString]] = None
    updated_at: Optional[datetime] = Field(
        None,
        description='The timestamp at which this query was last updated.',
        example='2021-01-07T20:29:24.289Z',
    )
    user: Optional[UserObject] = None
    user_id: Optional[int] = Field(
        None,
        description='The ID of the user who created this query.',
        example=899619779028913,
    )
    version: Optional[str] = Field(None, description='Unused field.')
    visualizations: Optional[List[VisualizationObject]] = None


class Data(BaseModel, extra=Extra.allow):
    """
    Serialized tabular data from this query.
    """

    class Config:
        allow_mutation = False

    columns: Optional[List[QueryResultColumnDescription]] = None
    rows: Optional[List[QueryResultRowDescription]] = None


class QueryResult(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    data: Optional[Data] = Field(
        None, description='Serialized tabular data from this query.'
    )
    data_source_id: Optional[str] = Field(
        None, example='af574c41-045c-4d50-b078-67d78b766128'
    )
    id: Optional[str] = Field(
        None,
        description=(
            'The UUID for this cached query result. Each cached result is keyed with'
            ' the current user name and query text.'
        ),
        example='06192bfa-cd91-4b57-9a81-df98be5570c2',
    )
    query: Optional[str] = Field(
        None,
        description=(
            'The complete query that generated this result, including parameter values'
            ' used at runtime.'
        ),
        example='SELECT field FROM table WHERE field = 100',
    )
    query_hash: Optional[str] = Field(
        None,
        description=(
            'A SHA-256 hash of the query text that generated this result, including'
            ' actual parameter values.'
        ),
        example='08314a3361c4795528acd1139a2b7c58',
    )
    retrieved_at: Optional[datetime] = Field(
        None,
        description='Timestamp when this result was retreived from the database.',
        example='1991-08-03T13:02:35.916Z',
    )
    runtime: Optional[Any] = Field(
        None, description='Query run time in seconds.', example=0.850272178649902
    )


class QueryResultObject(BaseModel, extra=Extra.allow):
    """
    A JSON response body that contains a serialized result table.
    """

    class Config:
        allow_mutation = False

    query_result: Optional[QueryResult] = None


class AccessControlList(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: List[Union[UserAcl, GroupAcl]] = Field(
        ..., example=[{'group_name': 'admins', 'permission': 'CAN_MANAGE'}]
    )
