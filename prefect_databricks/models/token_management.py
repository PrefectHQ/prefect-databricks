# generated by datamodel-codegen:
#   filename:  token-management-2.0-aws.yaml
#   timestamp: 2022-06-29T19:47:40+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field


class Error(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    error_code: Optional[str] = Field(None, description='Error code')
    message: Optional[str] = Field(
        None,
        description=(
            'Human-readable error message that describes the cause of the error.'
        ),
    )


class WorkspaceConfObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    enable_tokens_config: Optional[bool] = Field(
        None,
        alias='enableTokensConfig',
        description='Enable or disable personal access tokens for this workspace.',
    )
    max_token_lifetime_days: Optional[str] = Field(
        None,
        alias='maxTokenLifetimeDays',
        description=(
            'Maximum token lifetime of new tokens in days, as an integer. If zero, new'
            ' tokens are permitted to have no lifetime limit. Negative numbers are'
            ' unsupported. **WARNING:** This limit only applies to new tokens, so there'
            ' may be tokens with lifetimes longer than this value, including unlimited'
            ' lifetime. Such tokens may have been created before the current maximum'
            ' token lifetime was set. To review existing tokens, see the [get tokens'
            ' API](#operation/get-tokens).'
        ),
        example='90',
    )


class ApplicationId(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: str = Field(
        ...,
        description='Application ID of the service principal.',
        example='6f5ccf28-d83a-4957-9bfb-5bbfac551410',
    )


class Comment(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: str = Field(
        ...,
        description=(
            'Comment that describes the purpose of the token, specified by the token'
            ' creator.'
        ),
        example='This is for the ABC department automation scripts.',
    )


class CommentInput(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: str = Field(
        ...,
        description='Comment that describes the purpose of the token.',
        example='This is for the ABC department automation scripts.',
    )


class CreatedById(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: float = Field(
        ...,
        description=(
            'User ID of the user that created the token.[" Typically matches owner_id,'
            ' except for a token created on behalf of a service principal."]'
        ),
        example=202480738464078,
    )


class CreatedByUsername(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: str = Field(
        ...,
        description='Username of the user that created the token.',
        example='jsmith@example.com',
    )


class CreationTime(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: float = Field(
        ..., description='Timestamp when the token was created', example=1580265020299
    )


class ExpiryTime(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: float = Field(
        ..., description='Timestamp when the token expires', example=1580265020299
    )


class LifetimeSeconds(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: float = Field(
        ..., description='The number of seconds before the token expires.', example=3600
    )


class ObjectId(Enum):
    """
    Always the value `authorization/tokens`. This field is returned for consistency with other Databricks object permissions APIs.
    """

    authorization_tokens = 'authorization/tokens'


class ObjectType(Enum):
    """
    Always the value `tokens`. This field is returned for consistency with other Databricks object permissions APIs.
    """

    tokens = 'tokens'


class OwnerId(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: float = Field(
        ...,
        description=(
            'User ID of the user that owns the token.[" Typically matches owner_id,'
            ' except for a token created on behalf of a service principal."]'
        ),
        example=202480738464078,
    )


class TokenId(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: str = Field(
        ...,
        description='ID of the token',
        example='5684c955822ac792a51ae2aeb80190f13457bab3e2e2934c133a08b38454816c',
    )


class CreateOboTokenRequest(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    application_id: ApplicationId
    comment: CommentInput
    lifetime_seconds: LifetimeSeconds


class TokenInfoObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    comment: Optional[Comment] = None
    created_by_id: Optional[CreatedById] = None
    created_by_username: Optional[CreatedByUsername] = None
    creation_time: Optional[CreationTime] = None
    expiry_time: Optional[ExpiryTime] = None
    owner_id: Optional[OwnerId] = None
    token_id: Optional[TokenId] = None


class GetTokenManagementResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    token_infos: Optional[List[TokenInfoObject]] = None
