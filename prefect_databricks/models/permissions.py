# generated by datamodel-codegen:
#   filename:  permissions-2.0-aws.yaml
#   timestamp: 2022-06-29T19:47:38+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Literal, Optional, Union

from pydantic import BaseModel, Field


class CanAttachToObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    description: Optional[
        Literal['Permission to attach to this object. Applies to clusters and pools.']
    ] = None
    permission_level: Optional[Literal['CAN_ATTACH_TO']] = None


class CanEditObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    description: Optional[
        Literal[
            'Permission to edit this object. Applies to notebooks, directories,'
            ' registered models, and repos.'
        ]
    ] = None
    permission_level: Optional[Literal['CAN_EDIT']] = None


class CanManageObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    description: Optional[
        Literal[
            'Permission to manage this object. Applies to clusters, pools, jobs,'
            ' pipelines, notebooks, directories, registered models, and repos.'
        ]
    ] = None
    permission_level: Optional[Literal['CAN_MANAGE']] = None


class CanManagePermissionLevel(Enum):
    """
    CAN_MANAGE permission level
    """

    canmanage = 'CAN_MANAGE'


class CanManageProductionVersionsObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    description: Optional[
        Literal[
            'Permission to manage production versions of this object. Applies to'
            ' registered models.'
        ]
    ] = None
    permission_level: Optional[Literal['CAN_MANAGE_PRODUCTION_VERSIONS']] = None


class CanManageRunObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    description: Optional[
        Literal['Permission to manage or run this object. Applies to jobs.']
    ] = None
    permission_level: Optional[Literal['CAN_MANAGE_RUN']] = None


class CanManageStagingVersionsObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    description: Optional[
        Literal[
            'Permission to manage staging versions of this object. Applies to'
            ' registered models.'
        ]
    ] = None
    permission_level: Optional[Literal['CAN_MANAGE_STAGING_VERSIONS']] = None


class CanReadObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    description: Optional[
        Literal[
            'Permission to read this object. Applies to notebooks, directories,'
            ' registered models, and repos.'
        ]
    ] = None
    permission_level: Optional[Literal['CAN_READ']] = None


class CanRestartObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    description: Optional[
        Literal['Permission to restart this object. Applies to clusters.']
    ] = None
    permission_level: Optional[Literal['CAN_RESTART']] = None


class CanRunObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    description: Optional[
        Literal[
            'Permission to run this object. Applies to notebooks, pipelines,'
            ' directories, and repos.'
        ]
    ] = None
    permission_level: Optional[Literal['CAN_RUN']] = None


class CanUseObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    description: Optional[
        Literal['Permission to use this object. Applies to tokens and passwords.']
    ] = None
    permission_level: Optional[Literal['CAN_USE']] = None


class CanViewObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    description: Optional[
        Literal['Permission to view this object. Applies to jobs and pipelines.']
    ] = None
    permission_level: Optional[Literal['CAN_VIEW']] = None


class ClustersPermissionLevelObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: Union[CanManageObject, CanRestartObject, CanAttachToObject] = Field(
        ..., example='CAN_RESTART'
    )


class DirectoriesPermissionLevelObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: Union[
        CanReadObject, CanRunObject, CanEditObject, CanManageObject
    ] = Field(..., example='CAN_MANAGE')


class Error(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    error_code: Optional[str] = Field(None, description='Error code')
    message: Optional[str] = Field(
        None,
        description=(
            'Human-readable error message that describes the cause of the error.'
        ),
    )


class ExperimentsPermissionLevelObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: Union[CanReadObject, CanEditObject, CanManageObject] = Field(
        ..., example='CAN_EDIT'
    )


class GetClustersPermissionLevels(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    permission_levels: Optional[List[ClustersPermissionLevelObject]] = None


class GetDirectoriesPermissionLevels(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    permission_levels: Optional[List[DirectoriesPermissionLevelObject]] = None


class GetExperimentsPermissionLevels(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    permission_levels: Optional[List[ExperimentsPermissionLevelObject]] = None


class InstancePoolsPermissionLevelObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: Union[CanManageObject, CanAttachToObject] = Field(
        ..., example='CAN_ATTACH_TO'
    )


class IsOwnerObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    description: Optional[
        Literal[
            'Permission that represents ownership of this object. Applies to jobs and'
            ' pipelines.'
        ]
    ] = None
    permission_level: Optional[Literal['IS_OWNER']] = None


class JobsPermissionLevelObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: Union[
        IsOwnerObject, CanManageRunObject, CanViewObject, CanManageObject
    ] = Field(..., example='CAN_VIEW')


class NotebooksPermissionLevelObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: Union[
        CanReadObject, CanRunObject, CanEditObject, CanManageObject
    ] = Field(..., example='CAN_RUN')


class PasswordsPermissionLevelObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: CanUseObject


class PermissionLevelObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: Union[CanManageObject, CanUseObject]


class PipelinesPermissionLevelObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: Union[
        IsOwnerObject, CanManageObject, CanRunObject, CanViewObject
    ] = Field(..., example='CAN_VIEW')


class RegisteredModelsPermissionLevelObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: Union[
        CanReadObject,
        CanEditObject,
        CanManageStagingVersionsObject,
        CanManageProductionVersionsObject,
        CanManageObject,
    ] = Field(..., example='CAN_EDIT')


class ReposPermissionLevelObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: Union[
        CanReadObject, CanRunObject, CanEditObject, CanManageObject
    ] = Field(..., example='CAN_MANAGE')


class SqlWarehousesPermissionLevelObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: Union[CanUseObject, CanManageObject] = Field(..., example='CAN_USE')


class TokensPermissionLevelForPatch(Enum):
    """
        Must be set to `CAN_USE`, which controls who can use or create tokens.

    The `CAN_MANAGE` permission is for administrators only and cannot be set explicitly using the `PATCH` API because this permission is automatically tied to membership in the `admins` groups.

    For details, see the [required token permission levels for various actions](#tag/Token-permissions).
    """

    canuse = 'CAN_USE'


class TokensPermissionLevelForPut(Enum):
    """
        For all objects other than groups with name `admins`, this must be set to `CAN_USE`, which controls who can use or create tokens.

    For the group with name `admins`, this must be granted `CAN_MANAGE`, which controls who can use or create tokens. When using the HTTP `PUT` request to set and replace all existing permissions, you must set this explicitly for the `admins` group.

    Note that the `CAN_MANAGE` permission is for administrators in the `admins` group only and cannot be set for any other object.

    For details, see the [required token permission levels for various actions](#tag/Token-permissions).
    """

    canuse = 'CAN_USE'
    canmanage = 'CAN_MANAGE'


class TokensPermissionLevelForResponse(Enum):
    """
        For all objects other than groups with name `admins`, this is `CAN_USE`, which controls who can use or create tokens.

    For the group with name `admins`, this is `CAN_MANAGE`, which controls who can use or create tokens.

    For details, see the [required token permission levels for various actions](#tag/Token-permissions).
    """

    canuse = 'CAN_USE'
    canmanage = 'CAN_MANAGE'


class ClustersObjectId(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: str = Field(
        ...,
        description=(
            '/\\<object_type\\>/\\<object_id\\>  is returned here for consistency with'
            ' other Databricks object permissions APIs.'
        ),
        example='/clusters/0712-200003-rail519',
    )


class ClustersObjectType(Enum):
    """
    Always the value `cluster`. This field is returned for consistency with other Databricks object permissions APIs.
    """

    cluster = 'cluster'


class DirectoryObjectId(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: str = Field(
        ...,
        description=(
            '/\\<object_type\\>/\\<object_id\\>  is returned here for consistency with'
            ' other Databricks object permissions APIs.'
        ),
        example='/directories/112',
    )


class DirectoryObjectType(Enum):
    """
    Always the value `directory`. This field is returned for consistency with other Databricks object permissions APIs.
    """

    directory = 'directory'


class ExperimentObjectId(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: str = Field(
        ...,
        description=(
            '/\\<object_type\\>/\\<object_id\\>  is returned here for consistency with'
            ' other Databricks object permissions APIs.'
        ),
        example='/experiments/2778373292881055',
    )


class ExperimentObjectType(Enum):
    """
    Always the value `experiment`. This field is returned for consistency with other Databricks object permissions APIs.
    """

    experiment = 'experiment'


class GroupName(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: str = Field(
        ...,
        description=(
            'Group name. There are two built-in groups: `users` for all users, and'
            ' `admins` for administrators.'
        ),
        example='users',
    )


class Inherited(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: bool = Field(
        ...,
        description=(
            'Specifies whether the permission is inherited from a parent ACL rather'
            ' than set explicitly. See related property `inherited_from_object`.'
        ),
        example=False,
    )


class InheritedFromObject(BaseModel, extra=Extra.allow):
    """
    The list of parent ACL object IDs that contribute to inherited permission on an ACL object. This is only defined if related property `inherited` is set to `true`.
    """

    class Config:
        allow_mutation = False

    __root__: List[str] = Field(
        ...,
        description=(
            'The list of parent ACL object IDs that contribute to inherited permission'
            ' on an ACL object. This is only defined if related property `inherited` is'
            ' set to `true`.'
        ),
        example='/<object-type>/',
    )


class InstancePoolObjectId(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: str = Field(
        ...,
        description=(
            '/\\<object_type\\>/\\<object_id\\>  is returned here for consistency with'
            ' other Databricks object permissions APIs.'
        ),
        example='/instance-pools/0627-190120-two15-pool-6wmqH7IJ',
    )


class InstancePoolObjectType(Enum):
    """
    Always the value `instance-pool`. This field is returned for consistency with other Databricks object permissions APIs.
    """

    instance_pool = 'instance-pool'


class JobObjectId(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: str = Field(
        ...,
        description=(
            '/\\<object_type\\>/\\<object_id\\>  is returned here for consistency with'
            ' other Databricks object permissions APIs.'
        ),
        example='/jobs/123',
    )


class JobObjectType(Enum):
    """
    Always the value `job`. This field is returned for consistency with other Databricks object permissions APIs.
    """

    job = 'job'


class NotebookObjectId(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: str = Field(
        ...,
        description=(
            '/\\<object_type\\>/\\<object_id\\>  is returned here for consistency with'
            ' other Databricks object permissions APIs.'
        ),
        example='/notebooks/108',
    )


class NotebookObjectType(Enum):
    """
    Always the value `notebook`. This field is returned for consistency with other Databricks object permissions APIs.
    """

    notebook = 'notebook'


class ObjectId(Enum):
    """
    Always the value `authorization/tokens`. This field is returned for consistency with other Databricks object permissions APIs.
    """

    authorization_tokens = 'authorization/tokens'


class ObjectType(Enum):
    """
    Always the value `tokens`. This field is returned for consistency with other Databricks object permissions APIs.
    """

    tokens = 'tokens'


class PasswordsObjectId(Enum):
    """
    Always the value `authorization/passwords`. This field is returned for consistency with other Databricks object permissions APIs.
    """

    authorization_passwords = 'authorization/passwords'


class PasswordsObjectType(Enum):
    """
    Always the value `passwords`. This field is returned for consistency with other Databricks object permissions APIs.
    """

    passwords = 'passwords'


class PipelineObjectId(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: str = Field(
        ...,
        description=(
            '/\\<object_type\\>/\\<object_id\\>  is returned here for consistency with'
            ' other Databricks object permissions APIs.'
        ),
        example='/pipelines/123',
    )


class PipelineObjectType(Enum):
    """
    Always the value `pipeline`. This field is returned for consistency with other Databricks object permissions APIs.
    """

    pipeline = 'pipeline'


class RegisteredModelObjectId(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: str = Field(
        ...,
        description=(
            '/\\<object_type\\>/\\<object_id\\>  is returned here for consistency with'
            ' other Databricks object permissions APIs.'
        ),
        example='/registered-models/1234-5678-9012-3456',
    )


class RegisteredModelObjectType(Enum):
    """
    Always the value `registered-model`. This field is returned for consistency with other Databricks object permissions APIs.
    """

    registered_model = 'registered-model'


class RepoObjectId(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: str = Field(
        ...,
        description=(
            '/\\<object_type\\>/\\<object_id\\>  is returned here for consistency with'
            ' other Databricks object permissions APIs.'
        ),
        example='/repos/108',
    )


class RepoObjectType(Enum):
    """
    Always the value `repo`. This field is returned for consistency with other Databricks object permissions APIs.
    """

    repo = 'repo'


class ServicePrincipalName(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: str = Field(
        ...,
        description=(
            '`applicationId` value (a GUID) that uniquely identifies a service'
            ' principal.'
        ),
        example='9f0621ee-b52b-11ea-b3de-0242ac130004',
    )


class SqlwarehousesObjectId(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: str = Field(
        ...,
        description=(
            '/\\<object_type\\>/\\<object_id\\>  is returned here for consistency with'
            ' other Databricks object permissions APIs.'
        ),
        example='/warehouses/3930839871f3d4ef',
    )


class SqlwarehousesObjectType(Enum):
    """
    Always the value `warehouses`. This field is returned for consistency with other Databricks object permissions APIs.
    """

    sqlwarehouse = 'sqlwarehouse'


class UserName(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: str = Field(
        ..., description='Email address for a user.', example='jsmith@example.com'
    )


class CanManagePermissionsObjectResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    inherited: Optional[Inherited] = None
    inherited_from_object: Optional[List[str]] = Field(
        None,
        description=(
            'The list of parent ACL object IDs that contribute to inherited permission'
            ' on an ACL object. This is only defined if related property `inherited` is'
            ' set to `true`.'
        ),
        example='/<object-type>/',
    )
    permission_level: Optional[TokensPermissionLevelForResponse] = None


class ClustersGroupObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    group_name: Optional[GroupName] = None
    permission_level: Optional[ClustersPermissionLevelObject] = None


class ClustersPermissionsObjectResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    inherited: Optional[Inherited] = None
    inherited_from_object: Optional[InheritedFromObject] = None
    permission_level: Optional[ClustersPermissionLevelObject] = None


class ClustersServicePrincipalObject(BaseModel, extra=Extra.allow):
    """
    Permissions on a service principal.
    """

    class Config:
        allow_mutation = False

    permission_level: Optional[ClustersPermissionLevelObject] = None
    service_principal_name: Optional[ServicePrincipalName] = None


class ClustersUserObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    permission_level: Optional[ClustersPermissionLevelObject] = None
    user_name: Optional[UserName] = None


class DirectoriesGroupObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    group_name: Optional[GroupName] = None
    permission_level: Optional[DirectoriesPermissionLevelObject] = None


class DirectoriesPermissionsObjectResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    inherited: Optional[Inherited] = None
    inherited_from_object: Optional[InheritedFromObject] = None
    permission_level: Optional[DirectoriesPermissionLevelObject] = None


class DirectoriesServicePrincipalObject(BaseModel, extra=Extra.allow):
    """
    Permissions on a service principal.
    """

    class Config:
        allow_mutation = False

    permission_level: Optional[DirectoriesPermissionLevelObject] = None
    service_principal_name: Optional[ServicePrincipalName] = None


class DirectoriesUserObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    permission_level: Optional[DirectoriesPermissionLevelObject] = None
    user_name: Optional[UserName] = None


class ExperimentsGroupObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    group_name: Optional[GroupName] = None
    permission_level: Optional[ExperimentsPermissionLevelObject] = None


class ExperimentsPermissionsObjectResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    inherited: Optional[Inherited] = None
    inherited_from_object: Optional[InheritedFromObject] = None
    permission_level: Optional[ExperimentsPermissionLevelObject] = None


class ExperimentsServicePrincipalObject(BaseModel, extra=Extra.allow):
    """
    Permissions on a service principal.
    """

    class Config:
        allow_mutation = False

    permission_level: Optional[ExperimentsPermissionLevelObject] = None
    service_principal_name: Optional[ServicePrincipalName] = None


class ExperimentsUserObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    permission_level: Optional[ExperimentsPermissionLevelObject] = None
    user_name: Optional[UserName] = None


class GetInstancePoolsPermissionLevels(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    permission_levels: Optional[List[InstancePoolsPermissionLevelObject]] = None


class GetJobsPermissionLevels(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    permission_levels: Optional[List[JobsPermissionLevelObject]] = None


class GetNotebooksPermissionLevels(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    permission_levels: Optional[List[NotebooksPermissionLevelObject]] = None


class GetPasswordsPermissionLevels(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    permission_levels: Optional[List[PasswordsPermissionLevelObject]] = None


class GetPipelinesPermissionLevels(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    permission_levels: Optional[List[PipelinesPermissionLevelObject]] = None


class GetRegisteredModelsPermissionLevels(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    permission_levels: Optional[List[RegisteredModelsPermissionLevelObject]] = None


class GetReposPermissionLevels(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    permission_levels: Optional[List[ReposPermissionLevelObject]] = None


class GetSqlWarehousesPermissionLevels(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    permission_levels: Optional[List[SqlWarehousesPermissionLevelObject]] = None


class GetTokensPermissionLevels(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    permission_levels: Optional[List[PermissionLevelObject]] = None


class InstancePoolsGroupObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    group_name: Optional[GroupName] = None
    permission_level: Optional[InstancePoolsPermissionLevelObject] = None


class InstancePoolsPermissionsObjectResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    inherited: Optional[Inherited] = None
    inherited_from_object: Optional[InheritedFromObject] = None
    permission_level: Optional[InstancePoolsPermissionLevelObject] = None


class InstancePoolsServicePrincipalObject(BaseModel, extra=Extra.allow):
    """
    Permissions on a service principal.
    """

    class Config:
        allow_mutation = False

    permission_level: Optional[InstancePoolsPermissionLevelObject] = None
    service_principal_name: Optional[ServicePrincipalName] = None


class InstancePoolsUserObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    permission_level: Optional[InstancePoolsPermissionLevelObject] = None
    user_name: Optional[UserName] = None


class JobsGroupObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    group_name: Optional[GroupName] = None
    permission_level: Optional[JobsPermissionLevelObject] = None


class JobsPermissionsObjectResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    inherited: Optional[Inherited] = None
    inherited_from_object: Optional[InheritedFromObject] = None
    permission_level: Optional[JobsPermissionLevelObject] = None


class JobsServicePrincipalObject(BaseModel, extra=Extra.allow):
    """
    Permissions on a service principal.
    """

    class Config:
        allow_mutation = False

    permission_level: Optional[JobsPermissionLevelObject] = None
    service_principal_name: Optional[ServicePrincipalName] = None


class JobsUserObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    permission_level: Optional[JobsPermissionLevelObject] = None
    user_name: Optional[UserName] = None


class NotebooksGroupObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    group_name: Optional[GroupName] = None
    permission_level: Optional[NotebooksPermissionLevelObject] = None


class NotebooksPermissionsObjectResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    inherited: Optional[Inherited] = None
    inherited_from_object: Optional[InheritedFromObject] = None
    permission_level: Optional[NotebooksPermissionLevelObject] = None


class NotebooksServicePrincipalObject(BaseModel, extra=Extra.allow):
    """
    Permissions on a service principal.
    """

    class Config:
        allow_mutation = False

    permission_level: Optional[NotebooksPermissionLevelObject] = None
    service_principal_name: Optional[ServicePrincipalName] = None


class NotebooksUserObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    permission_level: Optional[NotebooksPermissionLevelObject] = None
    user_name: Optional[UserName] = None


class PasswordsGroupObjectForPatch(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    group_name: Optional[GroupName] = None
    permission_level: Optional[PasswordsPermissionLevelObject] = None


class PasswordsGroupObjectForPut(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    group_name: Optional[GroupName] = None
    permission_level: Optional[PasswordsPermissionLevelObject] = None


class PasswordsPermissionsObjectResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    inherited: Optional[Inherited] = None
    inherited_from_object: Optional[InheritedFromObject] = None
    permission_level: Optional[PasswordsPermissionLevelObject] = None


class PasswordsUserObjectForPatch(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    permission_level: Optional[PasswordsPermissionLevelObject] = None
    user_name: Optional[UserName] = None


class PasswordsUserObjectForPut(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    permission_level: Optional[PasswordsPermissionLevelObject] = None
    user_name: Optional[UserName] = None


class PipelinesGroupObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    group_name: Optional[GroupName] = None
    permission_level: Optional[PipelinesPermissionLevelObject] = None


class PipelinesPermissionsObjectResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    inherited: Optional[Inherited] = None
    inherited_from_object: Optional[InheritedFromObject] = None
    permission_level: Optional[PipelinesPermissionLevelObject] = None


class PipelinesServicePrincipalObject(BaseModel, extra=Extra.allow):
    """
    Permissions on a service principal.
    """

    class Config:
        allow_mutation = False

    permission_level: Optional[PipelinesPermissionLevelObject] = None
    service_principal_name: Optional[ServicePrincipalName] = None


class PipelinesUserObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    permission_level: Optional[PipelinesPermissionLevelObject] = None
    user_name: Optional[UserName] = None


class RegisteredModelsGroupObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    group_name: Optional[GroupName] = None
    permission_level: Optional[RegisteredModelsPermissionLevelObject] = None


class RegisteredModelsPermissionsObjectResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    inherited: Optional[Inherited] = None
    inherited_from_object: Optional[InheritedFromObject] = None
    permission_level: Optional[RegisteredModelsPermissionLevelObject] = None


class RegisteredModelsServicePrincipalObject(BaseModel, extra=Extra.allow):
    """
    Permissions on a service principal.
    """

    class Config:
        allow_mutation = False

    permission_level: Optional[RegisteredModelsPermissionLevelObject] = None
    service_principal_name: Optional[ServicePrincipalName] = None


class RegisteredModelsUserObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    permission_level: Optional[RegisteredModelsPermissionLevelObject] = None
    user_name: Optional[UserName] = None


class ReposGroupObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    group_name: Optional[GroupName] = None
    permission_level: Optional[ReposPermissionLevelObject] = None


class ReposPermissionsObjectResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    inherited: Optional[Inherited] = None
    inherited_from_object: Optional[InheritedFromObject] = None
    permission_level: Optional[ReposPermissionLevelObject] = None


class ReposServicePrincipalObject(BaseModel, extra=Extra.allow):
    """
    Permissions on a service principal.
    """

    class Config:
        allow_mutation = False

    permission_level: Optional[ReposPermissionLevelObject] = None
    service_principal_name: Optional[ServicePrincipalName] = None


class ReposUserObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    permission_level: Optional[ReposPermissionLevelObject] = None
    user_name: Optional[UserName] = None


class SqlWarehousesGroupObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    group_name: Optional[GroupName] = None
    permission_level: Optional[SqlWarehousesPermissionLevelObject] = None


class SqlWarehousesPermissionsObjectResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    inherited: Optional[Inherited] = None
    inherited_from_object: Optional[InheritedFromObject] = None
    permission_level: Optional[SqlWarehousesPermissionLevelObject] = None


class SqlWarehousesServicePrincipalObject(BaseModel, extra=Extra.allow):
    """
    Permissions on a service principal.
    """

    class Config:
        allow_mutation = False

    permission_level: Optional[SqlWarehousesPermissionLevelObject] = None
    service_principal_name: Optional[ServicePrincipalName] = None


class SqlWarehousesUserObject(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    permission_level: Optional[SqlWarehousesPermissionLevelObject] = None
    user_name: Optional[UserName] = None


class TokensGroupObjectForPatch(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    group_name: Optional[GroupName] = None
    permission_level: Optional[TokensPermissionLevelForPatch] = None


class TokensGroupObjectForPut(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    group_name: Optional[GroupName] = None
    permission_level: Optional[TokensPermissionLevelForPut] = None


class TokensPermissionsObjectResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    inherited: Optional[Inherited] = None
    inherited_from_object: Optional[InheritedFromObject] = None
    permission_level: Optional[TokensPermissionLevelForResponse] = None


class TokensServicePrincipalObjectForPatch(BaseModel, extra=Extra.allow):
    """
    Permissions on a service principal.
    """

    class Config:
        allow_mutation = False

    permission_level: Optional[TokensPermissionLevelForPatch] = None
    service_principal_name: Optional[ServicePrincipalName] = None


class TokensServicePrincipalObjectForPut(BaseModel, extra=Extra.allow):
    """
    Permissions on a service principal.
    """

    class Config:
        allow_mutation = False

    permission_level: Optional[TokensPermissionLevelForPut] = None
    service_principal_name: Optional[ServicePrincipalName] = None


class TokensUserObjectForPatch(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    permission_level: Optional[TokensPermissionLevelForPatch] = None
    user_name: Optional[UserName] = None


class TokensUserObjectForPut(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    permission_level: Optional[TokensPermissionLevelForPut] = None
    user_name: Optional[UserName] = None


class CanManageAllPermissionsObjectResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: List[CanManagePermissionsObjectResponse]


class ClustersAccessControlListsObjectForPatch(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: Union[
        ClustersUserObject, ClustersGroupObject, ClustersServicePrincipalObject
    ]


class ClustersAccessControlListsObjectForPut(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: Union[
        ClustersUserObject, ClustersGroupObject, ClustersServicePrincipalObject
    ]


class ClustersAllPermissionsObjectResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: List[ClustersPermissionsObjectResponse]


class ClustersGroupObjectForResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    all_permissions: Optional[List[ClustersAllPermissionsObjectResponse]] = None
    group_name: Optional[GroupName] = None


class ClustersServicePrincipalObjectForResponse(BaseModel, extra=Extra.allow):
    """
    Permissions on a service principal.
    """

    class Config:
        allow_mutation = False

    all_permissions: Optional[List[ClustersAllPermissionsObjectResponse]] = Field(
        None, description='Permissions for a service principal.'
    )
    service_principal_name: Optional[ServicePrincipalName] = None


class ClustersUserObjectForResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    all_permissions: Optional[ClustersAllPermissionsObjectResponse] = None
    user_name: Optional[UserName] = None


class DirectoriesAccessControlListsObjectForPatch(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: Union[
        DirectoriesUserObject, DirectoriesGroupObject, DirectoriesServicePrincipalObject
    ]


class DirectoriesAccessControlListsObjectForPut(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: Union[
        DirectoriesUserObject, DirectoriesGroupObject, DirectoriesServicePrincipalObject
    ]


class DirectoriesAllPermissionsObjectResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: List[DirectoriesPermissionsObjectResponse]


class DirectoriesGroupObjectForResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    all_permissions: Optional[List[DirectoriesAllPermissionsObjectResponse]] = None
    group_name: Optional[GroupName] = None


class DirectoriesServicePrincipalObjectForResponse(BaseModel, extra=Extra.allow):
    """
    Permissions on a service principal.
    """

    class Config:
        allow_mutation = False

    all_permissions: Optional[List[DirectoriesAllPermissionsObjectResponse]] = Field(
        None, description='Permissions for a service principal.'
    )
    service_principal_name: Optional[ServicePrincipalName] = None


class DirectoriesUserObjectForResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    all_permissions: Optional[DirectoriesAllPermissionsObjectResponse] = None
    user_name: Optional[UserName] = None


class ExperimentsAccessControlListsObjectForPatch(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: Union[
        ExperimentsUserObject, ExperimentsGroupObject, ExperimentsServicePrincipalObject
    ]


class ExperimentsAccessControlListsObjectForPut(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: Union[
        ExperimentsUserObject, ExperimentsGroupObject, ExperimentsServicePrincipalObject
    ]


class ExperimentsAllPermissionsObjectResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: List[ExperimentsPermissionsObjectResponse]


class ExperimentsGroupObjectForResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    all_permissions: Optional[List[ExperimentsAllPermissionsObjectResponse]] = None
    group_name: Optional[GroupName] = None


class ExperimentsServicePrincipalObjectForResponse(BaseModel, extra=Extra.allow):
    """
    Permissions on a service principal.
    """

    class Config:
        allow_mutation = False

    all_permissions: Optional[List[ExperimentsAllPermissionsObjectResponse]] = Field(
        None, description='Permissions for a service principal.'
    )
    service_principal_name: Optional[ServicePrincipalName] = None


class ExperimentsUserObjectForResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    all_permissions: Optional[ExperimentsAllPermissionsObjectResponse] = None
    user_name: Optional[UserName] = None


class InstancePoolsAccessControlListsObjectForPatch(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: Union[
        InstancePoolsUserObject,
        InstancePoolsGroupObject,
        InstancePoolsServicePrincipalObject,
    ]


class InstancePoolsAccessControlListsObjectForPut(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: Union[
        InstancePoolsUserObject,
        InstancePoolsGroupObject,
        InstancePoolsServicePrincipalObject,
    ]


class InstancePoolsAllPermissionsObjectResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: List[InstancePoolsPermissionsObjectResponse]


class InstancePoolsGroupObjectForResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    all_permissions: Optional[List[InstancePoolsAllPermissionsObjectResponse]] = None
    group_name: Optional[GroupName] = None


class InstancePoolsServicePrincipalObjectForResponse(BaseModel, extra=Extra.allow):
    """
    Permissions on a service principal.
    """

    class Config:
        allow_mutation = False

    all_permissions: Optional[List[InstancePoolsAllPermissionsObjectResponse]] = Field(
        None, description='Permissions for a service principal.'
    )
    service_principal_name: Optional[ServicePrincipalName] = None


class InstancePoolsUserObjectForResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    all_permissions: Optional[InstancePoolsAllPermissionsObjectResponse] = None
    user_name: Optional[UserName] = None


class JobsAccessControlListsObjectForPatch(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: Union[JobsUserObject, JobsGroupObject, JobsServicePrincipalObject]


class JobsAccessControlListsObjectForPut(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: Union[JobsUserObject, JobsGroupObject, JobsServicePrincipalObject]


class JobsAllPermissionsObjectResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: List[JobsPermissionsObjectResponse]


class JobsGroupObjectForResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    all_permissions: Optional[List[JobsAllPermissionsObjectResponse]] = None
    group_name: Optional[GroupName] = None


class JobsServicePrincipalObjectForResponse(BaseModel, extra=Extra.allow):
    """
    Permissions on a service principal.
    """

    class Config:
        allow_mutation = False

    all_permissions: Optional[List[JobsAllPermissionsObjectResponse]] = Field(
        None, description='Permissions for a service principal.'
    )
    service_principal_name: Optional[ServicePrincipalName] = None


class JobsUserObjectForResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    all_permissions: Optional[JobsAllPermissionsObjectResponse] = None
    user_name: Optional[UserName] = None


class NotebooksAccessControlListsObjectForPatch(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: Union[
        NotebooksUserObject, NotebooksGroupObject, NotebooksServicePrincipalObject
    ]


class NotebooksAccessControlListsObjectForPut(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: Union[
        NotebooksUserObject, NotebooksGroupObject, NotebooksServicePrincipalObject
    ]


class NotebooksAllPermissionsObjectResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: List[NotebooksPermissionsObjectResponse]


class NotebooksGroupObjectForResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    all_permissions: Optional[List[NotebooksAllPermissionsObjectResponse]] = None
    group_name: Optional[GroupName] = None


class NotebooksServicePrincipalObjectForResponse(BaseModel, extra=Extra.allow):
    """
    Permissions on a service principal.
    """

    class Config:
        allow_mutation = False

    all_permissions: Optional[List[NotebooksAllPermissionsObjectResponse]] = Field(
        None, description='Permissions for a service principal.'
    )
    service_principal_name: Optional[ServicePrincipalName] = None


class NotebooksUserObjectForResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    all_permissions: Optional[NotebooksAllPermissionsObjectResponse] = None
    user_name: Optional[UserName] = None


class PasswordsAccessControlListsObjectForPatch(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: Union[PasswordsUserObjectForPatch, PasswordsGroupObjectForPatch]


class PasswordsAccessControlListsObjectForPut(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: Union[PasswordsUserObjectForPut, PasswordsGroupObjectForPut]


class PasswordsAllPermissionsObjectResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: List[PasswordsPermissionsObjectResponse]


class PasswordsGroupObjectForResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    all_permissions: Optional[List[PasswordsAllPermissionsObjectResponse]] = None
    group_name: Optional[GroupName] = None


class PasswordsUserObjectForResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    all_permissions: Optional[PasswordsAllPermissionsObjectResponse] = None
    user_name: Optional[UserName] = None


class PatchClustersPermissionRequest(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    access_control_list: Optional[List[ClustersAccessControlListsObjectForPatch]] = None


class PatchDirectoriesPermissionRequest(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    access_control_list: Optional[
        List[DirectoriesAccessControlListsObjectForPatch]
    ] = None


class PatchExperimentsPermissionRequest(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    access_control_list: Optional[
        List[ExperimentsAccessControlListsObjectForPatch]
    ] = None


class PatchInstancePoolsPermissionRequest(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    access_control_list: Optional[
        List[InstancePoolsAccessControlListsObjectForPatch]
    ] = None


class PatchJobsPermissionRequest(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    access_control_list: Optional[List[JobsAccessControlListsObjectForPatch]] = None


class PatchNotebooksPermissionRequest(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    access_control_list: Optional[
        List[NotebooksAccessControlListsObjectForPatch]
    ] = None


class PatchPasswordsPermissionRequest(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    access_control_list: Optional[
        List[PasswordsAccessControlListsObjectForPatch]
    ] = None


class PipelinesAccessControlListsObjectForPatch(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: Union[
        PipelinesUserObject, PipelinesGroupObject, PipelinesServicePrincipalObject
    ]


class PipelinesAccessControlListsObjectForPut(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: Union[
        PipelinesUserObject, PipelinesGroupObject, PipelinesServicePrincipalObject
    ]


class PipelinesAllPermissionsObjectResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: List[PipelinesPermissionsObjectResponse]


class PipelinesGroupObjectForResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    all_permissions: Optional[List[PipelinesAllPermissionsObjectResponse]] = None
    group_name: Optional[GroupName] = None


class PipelinesServicePrincipalObjectForResponse(BaseModel, extra=Extra.allow):
    """
    Permissions on a service principal.
    """

    class Config:
        allow_mutation = False

    all_permissions: Optional[List[PipelinesAllPermissionsObjectResponse]] = Field(
        None, description='Permissions for a service principal.'
    )
    service_principal_name: Optional[ServicePrincipalName] = None


class PipelinesUserObjectForResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    all_permissions: Optional[PipelinesAllPermissionsObjectResponse] = None
    user_name: Optional[UserName] = None


class PutClustersPermissionRequest(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    access_control_list: Optional[List[ClustersAccessControlListsObjectForPut]] = None


class PutDirectoriesPermissionRequest(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    access_control_list: Optional[
        List[DirectoriesAccessControlListsObjectForPut]
    ] = None


class PutExperimentsPermissionRequest(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    access_control_list: Optional[
        List[ExperimentsAccessControlListsObjectForPut]
    ] = None


class PutInstancePoolsPermissionRequest(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    access_control_list: Optional[
        List[InstancePoolsAccessControlListsObjectForPut]
    ] = None


class PutJobsPermissionRequest(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    access_control_list: Optional[List[JobsAccessControlListsObjectForPut]] = None


class PutNotebooksPermissionRequest(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    access_control_list: Optional[List[NotebooksAccessControlListsObjectForPut]] = None


class PutPasswordsPermissionRequest(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    access_control_list: Optional[List[PasswordsAccessControlListsObjectForPut]] = None


class PutPipelinesPermissionRequest(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    access_control_list: Optional[List[PipelinesAccessControlListsObjectForPut]] = None


class RegisteredModelsAccessControlListsObjectForPatch(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: Union[
        RegisteredModelsUserObject,
        RegisteredModelsGroupObject,
        RegisteredModelsServicePrincipalObject,
    ]


class RegisteredModelsAccessControlListsObjectForPut(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: Union[
        RegisteredModelsUserObject,
        RegisteredModelsGroupObject,
        RegisteredModelsServicePrincipalObject,
    ]


class RegisteredModelsAllPermissionsObjectResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: List[RegisteredModelsPermissionsObjectResponse]


class RegisteredModelsGroupObjectForResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    all_permissions: Optional[List[RegisteredModelsAllPermissionsObjectResponse]] = None
    group_name: Optional[GroupName] = None


class RegisteredModelsServicePrincipalObjectForResponse(BaseModel, extra=Extra.allow):
    """
    Permissions on a service principal.
    """

    class Config:
        allow_mutation = False

    all_permissions: Optional[
        List[RegisteredModelsAllPermissionsObjectResponse]
    ] = Field(None, description='Permissions for a service principal.')
    service_principal_name: Optional[ServicePrincipalName] = None


class RegisteredModelsUserObjectForResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    all_permissions: Optional[RegisteredModelsAllPermissionsObjectResponse] = None
    user_name: Optional[UserName] = None


class ReposAccessControlListsObjectForPatch(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: Union[ReposUserObject, ReposGroupObject, ReposServicePrincipalObject]


class ReposAccessControlListsObjectForPut(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: Union[ReposUserObject, ReposGroupObject, ReposServicePrincipalObject]


class ReposAllPermissionsObjectResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: List[ReposPermissionsObjectResponse]


class ReposGroupObjectForResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    all_permissions: Optional[List[ReposAllPermissionsObjectResponse]] = None
    group_name: Optional[GroupName] = None


class ReposServicePrincipalObjectForResponse(BaseModel, extra=Extra.allow):
    """
    Permissions on a service principal.
    """

    class Config:
        allow_mutation = False

    all_permissions: Optional[List[ReposAllPermissionsObjectResponse]] = Field(
        None, description='Permissions for a service principal.'
    )
    service_principal_name: Optional[ServicePrincipalName] = None


class ReposUserObjectForResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    all_permissions: Optional[ReposAllPermissionsObjectResponse] = None
    user_name: Optional[UserName] = None


class SqlWarehousesAccessControlListsObjectForPatch(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: Union[
        SqlWarehousesUserObject,
        SqlWarehousesGroupObject,
        SqlWarehousesServicePrincipalObject,
    ]


class SqlWarehousesAccessControlListsObjectForPut(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: Union[
        SqlWarehousesUserObject,
        SqlWarehousesGroupObject,
        SqlWarehousesServicePrincipalObject,
    ]


class SqlWarehousesAllPermissionsObjectResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: List[SqlWarehousesPermissionsObjectResponse]


class SqlWarehousesGroupObjectForResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    all_permissions: Optional[List[SqlWarehousesAllPermissionsObjectResponse]] = None
    group_name: Optional[GroupName] = None


class SqlWarehousesServicePrincipalObjectForResponse(BaseModel, extra=Extra.allow):
    """
    Permissions on a service principal.
    """

    class Config:
        allow_mutation = False

    all_permissions: Optional[List[SqlWarehousesAllPermissionsObjectResponse]] = Field(
        None, description='Permissions for a service principal.'
    )
    service_principal_name: Optional[ServicePrincipalName] = None


class SqlWarehousesUserObjectForResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    all_permissions: Optional[SqlWarehousesAllPermissionsObjectResponse] = None
    user_name: Optional[UserName] = None


class TokensAccessControlListsObjectForPatch(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: Union[
        TokensUserObjectForPatch,
        TokensGroupObjectForPatch,
        TokensServicePrincipalObjectForPatch,
    ]


class TokensAccessControlListsObjectForPut(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: Union[
        TokensUserObjectForPut,
        TokensGroupObjectForPut,
        TokensServicePrincipalObjectForPut,
    ]


class TokensAllPermissionsObjectResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: List[TokensPermissionsObjectResponse]


class TokensGroupObjectForResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    all_permissions: Optional[List[TokensAllPermissionsObjectResponse]] = None
    group_name: Optional[GroupName] = None


class TokensServicePrincipalObjectForResponse(BaseModel, extra=Extra.allow):
    """
    Permissions on a service principal.
    """

    class Config:
        allow_mutation = False

    all_permissions: Optional[List[TokensAllPermissionsObjectResponse]] = None
    service_principal_name: Optional[ServicePrincipalName] = None


class TokensUserObjectForResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    all_permissions: Optional[TokensAllPermissionsObjectResponse] = None
    user_name: Optional[UserName] = None


class ClustersAccessControlListsObjectForResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: Union[
        ClustersUserObjectForResponse,
        ClustersGroupObjectForResponse,
        ClustersServicePrincipalObjectForResponse,
    ]


class DirectoriesAccessControlListsObjectForResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: Union[
        DirectoriesUserObjectForResponse,
        DirectoriesGroupObjectForResponse,
        DirectoriesServicePrincipalObjectForResponse,
    ]


class ExperimentsAccessControlListsObjectForResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: Union[
        ExperimentsUserObjectForResponse,
        ExperimentsGroupObjectForResponse,
        ExperimentsServicePrincipalObjectForResponse,
    ]


class GetClustersPermissionResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    access_control_list: Optional[
        List[ClustersAccessControlListsObjectForResponse]
    ] = None
    object_id: Optional[ClustersObjectId] = None
    object_type: Optional[ClustersObjectType] = None


class GetDirectoriesPermissionResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    access_control_list: Optional[
        List[DirectoriesAccessControlListsObjectForResponse]
    ] = None
    object_id: Optional[DirectoryObjectId] = None
    object_type: Optional[DirectoryObjectType] = None


class GetExperimentsPermissionResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    access_control_list: Optional[
        List[ExperimentsAccessControlListsObjectForResponse]
    ] = None
    object_id: Optional[ExperimentObjectId] = None
    object_type: Optional[ExperimentObjectType] = None


class InstancePoolsAccessControlListsObjectForResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: Union[
        InstancePoolsUserObjectForResponse,
        InstancePoolsGroupObjectForResponse,
        InstancePoolsServicePrincipalObjectForResponse,
    ]


class JobsAccessControlListsObjectForResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: Union[
        JobsUserObjectForResponse,
        JobsGroupObjectForResponse,
        JobsServicePrincipalObjectForResponse,
    ]


class NotebooksAccessControlListsObjectForResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: Union[
        NotebooksUserObjectForResponse,
        NotebooksGroupObjectForResponse,
        NotebooksServicePrincipalObjectForResponse,
    ]


class PasswordsAccessControlListsObjectForResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: Union[PasswordsUserObjectForResponse, PasswordsGroupObjectForResponse]


class PatchPipelinesPermissionRequest(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    access_control_list: Optional[
        List[PipelinesAccessControlListsObjectForPatch]
    ] = None


class PatchRegisteredModelsPermissionRequest(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    access_control_list: Optional[
        List[RegisteredModelsAccessControlListsObjectForPatch]
    ] = None


class PatchReposPermissionRequest(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    access_control_list: Optional[List[ReposAccessControlListsObjectForPatch]] = None


class PatchSqlWarehousesPermissionRequest(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    access_control_list: Optional[
        List[SqlWarehousesAccessControlListsObjectForPatch]
    ] = None


class PatchTokenPermissionRequest(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    access_control_list: Optional[List[TokensAccessControlListsObjectForPatch]] = None


class PipelinesAccessControlListsObjectForResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: Union[
        PipelinesUserObjectForResponse,
        PipelinesGroupObjectForResponse,
        PipelinesServicePrincipalObjectForResponse,
    ]


class PutRegisteredModelsPermissionRequest(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    access_control_list: Optional[
        List[RegisteredModelsAccessControlListsObjectForPut]
    ] = None


class PutReposPermissionRequest(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    access_control_list: Optional[List[ReposAccessControlListsObjectForPut]] = None


class PutSqlWarehousesPermissionRequest(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    access_control_list: Optional[
        List[SqlWarehousesAccessControlListsObjectForPut]
    ] = None


class PutTokenPermissionRequest(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    access_control_list: Optional[List[TokensAccessControlListsObjectForPut]] = None


class RegisteredModelsAccessControlListsObjectForResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: Union[
        RegisteredModelsUserObjectForResponse,
        RegisteredModelsGroupObjectForResponse,
        RegisteredModelsServicePrincipalObjectForResponse,
    ]


class ReposAccessControlListsObjectForResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: Union[
        ReposUserObjectForResponse,
        ReposGroupObjectForResponse,
        ReposServicePrincipalObjectForResponse,
    ]


class SqlWarehousesAccessControlListsObjectForResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: Union[
        SqlWarehousesUserObjectForResponse,
        SqlWarehousesGroupObjectForResponse,
        SqlWarehousesServicePrincipalObjectForResponse,
    ]


class TokensAccessControlListsObjectForResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    __root__: Union[
        TokensUserObjectForResponse,
        TokensGroupObjectForResponse,
        TokensServicePrincipalObjectForResponse,
    ]


class GetInstancePoolsPermissionResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    access_control_list: Optional[
        List[InstancePoolsAccessControlListsObjectForResponse]
    ] = None
    object_id: Optional[InstancePoolObjectId] = None
    object_type: Optional[InstancePoolObjectType] = None


class GetJobsPermissionResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    access_control_list: Optional[List[JobsAccessControlListsObjectForResponse]] = None
    object_id: Optional[JobObjectId] = None
    object_type: Optional[JobObjectType] = None


class GetNotebooksPermissionResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    access_control_list: Optional[
        List[NotebooksAccessControlListsObjectForResponse]
    ] = None
    object_id: Optional[NotebookObjectId] = None
    object_type: Optional[NotebookObjectType] = None


class GetPasswordsPermissionResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    access_control_list: Optional[
        List[PasswordsAccessControlListsObjectForResponse]
    ] = None
    object_id: Optional[PasswordsObjectId] = None
    object_type: Optional[PasswordsObjectType] = None


class GetPipelinesPermissionResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    access_control_list: Optional[
        List[PipelinesAccessControlListsObjectForResponse]
    ] = None
    object_id: Optional[PipelineObjectId] = None
    object_type: Optional[PipelineObjectType] = None


class GetRegisteredModelsPermissionResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    access_control_list: Optional[
        List[RegisteredModelsAccessControlListsObjectForResponse]
    ] = None
    object_id: Optional[RegisteredModelObjectId] = None
    object_type: Optional[RegisteredModelObjectType] = None


class GetReposPermissionResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    access_control_list: Optional[List[ReposAccessControlListsObjectForResponse]] = None
    object_id: Optional[RepoObjectId] = None
    object_type: Optional[RepoObjectType] = None


class GetSqlWarehousesPermissionResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    access_control_list: Optional[
        List[SqlWarehousesAccessControlListsObjectForResponse]
    ] = None
    object_id: Optional[SqlwarehousesObjectId] = None
    object_type: Optional[SqlwarehousesObjectType] = None


class GetTokensPermissionResponse(BaseModel, extra=Extra.allow):
    class Config:
        allow_mutation = False

    access_control_list: Optional[
        List[TokensAccessControlListsObjectForResponse]
    ] = None
    object_id: Optional[ObjectId] = None
    object_type: Optional[ObjectType] = None
